
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ea8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00802000  00001ea8  00001f3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00802014  00802014  00001f50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009b75  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000429a  00000000  00000000  0000bd6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d87  00000000  00000000  00010007  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  00013d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f33e  00000000  00000000  000144c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024ba  00000000  00000000  00043806  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00045cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a575  00000000  00000000  00045ed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	03 c1       	rjmp	.+518    	; 0x208 <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	07 c1       	rjmp	.+526    	; 0x248 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4d c4       	rjmp	.+2202   	; 0x938 <__vector_39>
      9e:	00 00       	nop
      a0:	7d c4       	rjmp	.+2298   	; 0x99c <__vector_40>
      a2:	00 00       	nop
      a4:	ad c4       	rjmp	.+2394   	; 0xa00 <__vector_41>
      a6:	00 00       	nop
      a8:	dd c4       	rjmp	.+2490   	; 0xa64 <__vector_42>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bd c0       	rjmp	.+378    	; 0x248 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bb c0       	rjmp	.+374    	; 0x248 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	45 c3       	rjmp	.+1674   	; 0x7a8 <__vector_71>
     11e:	00 00       	nop
     120:	75 c3       	rjmp	.+1770   	; 0x80c <__vector_72>
     122:	00 00       	nop
     124:	a5 c3       	rjmp	.+1866   	; 0x870 <__vector_73>
     126:	00 00       	nop
     128:	d5 c3       	rjmp	.+1962   	; 0x8d4 <__vector_74>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
     132:	00 00       	nop
     134:	89 c0       	rjmp	.+274    	; 0x248 <__bad_interrupt>
     136:	00 00       	nop
     138:	87 c0       	rjmp	.+270    	; 0x248 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	85 c0       	rjmp	.+266    	; 0x248 <__bad_interrupt>
     13e:	00 00       	nop
     140:	83 c0       	rjmp	.+262    	; 0x248 <__bad_interrupt>
     142:	00 00       	nop
     144:	81 c0       	rjmp	.+258    	; 0x248 <__bad_interrupt>
     146:	00 00       	nop
     148:	7f c0       	rjmp	.+254    	; 0x248 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7d c0       	rjmp	.+250    	; 0x248 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7b c0       	rjmp	.+246    	; 0x248 <__bad_interrupt>
     152:	00 00       	nop
     154:	79 c0       	rjmp	.+242    	; 0x248 <__bad_interrupt>
     156:	00 00       	nop
     158:	77 c0       	rjmp	.+238    	; 0x248 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	63 64       	ori	r22, 0x43	; 67
     1fe:	69 6e       	ori	r22, 0xE9	; 233
     200:	6f 70       	andi	r22, 0x0F	; 15
     202:	73 75       	andi	r23, 0x53	; 83
     204:	78 58       	subi	r23, 0x88	; 136
     206:	5b 00       	.word	0x005b	; ????

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	cd bf       	out	0x3d, r28	; 61
     210:	df e5       	ldi	r29, 0x5F	; 95
     212:	de bf       	out	0x3e, r29	; 62
     214:	00 e0       	ldi	r16, 0x00	; 0
     216:	0c bf       	out	0x3c, r16	; 60

00000218 <__do_copy_data>:
     218:	10 e2       	ldi	r17, 0x20	; 32
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e2       	ldi	r27, 0x20	; 32
     21e:	e8 ea       	ldi	r30, 0xA8	; 168
     220:	fe e1       	ldi	r31, 0x1E	; 30
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0b bf       	out	0x3b, r16	; 59
     226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
     228:	07 90       	elpm	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	a4 31       	cpi	r26, 0x14	; 20
     22e:	b1 07       	cpc	r27, r17
     230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>

00000232 <__do_clear_bss>:
     232:	20 e2       	ldi	r18, 0x20	; 32
     234:	a4 e1       	ldi	r26, 0x14	; 20
     236:	b0 e2       	ldi	r27, 0x20	; 32
     238:	01 c0       	rjmp	.+2      	; 0x23c <.do_clear_bss_start>

0000023a <.do_clear_bss_loop>:
     23a:	1d 92       	st	X+, r1

0000023c <.do_clear_bss_start>:
     23c:	a0 33       	cpi	r26, 0x30	; 48
     23e:	b2 07       	cpc	r27, r18
     240:	e1 f7       	brne	.-8      	; 0x23a <.do_clear_bss_loop>
     242:	d8 d5       	rcall	.+2992   	; 0xdf4 <main>
     244:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     254:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <stdio_base>
     258:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <stdio_base+0x1>
     25c:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <ptr_get>
     260:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <ptr_get+0x1>
     264:	be 01       	movw	r22, r28
     266:	6f 5f       	subi	r22, 0xFF	; 255
     268:	7f 4f       	sbci	r23, 0xFF	; 255
     26a:	19 95       	eicall
	return c;
     26c:	89 81       	ldd	r24, Y+1	; 0x01
}
     26e:	08 2e       	mov	r0, r24
     270:	00 0c       	add	r0, r0
     272:	99 0b       	sbc	r25, r25
     274:	0f 90       	pop	r0
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     27c:	81 15       	cp	r24, r1
     27e:	22 e0       	ldi	r18, 0x02	; 2
     280:	92 07       	cpc	r25, r18
     282:	61 f4       	brne	.+24     	; 0x29c <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     284:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <adca_enable_count>
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	98 0f       	add	r25, r24
     28c:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <adca_enable_count>
     290:	81 11       	cpse	r24, r1
     292:	12 c0       	rjmp	.+36     	; 0x2b8 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     294:	62 e0       	ldi	r22, 0x02	; 2
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	6e c5       	rjmp	.+2780   	; 0xd76 <sysclk_enable_module>
     29a:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     29c:	80 34       	cpi	r24, 0x40	; 64
     29e:	92 40       	sbci	r25, 0x02	; 2
     2a0:	59 f4       	brne	.+22     	; 0x2b8 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     2a2:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <__data_end>
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	98 0f       	add	r25, r24
     2aa:	90 93 14 20 	sts	0x2014, r25	; 0x802014 <__data_end>
     2ae:	81 11       	cpse	r24, r1
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2b2:	62 e0       	ldi	r22, 0x02	; 2
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	5f c5       	rjmp	.+2750   	; 0xd76 <sysclk_enable_module>
     2b8:	08 95       	ret

000002ba <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     2ba:	81 15       	cp	r24, r1
     2bc:	22 e0       	ldi	r18, 0x02	; 2
     2be:	92 07       	cpc	r25, r18
     2c0:	59 f4       	brne	.+22     	; 0x2d8 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     2c2:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <adca_enable_count>
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	80 93 15 20 	sts	0x2015, r24	; 0x802015 <adca_enable_count>
     2cc:	81 11       	cpse	r24, r1
     2ce:	11 c0       	rjmp	.+34     	; 0x2f2 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2d0:	62 e0       	ldi	r22, 0x02	; 2
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	66 c5       	rjmp	.+2764   	; 0xda2 <sysclk_disable_module>
     2d6:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2d8:	80 34       	cpi	r24, 0x40	; 64
     2da:	92 40       	sbci	r25, 0x02	; 2
     2dc:	51 f4       	brne	.+20     	; 0x2f2 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     2de:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <__data_end>
     2e2:	81 50       	subi	r24, 0x01	; 1
     2e4:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <__data_end>
     2e8:	81 11       	cpse	r24, r1
     2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2ec:	62 e0       	ldi	r22, 0x02	; 2
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	58 c5       	rjmp	.+2736   	; 0xda2 <sysclk_disable_module>
     2f2:	08 95       	ret

000002f4 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	1f 93       	push	r17
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	1f 92       	push	r1
     300:	1f 92       	push	r1
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     308:	8f b7       	in	r24, 0x3f	; 63
     30a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     30c:	f8 94       	cli
	return flags;
     30e:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     310:	c7 01       	movw	r24, r14
     312:	b4 df       	rcall	.-152    	; 0x27c <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     314:	f7 01       	movw	r30, r14
     316:	80 81       	ld	r24, Z
     318:	81 60       	ori	r24, 0x01	; 1
     31a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     31c:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     31e:	80 91 21 20 	lds	r24, 0x2021	; 0x802021 <sleepmgr_locks+0x1>
     322:	8f 3f       	cpi	r24, 0xFF	; 255
     324:	09 f4       	brne	.+2      	; 0x328 <adc_enable+0x34>
     326:	ff cf       	rjmp	.-2      	; 0x326 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     328:	8f b7       	in	r24, 0x3f	; 63
     32a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     32c:	f8 94       	cli
	return flags;
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     330:	e0 e2       	ldi	r30, 0x20	; 32
     332:	f0 e2       	ldi	r31, 0x20	; 32
     334:	81 81       	ldd	r24, Z+1	; 0x01
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     33a:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	08 95       	ret

0000034c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     34c:	fc 01       	movw	r30, r24
     34e:	91 81       	ldd	r25, Z+1	; 0x01
     350:	95 ff       	sbrs	r25, 5
     352:	fd cf       	rjmp	.-6      	; 0x34e <usart_putchar+0x2>
     354:	60 83       	st	Z, r22
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	08 95       	ret

0000035c <usart_getchar>:
     35c:	fc 01       	movw	r30, r24
     35e:	91 81       	ldd	r25, Z+1	; 0x01
     360:	99 23       	and	r25, r25
     362:	ec f7       	brge	.-6      	; 0x35e <usart_getchar+0x2>
     364:	80 81       	ld	r24, Z
     366:	08 95       	ret

00000368 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     368:	4f 92       	push	r4
     36a:	5f 92       	push	r5
     36c:	6f 92       	push	r6
     36e:	7f 92       	push	r7
     370:	8f 92       	push	r8
     372:	9f 92       	push	r9
     374:	af 92       	push	r10
     376:	bf 92       	push	r11
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	7c 01       	movw	r14, r24
     384:	4a 01       	movw	r8, r20
     386:	5b 01       	movw	r10, r22
     388:	28 01       	movw	r4, r16
     38a:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     38c:	fc 01       	movw	r30, r24
     38e:	84 81       	ldd	r24, Z+4	; 0x04
     390:	82 ff       	sbrs	r24, 2
     392:	16 c0       	rjmp	.+44     	; 0x3c0 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     394:	d9 01       	movw	r26, r18
     396:	c8 01       	movw	r24, r16
     398:	68 94       	set
     39a:	12 f8       	bld	r1, 2
     39c:	b6 95       	lsr	r27
     39e:	a7 95       	ror	r26
     3a0:	97 95       	ror	r25
     3a2:	87 95       	ror	r24
     3a4:	16 94       	lsr	r1
     3a6:	d1 f7       	brne	.-12     	; 0x39c <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     3a8:	b9 01       	movw	r22, r18
     3aa:	a8 01       	movw	r20, r16
     3ac:	03 2e       	mov	r0, r19
     3ae:	36 e1       	ldi	r19, 0x16	; 22
     3b0:	76 95       	lsr	r23
     3b2:	67 95       	ror	r22
     3b4:	57 95       	ror	r21
     3b6:	47 95       	ror	r20
     3b8:	3a 95       	dec	r19
     3ba:	d1 f7       	brne	.-12     	; 0x3b0 <usart_set_baudrate+0x48>
     3bc:	30 2d       	mov	r19, r0
     3be:	15 c0       	rjmp	.+42     	; 0x3ea <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     3c0:	d9 01       	movw	r26, r18
     3c2:	c8 01       	movw	r24, r16
     3c4:	68 94       	set
     3c6:	13 f8       	bld	r1, 3
     3c8:	b6 95       	lsr	r27
     3ca:	a7 95       	ror	r26
     3cc:	97 95       	ror	r25
     3ce:	87 95       	ror	r24
     3d0:	16 94       	lsr	r1
     3d2:	d1 f7       	brne	.-12     	; 0x3c8 <usart_set_baudrate+0x60>
		min_rate /= 2;
     3d4:	b9 01       	movw	r22, r18
     3d6:	a8 01       	movw	r20, r16
     3d8:	03 2e       	mov	r0, r19
     3da:	37 e1       	ldi	r19, 0x17	; 23
     3dc:	76 95       	lsr	r23
     3de:	67 95       	ror	r22
     3e0:	57 95       	ror	r21
     3e2:	47 95       	ror	r20
     3e4:	3a 95       	dec	r19
     3e6:	d1 f7       	brne	.-12     	; 0x3dc <usart_set_baudrate+0x74>
     3e8:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     3ea:	88 15       	cp	r24, r8
     3ec:	99 05       	cpc	r25, r9
     3ee:	aa 05       	cpc	r26, r10
     3f0:	bb 05       	cpc	r27, r11
     3f2:	08 f4       	brcc	.+2      	; 0x3f6 <usart_set_baudrate+0x8e>
     3f4:	a2 c0       	rjmp	.+324    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     3f6:	84 16       	cp	r8, r20
     3f8:	95 06       	cpc	r9, r21
     3fa:	a6 06       	cpc	r10, r22
     3fc:	b7 06       	cpc	r11, r23
     3fe:	08 f4       	brcc	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	9e c0       	rjmp	.+316    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     402:	f7 01       	movw	r30, r14
     404:	84 81       	ldd	r24, Z+4	; 0x04
     406:	82 fd       	sbrc	r24, 2
     408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		baud *= 2;
     40a:	88 0c       	add	r8, r8
     40c:	99 1c       	adc	r9, r9
     40e:	aa 1c       	adc	r10, r10
     410:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     412:	c3 01       	movw	r24, r6
     414:	b2 01       	movw	r22, r4
     416:	a5 01       	movw	r20, r10
     418:	94 01       	movw	r18, r8
     41a:	99 d5       	rcall	.+2866   	; 0xf4e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     41c:	2f 3f       	cpi	r18, 0xFF	; 255
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	08 f4       	brcc	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	8d c0       	rjmp	.+282    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	a0 e0       	ldi	r26, 0x00	; 0
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	c9 ef       	ldi	r28, 0xF9	; 249
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     434:	28 17       	cp	r18, r24
     436:	39 07       	cpc	r19, r25
     438:	4a 07       	cpc	r20, r26
     43a:	5b 07       	cpc	r21, r27
     43c:	58 f0       	brcs	.+22     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			break;
		}

		limit <<= 1;
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	aa 1f       	adc	r26, r26
     444:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     446:	cd 3f       	cpi	r28, 0xFD	; 253
     448:	0c f4       	brge	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			limit |= 1;
     44a:	81 60       	ori	r24, 0x01	; 1
     44c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     44e:	c7 30       	cpi	r28, 0x07	; 7
     450:	89 f7       	brne	.-30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     452:	4d c0       	rjmp	.+154    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     454:	cc 23       	and	r28, r28
     456:	0c f0       	brlt	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	4a c0       	rjmp	.+148    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     45a:	d5 01       	movw	r26, r10
     45c:	c4 01       	movw	r24, r8
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	aa 1f       	adc	r26, r26
     464:	bb 1f       	adc	r27, r27
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	aa 1f       	adc	r26, r26
     46c:	bb 1f       	adc	r27, r27
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	aa 1f       	adc	r26, r26
     474:	bb 1f       	adc	r27, r27
     476:	48 1a       	sub	r4, r24
     478:	59 0a       	sbc	r5, r25
     47a:	6a 0a       	sbc	r6, r26
     47c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     47e:	ce 3f       	cpi	r28, 0xFE	; 254
     480:	ec f4       	brge	.+58     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     482:	8d ef       	ldi	r24, 0xFD	; 253
     484:	9f ef       	ldi	r25, 0xFF	; 255
     486:	8c 1b       	sub	r24, r28
     488:	91 09       	sbc	r25, r1
     48a:	c7 fd       	sbrc	r28, 7
     48c:	93 95       	inc	r25
     48e:	04 c0       	rjmp	.+8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     490:	44 0c       	add	r4, r4
     492:	55 1c       	adc	r5, r5
     494:	66 1c       	adc	r6, r6
     496:	77 1c       	adc	r7, r7
     498:	8a 95       	dec	r24
     49a:	d2 f7       	brpl	.-12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     49c:	d5 01       	movw	r26, r10
     49e:	c4 01       	movw	r24, r8
     4a0:	b6 95       	lsr	r27
     4a2:	a7 95       	ror	r26
     4a4:	97 95       	ror	r25
     4a6:	87 95       	ror	r24
     4a8:	bc 01       	movw	r22, r24
     4aa:	cd 01       	movw	r24, r26
     4ac:	64 0d       	add	r22, r4
     4ae:	75 1d       	adc	r23, r5
     4b0:	86 1d       	adc	r24, r6
     4b2:	97 1d       	adc	r25, r7
     4b4:	a5 01       	movw	r20, r10
     4b6:	94 01       	movw	r18, r8
     4b8:	4a d5       	rcall	.+2708   	; 0xf4e <__udivmodsi4>
     4ba:	35 c0       	rjmp	.+106    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
		} else {
			baud <<= exp + 3;
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	8c 0f       	add	r24, r28
     4c0:	a5 01       	movw	r20, r10
     4c2:	94 01       	movw	r18, r8
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4c6:	22 0f       	add	r18, r18
     4c8:	33 1f       	adc	r19, r19
     4ca:	44 1f       	adc	r20, r20
     4cc:	55 1f       	adc	r21, r21
     4ce:	8a 95       	dec	r24
     4d0:	d2 f7       	brpl	.-12     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			div = (cpu_hz + baud / 2) / baud;
     4d2:	da 01       	movw	r26, r20
     4d4:	c9 01       	movw	r24, r18
     4d6:	b6 95       	lsr	r27
     4d8:	a7 95       	ror	r26
     4da:	97 95       	ror	r25
     4dc:	87 95       	ror	r24
     4de:	bc 01       	movw	r22, r24
     4e0:	cd 01       	movw	r24, r26
     4e2:	64 0d       	add	r22, r4
     4e4:	75 1d       	adc	r23, r5
     4e6:	86 1d       	adc	r24, r6
     4e8:	97 1d       	adc	r25, r7
     4ea:	31 d5       	rcall	.+2658   	; 0xf4e <__udivmodsi4>
     4ec:	1c c0       	rjmp	.+56     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     4ee:	83 e0       	ldi	r24, 0x03	; 3
     4f0:	8c 0f       	add	r24, r28
     4f2:	a5 01       	movw	r20, r10
     4f4:	94 01       	movw	r18, r8
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4f8:	22 0f       	add	r18, r18
     4fa:	33 1f       	adc	r19, r19
     4fc:	44 1f       	adc	r20, r20
     4fe:	55 1f       	adc	r21, r21
     500:	8a 95       	dec	r24
     502:	d2 f7       	brpl	.-12     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		div = (cpu_hz + baud / 2) / baud - 1;
     504:	da 01       	movw	r26, r20
     506:	c9 01       	movw	r24, r18
     508:	b6 95       	lsr	r27
     50a:	a7 95       	ror	r26
     50c:	97 95       	ror	r25
     50e:	87 95       	ror	r24
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	64 0d       	add	r22, r4
     516:	75 1d       	adc	r23, r5
     518:	86 1d       	adc	r24, r6
     51a:	97 1d       	adc	r25, r7
     51c:	18 d5       	rcall	.+2608   	; 0xf4e <__udivmodsi4>
     51e:	21 50       	subi	r18, 0x01	; 1
     520:	31 09       	sbc	r19, r1
     522:	41 09       	sbc	r20, r1
     524:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     526:	83 2f       	mov	r24, r19
     528:	8f 70       	andi	r24, 0x0F	; 15
     52a:	c2 95       	swap	r28
     52c:	c0 7f       	andi	r28, 0xF0	; 240
     52e:	c8 2b       	or	r28, r24
     530:	f7 01       	movw	r30, r14
     532:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     534:	26 83       	std	Z+6, r18	; 0x06

	return true;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	18 c0       	rjmp	.+48     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	16 c0       	rjmp	.+44     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	14 c0       	rjmp	.+40     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     542:	d5 01       	movw	r26, r10
     544:	c4 01       	movw	r24, r8
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	aa 1f       	adc	r26, r26
     54c:	bb 1f       	adc	r27, r27
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	aa 1f       	adc	r26, r26
     554:	bb 1f       	adc	r27, r27
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	aa 1f       	adc	r26, r26
     55c:	bb 1f       	adc	r27, r27
     55e:	48 1a       	sub	r4, r24
     560:	59 0a       	sbc	r5, r25
     562:	6a 0a       	sbc	r6, r26
     564:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     566:	c9 ef       	ldi	r28, 0xF9	; 249
     568:	8c cf       	rjmp	.-232    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	8f 90       	pop	r8
     57c:	7f 90       	pop	r7
     57e:	6f 90       	pop	r6
     580:	5f 90       	pop	r5
     582:	4f 90       	pop	r4
     584:	08 95       	ret

00000586 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
     590:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	09 f4       	brne	.+2      	; 0x598 <usart_init_rs232+0x12>
     596:	e6 c0       	rjmp	.+460    	; 0x764 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     598:	80 3c       	cpi	r24, 0xC0	; 192
     59a:	91 05       	cpc	r25, r1
     59c:	21 f4       	brne	.+8      	; 0x5a6 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     59e:	60 e1       	ldi	r22, 0x10	; 16
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	e9 d3       	rcall	.+2002   	; 0xd76 <sysclk_enable_module>
     5a4:	df c0       	rjmp	.+446    	; 0x764 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     5a6:	c0 38       	cpi	r28, 0x80	; 128
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	d8 07       	cpc	r29, r24
     5ac:	21 f4       	brne	.+8      	; 0x5b6 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     5ae:	62 e0       	ldi	r22, 0x02	; 2
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	e1 d3       	rcall	.+1986   	; 0xd76 <sysclk_enable_module>
     5b4:	d7 c0       	rjmp	.+430    	; 0x764 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     5b6:	c1 15       	cp	r28, r1
     5b8:	e1 e0       	ldi	r30, 0x01	; 1
     5ba:	de 07       	cpc	r29, r30
     5bc:	21 f4       	brne	.+8      	; 0x5c6 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	d9 d3       	rcall	.+1970   	; 0xd76 <sysclk_enable_module>
     5c4:	cf c0       	rjmp	.+414    	; 0x764 <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     5c6:	c0 38       	cpi	r28, 0x80	; 128
     5c8:	f3 e0       	ldi	r31, 0x03	; 3
     5ca:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     5cc:	21 f4       	brne	.+8      	; 0x5d6 <usart_init_rs232+0x50>
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	d1 d3       	rcall	.+1954   	; 0xd76 <sysclk_enable_module>
     5d4:	c7 c0       	rjmp	.+398    	; 0x764 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     5d6:	c0 39       	cpi	r28, 0x90	; 144
     5d8:	83 e0       	ldi	r24, 0x03	; 3
     5da:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     5dc:	21 f4       	brne	.+8      	; 0x5e6 <usart_init_rs232+0x60>
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	c9 d3       	rcall	.+1938   	; 0xd76 <sysclk_enable_module>
     5e4:	bf c0       	rjmp	.+382    	; 0x764 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     5e6:	c1 15       	cp	r28, r1
     5e8:	e2 e0       	ldi	r30, 0x02	; 2
     5ea:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     5ec:	21 f4       	brne	.+8      	; 0x5f6 <usart_init_rs232+0x70>
     5ee:	62 e0       	ldi	r22, 0x02	; 2
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	c1 d3       	rcall	.+1922   	; 0xd76 <sysclk_enable_module>
     5f4:	b7 c0       	rjmp	.+366    	; 0x764 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     5f6:	c0 34       	cpi	r28, 0x40	; 64
     5f8:	f2 e0       	ldi	r31, 0x02	; 2
     5fa:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     5fc:	21 f4       	brne	.+8      	; 0x606 <usart_init_rs232+0x80>
     5fe:	62 e0       	ldi	r22, 0x02	; 2
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	b9 d3       	rcall	.+1906   	; 0xd76 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     604:	af c0       	rjmp	.+350    	; 0x764 <usart_init_rs232+0x1de>
     606:	c0 32       	cpi	r28, 0x20	; 32
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     60c:	21 f4       	brne	.+8      	; 0x616 <usart_init_rs232+0x90>
     60e:	64 e0       	ldi	r22, 0x04	; 4
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	b1 d3       	rcall	.+1890   	; 0xd76 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     614:	a7 c0       	rjmp	.+334    	; 0x764 <usart_init_rs232+0x1de>
     616:	c1 15       	cp	r28, r1
     618:	e8 e0       	ldi	r30, 0x08	; 8
     61a:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     61c:	21 f4       	brne	.+8      	; 0x626 <usart_init_rs232+0xa0>
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	a9 d3       	rcall	.+1874   	; 0xd76 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     624:	9f c0       	rjmp	.+318    	; 0x764 <usart_init_rs232+0x1de>
     626:	c1 15       	cp	r28, r1
     628:	f9 e0       	ldi	r31, 0x09	; 9
     62a:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     62c:	21 f4       	brne	.+8      	; 0x636 <usart_init_rs232+0xb0>
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	84 e0       	ldi	r24, 0x04	; 4
     632:	a1 d3       	rcall	.+1858   	; 0xd76 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     634:	97 c0       	rjmp	.+302    	; 0x764 <usart_init_rs232+0x1de>
     636:	c1 15       	cp	r28, r1
     638:	8a e0       	ldi	r24, 0x0A	; 10
     63a:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     63c:	21 f4       	brne	.+8      	; 0x646 <usart_init_rs232+0xc0>
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	85 e0       	ldi	r24, 0x05	; 5
     642:	99 d3       	rcall	.+1842   	; 0xd76 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     644:	8f c0       	rjmp	.+286    	; 0x764 <usart_init_rs232+0x1de>
     646:	c1 15       	cp	r28, r1
     648:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     64a:	de 07       	cpc	r29, r30
     64c:	21 f4       	brne	.+8      	; 0x656 <usart_init_rs232+0xd0>
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	86 e0       	ldi	r24, 0x06	; 6
     652:	91 d3       	rcall	.+1826   	; 0xd76 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     654:	87 c0       	rjmp	.+270    	; 0x764 <usart_init_rs232+0x1de>
     656:	c0 34       	cpi	r28, 0x40	; 64
     658:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     65a:	df 07       	cpc	r29, r31
     65c:	21 f4       	brne	.+8      	; 0x666 <usart_init_rs232+0xe0>
     65e:	62 e0       	ldi	r22, 0x02	; 2
     660:	83 e0       	ldi	r24, 0x03	; 3
     662:	89 d3       	rcall	.+1810   	; 0xd76 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     664:	7f c0       	rjmp	.+254    	; 0x764 <usart_init_rs232+0x1de>
     666:	c0 34       	cpi	r28, 0x40	; 64
     668:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     66a:	d8 07       	cpc	r29, r24
     66c:	21 f4       	brne	.+8      	; 0x676 <usart_init_rs232+0xf0>
     66e:	62 e0       	ldi	r22, 0x02	; 2
     670:	84 e0       	ldi	r24, 0x04	; 4
     672:	81 d3       	rcall	.+1794   	; 0xd76 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     674:	77 c0       	rjmp	.+238    	; 0x764 <usart_init_rs232+0x1de>
     676:	c0 34       	cpi	r28, 0x40	; 64
     678:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     67a:	de 07       	cpc	r29, r30
     67c:	21 f4       	brne	.+8      	; 0x686 <usart_init_rs232+0x100>
     67e:	62 e0       	ldi	r22, 0x02	; 2
     680:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     682:	79 d3       	rcall	.+1778   	; 0xd76 <sysclk_enable_module>
     684:	6f c0       	rjmp	.+222    	; 0x764 <usart_init_rs232+0x1de>
     686:	c0 39       	cpi	r28, 0x90	; 144
     688:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     68a:	df 07       	cpc	r29, r31
     68c:	21 f4       	brne	.+8      	; 0x696 <usart_init_rs232+0x110>
     68e:	64 e0       	ldi	r22, 0x04	; 4
     690:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     692:	71 d3       	rcall	.+1762   	; 0xd76 <sysclk_enable_module>
     694:	67 c0       	rjmp	.+206    	; 0x764 <usart_init_rs232+0x1de>
     696:	c0 39       	cpi	r28, 0x90	; 144
     698:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     69a:	d8 07       	cpc	r29, r24
     69c:	21 f4       	brne	.+8      	; 0x6a6 <usart_init_rs232+0x120>
     69e:	64 e0       	ldi	r22, 0x04	; 4
     6a0:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     6a2:	69 d3       	rcall	.+1746   	; 0xd76 <sysclk_enable_module>
     6a4:	5f c0       	rjmp	.+190    	; 0x764 <usart_init_rs232+0x1de>
     6a6:	c0 39       	cpi	r28, 0x90	; 144
     6a8:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     6aa:	de 07       	cpc	r29, r30
     6ac:	21 f4       	brne	.+8      	; 0x6b6 <usart_init_rs232+0x130>
     6ae:	64 e0       	ldi	r22, 0x04	; 4
     6b0:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     6b2:	61 d3       	rcall	.+1730   	; 0xd76 <sysclk_enable_module>
     6b4:	57 c0       	rjmp	.+174    	; 0x764 <usart_init_rs232+0x1de>
     6b6:	c0 39       	cpi	r28, 0x90	; 144
     6b8:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     6ba:	df 07       	cpc	r29, r31
     6bc:	21 f4       	brne	.+8      	; 0x6c6 <usart_init_rs232+0x140>
     6be:	64 e0       	ldi	r22, 0x04	; 4
     6c0:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     6c2:	59 d3       	rcall	.+1714   	; 0xd76 <sysclk_enable_module>
     6c4:	4f c0       	rjmp	.+158    	; 0x764 <usart_init_rs232+0x1de>
     6c6:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     6c8:	88 e0       	ldi	r24, 0x08	; 8
     6ca:	d8 07       	cpc	r29, r24
     6cc:	21 f4       	brne	.+8      	; 0x6d6 <usart_init_rs232+0x150>
     6ce:	68 e0       	ldi	r22, 0x08	; 8
     6d0:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     6d2:	51 d3       	rcall	.+1698   	; 0xd76 <sysclk_enable_module>
     6d4:	47 c0       	rjmp	.+142    	; 0x764 <usart_init_rs232+0x1de>
     6d6:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     6d8:	e9 e0       	ldi	r30, 0x09	; 9
     6da:	de 07       	cpc	r29, r30
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <usart_init_rs232+0x160>
     6de:	68 e0       	ldi	r22, 0x08	; 8
     6e0:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     6e2:	49 d3       	rcall	.+1682   	; 0xd76 <sysclk_enable_module>
     6e4:	3f c0       	rjmp	.+126    	; 0x764 <usart_init_rs232+0x1de>
     6e6:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     6e8:	f8 e0       	ldi	r31, 0x08	; 8
     6ea:	df 07       	cpc	r29, r31
     6ec:	21 f4       	brne	.+8      	; 0x6f6 <usart_init_rs232+0x170>
     6ee:	60 e1       	ldi	r22, 0x10	; 16
     6f0:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     6f2:	41 d3       	rcall	.+1666   	; 0xd76 <sysclk_enable_module>
     6f4:	37 c0       	rjmp	.+110    	; 0x764 <usart_init_rs232+0x1de>
     6f6:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     6f8:	89 e0       	ldi	r24, 0x09	; 9
     6fa:	d8 07       	cpc	r29, r24
     6fc:	21 f4       	brne	.+8      	; 0x706 <usart_init_rs232+0x180>
     6fe:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     700:	84 e0       	ldi	r24, 0x04	; 4
     702:	39 d3       	rcall	.+1650   	; 0xd76 <sysclk_enable_module>
     704:	2f c0       	rjmp	.+94     	; 0x764 <usart_init_rs232+0x1de>
     706:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     708:	ea e0       	ldi	r30, 0x0A	; 10
     70a:	de 07       	cpc	r29, r30
     70c:	21 f4       	brne	.+8      	; 0x716 <usart_init_rs232+0x190>
     70e:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     710:	85 e0       	ldi	r24, 0x05	; 5
     712:	31 d3       	rcall	.+1634   	; 0xd76 <sysclk_enable_module>
     714:	27 c0       	rjmp	.+78     	; 0x764 <usart_init_rs232+0x1de>
     716:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     718:	fb e0       	ldi	r31, 0x0B	; 11
     71a:	df 07       	cpc	r29, r31
     71c:	21 f4       	brne	.+8      	; 0x726 <usart_init_rs232+0x1a0>
     71e:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     720:	86 e0       	ldi	r24, 0x06	; 6
     722:	29 d3       	rcall	.+1618   	; 0xd76 <sysclk_enable_module>
     724:	1f c0       	rjmp	.+62     	; 0x764 <usart_init_rs232+0x1de>
     726:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     728:	88 e0       	ldi	r24, 0x08	; 8
     72a:	d8 07       	cpc	r29, r24
     72c:	21 f4       	brne	.+8      	; 0x736 <usart_init_rs232+0x1b0>
     72e:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	21 d3       	rcall	.+1602   	; 0xd76 <sysclk_enable_module>
     734:	17 c0       	rjmp	.+46     	; 0x764 <usart_init_rs232+0x1de>
     736:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     738:	e9 e0       	ldi	r30, 0x09	; 9
     73a:	de 07       	cpc	r29, r30
     73c:	21 f4       	brne	.+8      	; 0x746 <usart_init_rs232+0x1c0>
     73e:	60 e2       	ldi	r22, 0x20	; 32
     740:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     742:	19 d3       	rcall	.+1586   	; 0xd76 <sysclk_enable_module>
     744:	0f c0       	rjmp	.+30     	; 0x764 <usart_init_rs232+0x1de>
     746:	c0 38       	cpi	r28, 0x80	; 128
     748:	f4 e0       	ldi	r31, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     74a:	df 07       	cpc	r29, r31
     74c:	21 f4       	brne	.+8      	; 0x756 <usart_init_rs232+0x1d0>
     74e:	60 e4       	ldi	r22, 0x40	; 64
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	11 d3       	rcall	.+1570   	; 0xd76 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     754:	07 c0       	rjmp	.+14     	; 0x764 <usart_init_rs232+0x1de>
     756:	c0 3a       	cpi	r28, 0xA0	; 160
     758:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     75a:	d8 07       	cpc	r29, r24
     75c:	19 f4       	brne	.+6      	; 0x764 <usart_init_rs232+0x1de>
     75e:	60 e4       	ldi	r22, 0x40	; 64
     760:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     762:	09 d3       	rcall	.+1554   	; 0xd76 <sysclk_enable_module>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     768:	8d 83       	std	Y+5, r24	; 0x05
     76a:	f8 01       	movw	r30, r16
     76c:	95 81       	ldd	r25, Z+5	; 0x05
     76e:	84 81       	ldd	r24, Z+4	; 0x04
     770:	89 2b       	or	r24, r25
     772:	96 81       	ldd	r25, Z+6	; 0x06
     774:	91 11       	cpse	r25, r1
     776:	98 e0       	ldi	r25, 0x08	; 8
     778:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     77a:	8d 83       	std	Y+5, r24	; 0x05
     77c:	f8 01       	movw	r30, r16
     77e:	40 81       	ld	r20, Z
     780:	51 81       	ldd	r21, Z+1	; 0x01
     782:	62 81       	ldd	r22, Z+2	; 0x02
     784:	73 81       	ldd	r23, Z+3	; 0x03
     786:	00 e8       	ldi	r16, 0x80	; 128
     788:	14 e8       	ldi	r17, 0x84	; 132
     78a:	2e e1       	ldi	r18, 0x1E	; 30
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	ce 01       	movw	r24, r28
     790:	eb dd       	rcall	.-1066   	; 0x368 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     792:	9c 81       	ldd	r25, Y+4	; 0x04
     794:	98 60       	ori	r25, 0x08	; 8
     796:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     798:	9c 81       	ldd	r25, Y+4	; 0x04
     79a:	90 61       	ori	r25, 0x10	; 16
     79c:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	08 95       	ret

000007a8 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     7a8:	1f 92       	push	r1
     7aa:	0f 92       	push	r0
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	0f 92       	push	r0
     7b0:	11 24       	eor	r1, r1
     7b2:	0b b6       	in	r0, 0x3b	; 59
     7b4:	0f 92       	push	r0
     7b6:	2f 93       	push	r18
     7b8:	3f 93       	push	r19
     7ba:	4f 93       	push	r20
     7bc:	5f 93       	push	r21
     7be:	6f 93       	push	r22
     7c0:	7f 93       	push	r23
     7c2:	8f 93       	push	r24
     7c4:	9f 93       	push	r25
     7c6:	af 93       	push	r26
     7c8:	bf 93       	push	r27
     7ca:	ef 93       	push	r30
     7cc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     7ce:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     7d2:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     7d6:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <adca_callback>
     7da:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <adca_callback+0x1>
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	19 95       	eicall
}
     7e6:	ff 91       	pop	r31
     7e8:	ef 91       	pop	r30
     7ea:	bf 91       	pop	r27
     7ec:	af 91       	pop	r26
     7ee:	9f 91       	pop	r25
     7f0:	8f 91       	pop	r24
     7f2:	7f 91       	pop	r23
     7f4:	6f 91       	pop	r22
     7f6:	5f 91       	pop	r21
     7f8:	4f 91       	pop	r20
     7fa:	3f 91       	pop	r19
     7fc:	2f 91       	pop	r18
     7fe:	0f 90       	pop	r0
     800:	0b be       	out	0x3b, r0	; 59
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti

0000080c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     80c:	1f 92       	push	r1
     80e:	0f 92       	push	r0
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	0b b6       	in	r0, 0x3b	; 59
     818:	0f 92       	push	r0
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     832:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     836:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     83a:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <adca_callback>
     83e:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <adca_callback+0x1>
     842:	62 e0       	ldi	r22, 0x02	; 2
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	19 95       	eicall
}
     84a:	ff 91       	pop	r31
     84c:	ef 91       	pop	r30
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	0f 90       	pop	r0
     864:	0b be       	out	0x3b, r0	; 59
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti

00000870 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     870:	1f 92       	push	r1
     872:	0f 92       	push	r0
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	0f 92       	push	r0
     878:	11 24       	eor	r1, r1
     87a:	0b b6       	in	r0, 0x3b	; 59
     87c:	0f 92       	push	r0
     87e:	2f 93       	push	r18
     880:	3f 93       	push	r19
     882:	4f 93       	push	r20
     884:	5f 93       	push	r21
     886:	6f 93       	push	r22
     888:	7f 93       	push	r23
     88a:	8f 93       	push	r24
     88c:	9f 93       	push	r25
     88e:	af 93       	push	r26
     890:	bf 93       	push	r27
     892:	ef 93       	push	r30
     894:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     896:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     89a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     89e:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <adca_callback>
     8a2:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <adca_callback+0x1>
     8a6:	64 e0       	ldi	r22, 0x04	; 4
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	19 95       	eicall
}
     8ae:	ff 91       	pop	r31
     8b0:	ef 91       	pop	r30
     8b2:	bf 91       	pop	r27
     8b4:	af 91       	pop	r26
     8b6:	9f 91       	pop	r25
     8b8:	8f 91       	pop	r24
     8ba:	7f 91       	pop	r23
     8bc:	6f 91       	pop	r22
     8be:	5f 91       	pop	r21
     8c0:	4f 91       	pop	r20
     8c2:	3f 91       	pop	r19
     8c4:	2f 91       	pop	r18
     8c6:	0f 90       	pop	r0
     8c8:	0b be       	out	0x3b, r0	; 59
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     8d4:	1f 92       	push	r1
     8d6:	0f 92       	push	r0
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	0f 92       	push	r0
     8dc:	11 24       	eor	r1, r1
     8de:	0b b6       	in	r0, 0x3b	; 59
     8e0:	0f 92       	push	r0
     8e2:	2f 93       	push	r18
     8e4:	3f 93       	push	r19
     8e6:	4f 93       	push	r20
     8e8:	5f 93       	push	r21
     8ea:	6f 93       	push	r22
     8ec:	7f 93       	push	r23
     8ee:	8f 93       	push	r24
     8f0:	9f 93       	push	r25
     8f2:	af 93       	push	r26
     8f4:	bf 93       	push	r27
     8f6:	ef 93       	push	r30
     8f8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     8fa:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     8fe:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     902:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <adca_callback>
     906:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <adca_callback+0x1>
     90a:	68 e0       	ldi	r22, 0x08	; 8
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	19 95       	eicall
}
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	bf 91       	pop	r27
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	7f 91       	pop	r23
     920:	6f 91       	pop	r22
     922:	5f 91       	pop	r21
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	0f 90       	pop	r0
     92c:	0b be       	out	0x3b, r0	; 59
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     938:	1f 92       	push	r1
     93a:	0f 92       	push	r0
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
     942:	0b b6       	in	r0, 0x3b	; 59
     944:	0f 92       	push	r0
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	4f 93       	push	r20
     94c:	5f 93       	push	r21
     94e:	6f 93       	push	r22
     950:	7f 93       	push	r23
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     95e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     962:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     966:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <adcb_callback>
     96a:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <adcb_callback+0x1>
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	80 e4       	ldi	r24, 0x40	; 64
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	19 95       	eicall
}
     976:	ff 91       	pop	r31
     978:	ef 91       	pop	r30
     97a:	bf 91       	pop	r27
     97c:	af 91       	pop	r26
     97e:	9f 91       	pop	r25
     980:	8f 91       	pop	r24
     982:	7f 91       	pop	r23
     984:	6f 91       	pop	r22
     986:	5f 91       	pop	r21
     988:	4f 91       	pop	r20
     98a:	3f 91       	pop	r19
     98c:	2f 91       	pop	r18
     98e:	0f 90       	pop	r0
     990:	0b be       	out	0x3b, r0	; 59
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     99c:	1f 92       	push	r1
     99e:	0f 92       	push	r0
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	0f 92       	push	r0
     9a4:	11 24       	eor	r1, r1
     9a6:	0b b6       	in	r0, 0x3b	; 59
     9a8:	0f 92       	push	r0
     9aa:	2f 93       	push	r18
     9ac:	3f 93       	push	r19
     9ae:	4f 93       	push	r20
     9b0:	5f 93       	push	r21
     9b2:	6f 93       	push	r22
     9b4:	7f 93       	push	r23
     9b6:	8f 93       	push	r24
     9b8:	9f 93       	push	r25
     9ba:	af 93       	push	r26
     9bc:	bf 93       	push	r27
     9be:	ef 93       	push	r30
     9c0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     9c2:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     9c6:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     9ca:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <adcb_callback>
     9ce:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <adcb_callback+0x1>
     9d2:	62 e0       	ldi	r22, 0x02	; 2
     9d4:	80 e4       	ldi	r24, 0x40	; 64
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	19 95       	eicall
}
     9da:	ff 91       	pop	r31
     9dc:	ef 91       	pop	r30
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	7f 91       	pop	r23
     9e8:	6f 91       	pop	r22
     9ea:	5f 91       	pop	r21
     9ec:	4f 91       	pop	r20
     9ee:	3f 91       	pop	r19
     9f0:	2f 91       	pop	r18
     9f2:	0f 90       	pop	r0
     9f4:	0b be       	out	0x3b, r0	; 59
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	0b b6       	in	r0, 0x3b	; 59
     a0c:	0f 92       	push	r0
     a0e:	2f 93       	push	r18
     a10:	3f 93       	push	r19
     a12:	4f 93       	push	r20
     a14:	5f 93       	push	r21
     a16:	6f 93       	push	r22
     a18:	7f 93       	push	r23
     a1a:	8f 93       	push	r24
     a1c:	9f 93       	push	r25
     a1e:	af 93       	push	r26
     a20:	bf 93       	push	r27
     a22:	ef 93       	push	r30
     a24:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     a26:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     a2a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     a2e:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <adcb_callback>
     a32:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <adcb_callback+0x1>
     a36:	64 e0       	ldi	r22, 0x04	; 4
     a38:	80 e4       	ldi	r24, 0x40	; 64
     a3a:	92 e0       	ldi	r25, 0x02	; 2
     a3c:	19 95       	eicall
}
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	0f 90       	pop	r0
     a58:	0b be       	out	0x3b, r0	; 59
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	0b b6       	in	r0, 0x3b	; 59
     a70:	0f 92       	push	r0
     a72:	2f 93       	push	r18
     a74:	3f 93       	push	r19
     a76:	4f 93       	push	r20
     a78:	5f 93       	push	r21
     a7a:	6f 93       	push	r22
     a7c:	7f 93       	push	r23
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
     a82:	af 93       	push	r26
     a84:	bf 93       	push	r27
     a86:	ef 93       	push	r30
     a88:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     a8a:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     a8e:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     a92:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <adcb_callback>
     a96:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <adcb_callback+0x1>
     a9a:	68 e0       	ldi	r22, 0x08	; 8
     a9c:	80 e4       	ldi	r24, 0x40	; 64
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	19 95       	eicall
}
     aa2:	ff 91       	pop	r31
     aa4:	ef 91       	pop	r30
     aa6:	bf 91       	pop	r27
     aa8:	af 91       	pop	r26
     aaa:	9f 91       	pop	r25
     aac:	8f 91       	pop	r24
     aae:	7f 91       	pop	r23
     ab0:	6f 91       	pop	r22
     ab2:	5f 91       	pop	r21
     ab4:	4f 91       	pop	r20
     ab6:	3f 91       	pop	r19
     ab8:	2f 91       	pop	r18
     aba:	0f 90       	pop	r0
     abc:	0b be       	out	0x3b, r0	; 59
     abe:	0f 90       	pop	r0
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	0f 90       	pop	r0
     ac4:	1f 90       	pop	r1
     ac6:	18 95       	reti

00000ac8 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     ac8:	bf 92       	push	r11
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	1f 92       	push	r1
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	8c 01       	movw	r16, r24
     ae2:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     ae4:	81 15       	cp	r24, r1
     ae6:	22 e0       	ldi	r18, 0x02	; 2
     ae8:	92 07       	cpc	r25, r18
     aea:	71 f4       	brne	.+28     	; 0xb08 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     aec:	61 e2       	ldi	r22, 0x21	; 33
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	6c d1       	rcall	.+728    	; 0xdcc <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     af4:	c8 2e       	mov	r12, r24
     af6:	d1 2c       	mov	r13, r1
     af8:	60 e2       	ldi	r22, 0x20	; 32
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	66 d1       	rcall	.+716    	; 0xdcc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     b00:	dc 2c       	mov	r13, r12
     b02:	cc 24       	eor	r12, r12
     b04:	c8 2a       	or	r12, r24
     b06:	10 c0       	rjmp	.+32     	; 0xb28 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     b08:	80 34       	cpi	r24, 0x40	; 64
     b0a:	92 40       	sbci	r25, 0x02	; 2
     b0c:	c1 f5       	brne	.+112    	; 0xb7e <adc_write_configuration+0xb6>
     b0e:	65 e2       	ldi	r22, 0x25	; 37
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	5b d1       	rcall	.+694    	; 0xdcc <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     b16:	c8 2e       	mov	r12, r24
     b18:	d1 2c       	mov	r13, r1
     b1a:	64 e2       	ldi	r22, 0x24	; 36
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	55 d1       	rcall	.+682    	; 0xdcc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     b22:	dc 2c       	mov	r13, r12
     b24:	cc 24       	eor	r12, r12
     b26:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b28:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     b2a:	89 83       	std	Y+1, r24	; 0x01
	return flags;
     b2c:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     b2e:	b9 80       	ldd	r11, Y+1	; 0x01
     b30:	c8 01       	movw	r24, r16
     b32:	a4 db       	rcall	.-2232   	; 0x27c <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     b34:	f8 01       	movw	r30, r16
     b36:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     b38:	92 e0       	ldi	r25, 0x02	; 2
     b3a:	90 83       	st	Z, r25
	adc->CAL = cal;
     b3c:	c4 86       	std	Z+12, r12	; 0x0c
     b3e:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     b40:	f7 01       	movw	r30, r14
     b42:	25 81       	ldd	r18, Z+5	; 0x05
     b44:	36 81       	ldd	r19, Z+6	; 0x06
     b46:	f8 01       	movw	r30, r16
     b48:	20 8f       	std	Z+24, r18	; 0x18
     b4a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     b4c:	f7 01       	movw	r30, r14
     b4e:	92 81       	ldd	r25, Z+2	; 0x02
     b50:	f8 01       	movw	r30, r16
     b52:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     b54:	f7 01       	movw	r30, r14
     b56:	94 81       	ldd	r25, Z+4	; 0x04
     b58:	f8 01       	movw	r30, r16
     b5a:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     b5c:	f7 01       	movw	r30, r14
     b5e:	93 81       	ldd	r25, Z+3	; 0x03
     b60:	f8 01       	movw	r30, r16
     b62:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     b64:	f7 01       	movw	r30, r14
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	f8 01       	movw	r30, r16
     b6a:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     b6c:	81 70       	andi	r24, 0x01	; 1
     b6e:	f7 01       	movw	r30, r14
     b70:	90 81       	ld	r25, Z
     b72:	89 2b       	or	r24, r25
     b74:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     b76:	80 83       	st	Z, r24
     b78:	c8 01       	movw	r24, r16
     b7a:	9f db       	rcall	.-2242   	; 0x2ba <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b7c:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	bf 90       	pop	r11
     b92:	08 95       	ret

00000b94 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	1f 92       	push	r1
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	8c 01       	movw	r16, r24
     baa:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bac:	8f b7       	in	r24, 0x3f	; 63
     bae:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     bb0:	f8 94       	cli
	return flags;
     bb2:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     bb4:	c8 01       	movw	r24, r16
     bb6:	62 db       	rcall	.-2364   	; 0x27c <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     bb8:	f8 01       	movw	r30, r16
     bba:	80 81       	ld	r24, Z
     bbc:	80 7c       	andi	r24, 0xC0	; 192
     bbe:	f7 01       	movw	r30, r14
     bc0:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     bc2:	f8 01       	movw	r30, r16
     bc4:	80 8d       	ldd	r24, Z+24	; 0x18
     bc6:	91 8d       	ldd	r25, Z+25	; 0x19
     bc8:	f7 01       	movw	r30, r14
     bca:	85 83       	std	Z+5, r24	; 0x05
     bcc:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     bce:	f8 01       	movw	r30, r16
     bd0:	82 81       	ldd	r24, Z+2	; 0x02
     bd2:	f7 01       	movw	r30, r14
     bd4:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     bd6:	f8 01       	movw	r30, r16
     bd8:	84 81       	ldd	r24, Z+4	; 0x04
     bda:	f7 01       	movw	r30, r14
     bdc:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     bde:	f8 01       	movw	r30, r16
     be0:	83 81       	ldd	r24, Z+3	; 0x03
     be2:	f7 01       	movw	r30, r14
     be4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     be6:	f8 01       	movw	r30, r16
     be8:	81 81       	ldd	r24, Z+1	; 0x01
     bea:	f7 01       	movw	r30, r14
     bec:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
     bee:	c8 01       	movw	r24, r16
     bf0:	64 db       	rcall	.-2360   	; 0x2ba <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bf2:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     bf4:	0f 90       	pop	r0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	08 95       	ret

00000c06 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     c06:	af 92       	push	r10
     c08:	bf 92       	push	r11
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	1f 92       	push	r1
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	6c 01       	movw	r12, r24
     c22:	b6 2e       	mov	r11, r22
     c24:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c26:	86 2f       	mov	r24, r22
     c28:	83 70       	andi	r24, 0x03	; 3
     c2a:	29 f4       	brne	.+10     	; 0xc36 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     c2c:	96 2f       	mov	r25, r22
     c2e:	96 95       	lsr	r25
     c30:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c36:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     c38:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     c3a:	90 ff       	sbrs	r25, 0
		index++;
     c3c:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     c3e:	86 01       	movw	r16, r12
     c40:	00 5e       	subi	r16, 0xE0	; 224
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	98 e0       	ldi	r25, 0x08	; 8
     c46:	89 9f       	mul	r24, r25
     c48:	00 0d       	add	r16, r0
     c4a:	11 1d       	adc	r17, r1
     c4c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c4e:	8f b7       	in	r24, 0x3f	; 63
     c50:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c52:	f8 94       	cli
	return flags;
     c54:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     c56:	c6 01       	movw	r24, r12
     c58:	11 db       	rcall	.-2526   	; 0x27c <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     c5a:	f7 01       	movw	r30, r14
     c5c:	80 81       	ld	r24, Z
     c5e:	f8 01       	movw	r30, r16
     c60:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     c62:	f7 01       	movw	r30, r14
     c64:	82 81       	ldd	r24, Z+2	; 0x02
     c66:	f8 01       	movw	r30, r16
     c68:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     c6a:	f7 01       	movw	r30, r14
     c6c:	81 81       	ldd	r24, Z+1	; 0x01
     c6e:	f8 01       	movw	r30, r16
     c70:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     c72:	b0 fe       	sbrs	r11, 0
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     c76:	f7 01       	movw	r30, r14
     c78:	83 81       	ldd	r24, Z+3	; 0x03
     c7a:	f8 01       	movw	r30, r16
     c7c:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
     c7e:	c6 01       	movw	r24, r12
     c80:	1c db       	rcall	.-2504   	; 0x2ba <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c82:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
     c84:	0f 90       	pop	r0
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	cf 90       	pop	r12
     c96:	bf 90       	pop	r11
     c98:	af 90       	pop	r10
     c9a:	08 95       	ret

00000c9c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     c9c:	af 92       	push	r10
     c9e:	bf 92       	push	r11
     ca0:	cf 92       	push	r12
     ca2:	df 92       	push	r13
     ca4:	ef 92       	push	r14
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	1f 92       	push	r1
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	6c 01       	movw	r12, r24
     cb8:	b6 2e       	mov	r11, r22
     cba:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     cbc:	86 2f       	mov	r24, r22
     cbe:	83 70       	andi	r24, 0x03	; 3
     cc0:	29 f4       	brne	.+10     	; 0xccc <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     cc2:	96 2f       	mov	r25, r22
     cc4:	96 95       	lsr	r25
     cc6:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     ccc:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     cce:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     cd0:	90 ff       	sbrs	r25, 0
		index++;
     cd2:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     cd4:	86 01       	movw	r16, r12
     cd6:	00 5e       	subi	r16, 0xE0	; 224
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	98 e0       	ldi	r25, 0x08	; 8
     cdc:	89 9f       	mul	r24, r25
     cde:	00 0d       	add	r16, r0
     ce0:	11 1d       	adc	r17, r1
     ce2:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ce4:	8f b7       	in	r24, 0x3f	; 63
     ce6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ce8:	f8 94       	cli
	return flags;
     cea:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     cec:	c6 01       	movw	r24, r12
     cee:	c6 da       	rcall	.-2676   	; 0x27c <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     cf0:	f8 01       	movw	r30, r16
     cf2:	80 81       	ld	r24, Z
     cf4:	f7 01       	movw	r30, r14
     cf6:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     cf8:	f8 01       	movw	r30, r16
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	f7 01       	movw	r30, r14
     cfe:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     d00:	f8 01       	movw	r30, r16
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	f7 01       	movw	r30, r14
     d06:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     d08:	b0 fe       	sbrs	r11, 0
     d0a:	04 c0       	rjmp	.+8      	; 0xd14 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     d0c:	f8 01       	movw	r30, r16
     d0e:	86 81       	ldd	r24, Z+6	; 0x06
     d10:	f7 01       	movw	r30, r14
     d12:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
     d14:	c6 01       	movw	r24, r12
     d16:	d1 da       	rcall	.-2654   	; 0x2ba <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d18:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
     d1a:	0f 90       	pop	r0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	bf 90       	pop	r11
     d2e:	af 90       	pop	r10
     d30:	08 95       	ret

00000d32 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     d32:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     d34:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <stdio_base>
     d38:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <stdio_base+0x1>
     d3c:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <ptr_put>
     d40:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <ptr_put+0x1>
     d44:	19 95       	eicall
     d46:	99 23       	and	r25, r25
     d48:	1c f0       	brlt	.+6      	; 0xd50 <_write+0x1e>
		return -1;
	}
	return 1;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     d54:	08 95       	ret

00000d56 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     d5c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     d60:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     d64:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     d68:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     d6c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     d70:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     d74:	08 95       	ret

00000d76 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	1f 92       	push	r1
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d80:	9f b7       	in	r25, 0x3f	; 63
     d82:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     d84:	f8 94       	cli
	return flags;
     d86:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     d88:	e8 2f       	mov	r30, r24
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	e0 59       	subi	r30, 0x90	; 144
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	60 95       	com	r22
     d92:	80 81       	ld	r24, Z
     d94:	68 23       	and	r22, r24
     d96:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d98:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     d9a:	0f 90       	pop	r0
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	1f 92       	push	r1
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     dac:	9f b7       	in	r25, 0x3f	; 63
     dae:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     db0:	f8 94       	cli
	return flags;
     db2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     db4:	e8 2f       	mov	r30, r24
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	e0 59       	subi	r30, 0x90	; 144
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	80 81       	ld	r24, Z
     dbe:	68 2b       	or	r22, r24
     dc0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     dc2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     dc4:	0f 90       	pop	r0
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     dcc:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     dd0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     dd2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     dd4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     dd8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     dda:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     dde:	08 95       	ret

00000de0 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     de6:	ba da       	rcall	.-2700   	; 0x35c <usart_getchar>
     de8:	88 83       	st	Y, r24
}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     df0:	ad ca       	rjmp	.-2726   	; 0x34c <usart_putchar>
}
     df2:	08 95       	ret

00000df4 <main>:
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE, 1);
	adc_write_configuration(&MY_ADC, &adc_conf);
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
}

int main (void) {
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	2b 97       	sbiw	r28, 0x0b	; 11
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	de bf       	out	0x3e, r29	; 62
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = false
	};
	
	sysclk_init();
     e02:	a9 df       	rcall	.-174    	; 0xd56 <sysclk_init>

static void adc_init(void) {
	
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(&MY_ADC, &adc_conf);
     e04:	be 01       	movw	r22, r28
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	92 e0       	ldi	r25, 0x02	; 2
     e0e:	c2 de       	rcall	.-636    	; 0xb94 <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
     e10:	ae 01       	movw	r20, r28
     e12:	48 5f       	subi	r20, 0xF8	; 248
     e14:	5f 4f       	sbci	r21, 0xFF	; 255
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	3f df       	rcall	.-386    	; 0xc9c <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     e20:	9b 81       	ldd	r25, Y+3	; 0x03
     e22:	9f 78       	andi	r25, 0x8F	; 143
     e24:	9b 83       	std	Y+3, r25	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     e26:	81 7e       	andi	r24, 0xE1	; 225
     e28:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
     e2a:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	8d 83       	std	Y+5, r24	; 0x05
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     e34:	18 e0       	ldi	r17, 0x08	; 8
     e36:	19 87       	std	Y+9, r17	; 0x09
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_BANDGAP);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE, 1);
	adc_write_configuration(&MY_ADC, &adc_conf);
     e38:	be 01       	movw	r22, r28
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	92 e0       	ldi	r25, 0x02	; 2
     e42:	42 de       	rcall	.-892    	; 0xac8 <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
     e44:	ae 01       	movw	r20, r28
     e46:	48 5f       	subi	r20, 0xF8	; 248
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	da de       	rcall	.-588    	; 0xc06 <adcch_write_configuration>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     e52:	80 ea       	ldi	r24, 0xA0	; 160
     e54:	9a e0       	ldi	r25, 0x0A	; 10
     e56:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <stdio_base>
     e5a:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     e5e:	88 ef       	ldi	r24, 0xF8	; 248
     e60:	96 e0       	ldi	r25, 0x06	; 6
     e62:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <ptr_put>
     e66:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     e6a:	80 ef       	ldi	r24, 0xF0	; 240
     e6c:	96 e0       	ldi	r25, 0x06	; 6
     e6e:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <ptr_get>
     e72:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     e76:	e6 e0       	ldi	r30, 0x06	; 6
     e78:	f0 e2       	ldi	r31, 0x20	; 32
     e7a:	84 81       	ldd	r24, Z+4	; 0x04
     e7c:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     e7e:	85 81       	ldd	r24, Z+5	; 0x05
     e80:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     e82:	86 81       	ldd	r24, Z+6	; 0x06
     e84:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	a2 81       	ldd	r26, Z+2	; 0x02
     e8c:	b3 81       	ldd	r27, Z+3	; 0x03
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	ab 83       	std	Y+3, r26	; 0x03
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     e94:	bc 83       	std	Y+4, r27	; 0x04
     e96:	60 e1       	ldi	r22, 0x10	; 16
     e98:	85 e0       	ldi	r24, 0x05	; 5
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     e9a:	6d df       	rcall	.-294    	; 0xd76 <sysclk_enable_module>
     e9c:	be 01       	movw	r22, r28
     e9e:	6f 5f       	subi	r22, 0xFF	; 255
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	80 ea       	ldi	r24, 0xA0	; 160
     ea4:	9a e0       	ldi	r25, 0x0A	; 10
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     ea6:	6f db       	rcall	.-2338   	; 0x586 <usart_init_rs232>
     ea8:	65 e2       	ldi	r22, 0x25	; 37
     eaa:	71 e0       	ldi	r23, 0x01	; 1
     eac:	89 e9       	ldi	r24, 0x99	; 153
     eae:	96 e0       	ldi	r25, 0x06	; 6
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     eb0:	70 d0       	rcall	.+224    	; 0xf92 <fdevopen>
     eb2:	10 93 81 06 	sts	0x0681, r17	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	adc_init();
	
	stdio_serial_init(&USARTE0, &USART_SERIAL_OPTIONS);
	ioport_set_pin_dir(UART_TXPIN, IOPORT_DIR_OUTPUT);
	
	adc_enable(&MY_ADC);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	1c da       	rcall	.-3016   	; 0x2f4 <adc_enable>
	while(1) {
		
		uint16_t result = 0;
		char buffer;
		
		scanf("%c", &buffer);
     ebc:	6e 01       	movw	r12, r28
     ebe:	88 e0       	ldi	r24, 0x08	; 8
     ec0:	c8 0e       	add	r12, r24
     ec2:	d1 1c       	adc	r13, r1
     ec4:	0f 2e       	mov	r0, r31
     ec6:	fd e0       	ldi	r31, 0x0D	; 13
     ec8:	ef 2e       	mov	r14, r31
     eca:	f0 e2       	ldi	r31, 0x20	; 32
     ecc:	ff 2e       	mov	r15, r31
     ece:	f0 2d       	mov	r31, r0
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	12 e0       	ldi	r17, 0x02	; 2
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     ed4:	99 24       	eor	r9, r9
     ed6:	93 94       	inc	r9
				adc_start_conversion(&MY_ADC, MY_ADC_CH);
				adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
				result += adc_get_result(&MY_ADC, MY_ADC_CH);
			}
			result /= 16;
			printf("%d\n", result);
     ed8:	0f 2e       	mov	r0, r31
     eda:	f0 e1       	ldi	r31, 0x10	; 16
     edc:	af 2e       	mov	r10, r31
     ede:	f0 e2       	ldi	r31, 0x20	; 32
     ee0:	bf 2e       	mov	r11, r31
	while(1) {
		
		uint16_t result = 0;
		char buffer;
		
		scanf("%c", &buffer);
     ee2:	f0 2d       	mov	r31, r0
     ee4:	df 92       	push	r13
     ee6:	cf 92       	push	r12
     ee8:	ff 92       	push	r15
     eea:	ef 92       	push	r14
     eec:	af d0       	rcall	.+350    	; 0x104c <scanf>
		if(buffer){
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	88 85       	ldd	r24, Y+8	; 0x08
     ef8:	88 23       	and	r24, r24
     efa:	a1 f3       	breq	.-24     	; 0xee4 <main+0xf0>
     efc:	20 e1       	ldi	r18, 0x10	; 16
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f04:	8f b7       	in	r24, 0x3f	; 63
     f06:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f08:	f8 94       	cli
	return flags;
     f0a:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     f0c:	f8 01       	movw	r30, r16
     f0e:	80 81       	ld	r24, Z
     f10:	84 60       	ori	r24, 0x04	; 4
     f12:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f14:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     f16:	f8 01       	movw	r30, r16
     f18:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     f1a:	80 ff       	sbrs	r24, 0
     f1c:	fc cf       	rjmp	.-8      	; 0xf16 <main+0x122>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     f1e:	96 82       	std	Z+6, r9	; 0x06
			for(int sampleCounter = 0; sampleCounter < 16; sampleCounter++){
				adc_start_conversion(&MY_ADC, MY_ADC_CH);
				adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
				result += adc_get_result(&MY_ADC, MY_ADC_CH);
     f20:	84 a1       	ldd	r24, Z+36	; 0x24
     f22:	95 a1       	ldd	r25, Z+37	; 0x25
     f24:	48 0f       	add	r20, r24
     f26:	59 1f       	adc	r21, r25
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	31 09       	sbc	r19, r1
		uint16_t result = 0;
		char buffer;
		
		scanf("%c", &buffer);
		if(buffer){
			for(int sampleCounter = 0; sampleCounter < 16; sampleCounter++){
     f2c:	59 f7       	brne	.-42     	; 0xf04 <main+0x110>
				adc_start_conversion(&MY_ADC, MY_ADC_CH);
				adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
				result += adc_get_result(&MY_ADC, MY_ADC_CH);
			}
			result /= 16;
			printf("%d\n", result);
     f2e:	52 95       	swap	r21
     f30:	42 95       	swap	r20
     f32:	4f 70       	andi	r20, 0x0F	; 15
     f34:	45 27       	eor	r20, r21
     f36:	5f 70       	andi	r21, 0x0F	; 15
     f38:	45 27       	eor	r20, r21
     f3a:	5f 93       	push	r21
     f3c:	4f 93       	push	r20
     f3e:	bf 92       	push	r11
     f40:	af 92       	push	r10
     f42:	71 d0       	rcall	.+226    	; 0x1026 <printf>
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
		}
		
	}
     f4c:	cb cf       	rjmp	.-106    	; 0xee4 <main+0xf0>

00000f4e <__udivmodsi4>:
     f4e:	a1 e2       	ldi	r26, 0x21	; 33
     f50:	1a 2e       	mov	r1, r26
     f52:	aa 1b       	sub	r26, r26
     f54:	bb 1b       	sub	r27, r27
     f56:	fd 01       	movw	r30, r26
     f58:	0d c0       	rjmp	.+26     	; 0xf74 <__udivmodsi4_ep>

00000f5a <__udivmodsi4_loop>:
     f5a:	aa 1f       	adc	r26, r26
     f5c:	bb 1f       	adc	r27, r27
     f5e:	ee 1f       	adc	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	a2 17       	cp	r26, r18
     f64:	b3 07       	cpc	r27, r19
     f66:	e4 07       	cpc	r30, r20
     f68:	f5 07       	cpc	r31, r21
     f6a:	20 f0       	brcs	.+8      	; 0xf74 <__udivmodsi4_ep>
     f6c:	a2 1b       	sub	r26, r18
     f6e:	b3 0b       	sbc	r27, r19
     f70:	e4 0b       	sbc	r30, r20
     f72:	f5 0b       	sbc	r31, r21

00000f74 <__udivmodsi4_ep>:
     f74:	66 1f       	adc	r22, r22
     f76:	77 1f       	adc	r23, r23
     f78:	88 1f       	adc	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	1a 94       	dec	r1
     f7e:	69 f7       	brne	.-38     	; 0xf5a <__udivmodsi4_loop>
     f80:	60 95       	com	r22
     f82:	70 95       	com	r23
     f84:	80 95       	com	r24
     f86:	90 95       	com	r25
     f88:	9b 01       	movw	r18, r22
     f8a:	ac 01       	movw	r20, r24
     f8c:	bd 01       	movw	r22, r26
     f8e:	cf 01       	movw	r24, r30
     f90:	08 95       	ret

00000f92 <fdevopen>:
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	31 f4       	brne	.+12     	; 0xfaa <fdevopen+0x18>
     f9e:	61 15       	cp	r22, r1
     fa0:	71 05       	cpc	r23, r1
     fa2:	19 f4       	brne	.+6      	; 0xfaa <fdevopen+0x18>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	39 c0       	rjmp	.+114    	; 0x101c <fdevopen+0x8a>
     faa:	8b 01       	movw	r16, r22
     fac:	ec 01       	movw	r28, r24
     fae:	6e e0       	ldi	r22, 0x0E	; 14
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	17 d5       	rcall	.+2606   	; 0x19e6 <calloc>
     fb8:	fc 01       	movw	r30, r24
     fba:	89 2b       	or	r24, r25
     fbc:	99 f3       	breq	.-26     	; 0xfa4 <fdevopen+0x12>
     fbe:	80 e8       	ldi	r24, 0x80	; 128
     fc0:	83 83       	std	Z+3, r24	; 0x03
     fc2:	01 15       	cp	r16, r1
     fc4:	11 05       	cpc	r17, r1
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <fdevopen+0x52>
     fc8:	02 87       	std	Z+10, r16	; 0x0a
     fca:	13 87       	std	Z+11, r17	; 0x0b
     fcc:	81 e8       	ldi	r24, 0x81	; 129
     fce:	83 83       	std	Z+3, r24	; 0x03
     fd0:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <__iob>
     fd4:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <__iob+0x1>
     fd8:	89 2b       	or	r24, r25
     fda:	21 f4       	brne	.+8      	; 0xfe4 <fdevopen+0x52>
     fdc:	e0 93 26 20 	sts	0x2026, r30	; 0x802026 <__iob>
     fe0:	f0 93 27 20 	sts	0x2027, r31	; 0x802027 <__iob+0x1>
     fe4:	20 97       	sbiw	r28, 0x00	; 0
     fe6:	c9 f0       	breq	.+50     	; 0x101a <fdevopen+0x88>
     fe8:	c0 87       	std	Z+8, r28	; 0x08
     fea:	d1 87       	std	Z+9, r29	; 0x09
     fec:	83 81       	ldd	r24, Z+3	; 0x03
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	83 83       	std	Z+3, r24	; 0x03
     ff2:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <__iob+0x2>
     ff6:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <__iob+0x3>
     ffa:	89 2b       	or	r24, r25
     ffc:	71 f4       	brne	.+28     	; 0x101a <fdevopen+0x88>
     ffe:	e0 93 28 20 	sts	0x2028, r30	; 0x802028 <__iob+0x2>
    1002:	f0 93 29 20 	sts	0x2029, r31	; 0x802029 <__iob+0x3>
    1006:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <__iob+0x4>
    100a:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <__iob+0x5>
    100e:	89 2b       	or	r24, r25
    1010:	21 f4       	brne	.+8      	; 0x101a <fdevopen+0x88>
    1012:	e0 93 2a 20 	sts	0x202A, r30	; 0x80202a <__iob+0x4>
    1016:	f0 93 2b 20 	sts	0x202B, r31	; 0x80202b <__iob+0x5>
    101a:	cf 01       	movw	r24, r30
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <printf>:
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	ae 01       	movw	r20, r28
    1030:	4a 5f       	subi	r20, 0xFA	; 250
    1032:	5f 4f       	sbci	r21, 0xFF	; 255
    1034:	fa 01       	movw	r30, r20
    1036:	61 91       	ld	r22, Z+
    1038:	71 91       	ld	r23, Z+
    103a:	af 01       	movw	r20, r30
    103c:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <__iob+0x2>
    1040:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <__iob+0x3>
    1044:	16 d0       	rcall	.+44     	; 0x1072 <vfprintf>
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <scanf>:
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	ae 01       	movw	r20, r28
    1056:	4a 5f       	subi	r20, 0xFA	; 250
    1058:	5f 4f       	sbci	r21, 0xFF	; 255
    105a:	fa 01       	movw	r30, r20
    105c:	61 91       	ld	r22, Z+
    105e:	71 91       	ld	r23, Z+
    1060:	af 01       	movw	r20, r30
    1062:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <__iob>
    1066:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <__iob+0x1>
    106a:	a6 d3       	rcall	.+1868   	; 0x17b8 <vfscanf>
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <vfprintf>:
    1072:	2f 92       	push	r2
    1074:	3f 92       	push	r3
    1076:	4f 92       	push	r4
    1078:	5f 92       	push	r5
    107a:	6f 92       	push	r6
    107c:	7f 92       	push	r7
    107e:	8f 92       	push	r8
    1080:	9f 92       	push	r9
    1082:	af 92       	push	r10
    1084:	bf 92       	push	r11
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	2b 97       	sbiw	r28, 0x0b	; 11
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	6c 01       	movw	r12, r24
    10a2:	7b 01       	movw	r14, r22
    10a4:	8a 01       	movw	r16, r20
    10a6:	fc 01       	movw	r30, r24
    10a8:	16 82       	std	Z+6, r1	; 0x06
    10aa:	17 82       	std	Z+7, r1	; 0x07
    10ac:	83 81       	ldd	r24, Z+3	; 0x03
    10ae:	81 ff       	sbrs	r24, 1
    10b0:	bf c1       	rjmp	.+894    	; 0x1430 <vfprintf+0x3be>
    10b2:	ce 01       	movw	r24, r28
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	3c 01       	movw	r6, r24
    10b8:	f6 01       	movw	r30, r12
    10ba:	93 81       	ldd	r25, Z+3	; 0x03
    10bc:	f7 01       	movw	r30, r14
    10be:	93 fd       	sbrc	r25, 3
    10c0:	85 91       	lpm	r24, Z+
    10c2:	93 ff       	sbrs	r25, 3
    10c4:	81 91       	ld	r24, Z+
    10c6:	7f 01       	movw	r14, r30
    10c8:	88 23       	and	r24, r24
    10ca:	09 f4       	brne	.+2      	; 0x10ce <vfprintf+0x5c>
    10cc:	ad c1       	rjmp	.+858    	; 0x1428 <vfprintf+0x3b6>
    10ce:	85 32       	cpi	r24, 0x25	; 37
    10d0:	39 f4       	brne	.+14     	; 0x10e0 <vfprintf+0x6e>
    10d2:	93 fd       	sbrc	r25, 3
    10d4:	85 91       	lpm	r24, Z+
    10d6:	93 ff       	sbrs	r25, 3
    10d8:	81 91       	ld	r24, Z+
    10da:	7f 01       	movw	r14, r30
    10dc:	85 32       	cpi	r24, 0x25	; 37
    10de:	21 f4       	brne	.+8      	; 0x10e8 <vfprintf+0x76>
    10e0:	b6 01       	movw	r22, r12
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	29 d6       	rcall	.+3154   	; 0x1d38 <fputc>
    10e6:	e8 cf       	rjmp	.-48     	; 0x10b8 <vfprintf+0x46>
    10e8:	91 2c       	mov	r9, r1
    10ea:	21 2c       	mov	r2, r1
    10ec:	31 2c       	mov	r3, r1
    10ee:	ff e1       	ldi	r31, 0x1F	; 31
    10f0:	f3 15       	cp	r31, r3
    10f2:	d8 f0       	brcs	.+54     	; 0x112a <vfprintf+0xb8>
    10f4:	8b 32       	cpi	r24, 0x2B	; 43
    10f6:	79 f0       	breq	.+30     	; 0x1116 <vfprintf+0xa4>
    10f8:	38 f4       	brcc	.+14     	; 0x1108 <vfprintf+0x96>
    10fa:	80 32       	cpi	r24, 0x20	; 32
    10fc:	79 f0       	breq	.+30     	; 0x111c <vfprintf+0xaa>
    10fe:	83 32       	cpi	r24, 0x23	; 35
    1100:	a1 f4       	brne	.+40     	; 0x112a <vfprintf+0xb8>
    1102:	23 2d       	mov	r18, r3
    1104:	20 61       	ori	r18, 0x10	; 16
    1106:	1d c0       	rjmp	.+58     	; 0x1142 <vfprintf+0xd0>
    1108:	8d 32       	cpi	r24, 0x2D	; 45
    110a:	61 f0       	breq	.+24     	; 0x1124 <vfprintf+0xb2>
    110c:	80 33       	cpi	r24, 0x30	; 48
    110e:	69 f4       	brne	.+26     	; 0x112a <vfprintf+0xb8>
    1110:	23 2d       	mov	r18, r3
    1112:	21 60       	ori	r18, 0x01	; 1
    1114:	16 c0       	rjmp	.+44     	; 0x1142 <vfprintf+0xd0>
    1116:	83 2d       	mov	r24, r3
    1118:	82 60       	ori	r24, 0x02	; 2
    111a:	38 2e       	mov	r3, r24
    111c:	e3 2d       	mov	r30, r3
    111e:	e4 60       	ori	r30, 0x04	; 4
    1120:	3e 2e       	mov	r3, r30
    1122:	2a c0       	rjmp	.+84     	; 0x1178 <vfprintf+0x106>
    1124:	f3 2d       	mov	r31, r3
    1126:	f8 60       	ori	r31, 0x08	; 8
    1128:	1d c0       	rjmp	.+58     	; 0x1164 <vfprintf+0xf2>
    112a:	37 fc       	sbrc	r3, 7
    112c:	2d c0       	rjmp	.+90     	; 0x1188 <vfprintf+0x116>
    112e:	20 ed       	ldi	r18, 0xD0	; 208
    1130:	28 0f       	add	r18, r24
    1132:	2a 30       	cpi	r18, 0x0A	; 10
    1134:	40 f0       	brcs	.+16     	; 0x1146 <vfprintf+0xd4>
    1136:	8e 32       	cpi	r24, 0x2E	; 46
    1138:	b9 f4       	brne	.+46     	; 0x1168 <vfprintf+0xf6>
    113a:	36 fc       	sbrc	r3, 6
    113c:	75 c1       	rjmp	.+746    	; 0x1428 <vfprintf+0x3b6>
    113e:	23 2d       	mov	r18, r3
    1140:	20 64       	ori	r18, 0x40	; 64
    1142:	32 2e       	mov	r3, r18
    1144:	19 c0       	rjmp	.+50     	; 0x1178 <vfprintf+0x106>
    1146:	36 fe       	sbrs	r3, 6
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <vfprintf+0xe4>
    114a:	8a e0       	ldi	r24, 0x0A	; 10
    114c:	98 9e       	mul	r9, r24
    114e:	20 0d       	add	r18, r0
    1150:	11 24       	eor	r1, r1
    1152:	92 2e       	mov	r9, r18
    1154:	11 c0       	rjmp	.+34     	; 0x1178 <vfprintf+0x106>
    1156:	ea e0       	ldi	r30, 0x0A	; 10
    1158:	2e 9e       	mul	r2, r30
    115a:	20 0d       	add	r18, r0
    115c:	11 24       	eor	r1, r1
    115e:	22 2e       	mov	r2, r18
    1160:	f3 2d       	mov	r31, r3
    1162:	f0 62       	ori	r31, 0x20	; 32
    1164:	3f 2e       	mov	r3, r31
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <vfprintf+0x106>
    1168:	8c 36       	cpi	r24, 0x6C	; 108
    116a:	21 f4       	brne	.+8      	; 0x1174 <vfprintf+0x102>
    116c:	83 2d       	mov	r24, r3
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	38 2e       	mov	r3, r24
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <vfprintf+0x106>
    1174:	88 36       	cpi	r24, 0x68	; 104
    1176:	41 f4       	brne	.+16     	; 0x1188 <vfprintf+0x116>
    1178:	f7 01       	movw	r30, r14
    117a:	93 fd       	sbrc	r25, 3
    117c:	85 91       	lpm	r24, Z+
    117e:	93 ff       	sbrs	r25, 3
    1180:	81 91       	ld	r24, Z+
    1182:	7f 01       	movw	r14, r30
    1184:	81 11       	cpse	r24, r1
    1186:	b3 cf       	rjmp	.-154    	; 0x10ee <vfprintf+0x7c>
    1188:	98 2f       	mov	r25, r24
    118a:	9f 7d       	andi	r25, 0xDF	; 223
    118c:	95 54       	subi	r25, 0x45	; 69
    118e:	93 30       	cpi	r25, 0x03	; 3
    1190:	28 f4       	brcc	.+10     	; 0x119c <vfprintf+0x12a>
    1192:	0c 5f       	subi	r16, 0xFC	; 252
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	9f e3       	ldi	r25, 0x3F	; 63
    1198:	99 83       	std	Y+1, r25	; 0x01
    119a:	0d c0       	rjmp	.+26     	; 0x11b6 <vfprintf+0x144>
    119c:	83 36       	cpi	r24, 0x63	; 99
    119e:	31 f0       	breq	.+12     	; 0x11ac <vfprintf+0x13a>
    11a0:	83 37       	cpi	r24, 0x73	; 115
    11a2:	71 f0       	breq	.+28     	; 0x11c0 <vfprintf+0x14e>
    11a4:	83 35       	cpi	r24, 0x53	; 83
    11a6:	09 f0       	breq	.+2      	; 0x11aa <vfprintf+0x138>
    11a8:	55 c0       	rjmp	.+170    	; 0x1254 <vfprintf+0x1e2>
    11aa:	20 c0       	rjmp	.+64     	; 0x11ec <vfprintf+0x17a>
    11ac:	f8 01       	movw	r30, r16
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	0e 5f       	subi	r16, 0xFE	; 254
    11b4:	1f 4f       	sbci	r17, 0xFF	; 255
    11b6:	88 24       	eor	r8, r8
    11b8:	83 94       	inc	r8
    11ba:	91 2c       	mov	r9, r1
    11bc:	53 01       	movw	r10, r6
    11be:	12 c0       	rjmp	.+36     	; 0x11e4 <vfprintf+0x172>
    11c0:	28 01       	movw	r4, r16
    11c2:	f2 e0       	ldi	r31, 0x02	; 2
    11c4:	4f 0e       	add	r4, r31
    11c6:	51 1c       	adc	r5, r1
    11c8:	f8 01       	movw	r30, r16
    11ca:	a0 80       	ld	r10, Z
    11cc:	b1 80       	ldd	r11, Z+1	; 0x01
    11ce:	36 fe       	sbrs	r3, 6
    11d0:	03 c0       	rjmp	.+6      	; 0x11d8 <vfprintf+0x166>
    11d2:	69 2d       	mov	r22, r9
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <vfprintf+0x16a>
    11d8:	6f ef       	ldi	r22, 0xFF	; 255
    11da:	7f ef       	ldi	r23, 0xFF	; 255
    11dc:	c5 01       	movw	r24, r10
    11de:	63 d5       	rcall	.+2758   	; 0x1ca6 <strnlen>
    11e0:	4c 01       	movw	r8, r24
    11e2:	82 01       	movw	r16, r4
    11e4:	f3 2d       	mov	r31, r3
    11e6:	ff 77       	andi	r31, 0x7F	; 127
    11e8:	3f 2e       	mov	r3, r31
    11ea:	15 c0       	rjmp	.+42     	; 0x1216 <vfprintf+0x1a4>
    11ec:	28 01       	movw	r4, r16
    11ee:	22 e0       	ldi	r18, 0x02	; 2
    11f0:	42 0e       	add	r4, r18
    11f2:	51 1c       	adc	r5, r1
    11f4:	f8 01       	movw	r30, r16
    11f6:	a0 80       	ld	r10, Z
    11f8:	b1 80       	ldd	r11, Z+1	; 0x01
    11fa:	36 fe       	sbrs	r3, 6
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <vfprintf+0x192>
    11fe:	69 2d       	mov	r22, r9
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <vfprintf+0x196>
    1204:	6f ef       	ldi	r22, 0xFF	; 255
    1206:	7f ef       	ldi	r23, 0xFF	; 255
    1208:	c5 01       	movw	r24, r10
    120a:	3b d5       	rcall	.+2678   	; 0x1c82 <strnlen_P>
    120c:	4c 01       	movw	r8, r24
    120e:	f3 2d       	mov	r31, r3
    1210:	f0 68       	ori	r31, 0x80	; 128
    1212:	3f 2e       	mov	r3, r31
    1214:	82 01       	movw	r16, r4
    1216:	33 fc       	sbrc	r3, 3
    1218:	19 c0       	rjmp	.+50     	; 0x124c <vfprintf+0x1da>
    121a:	82 2d       	mov	r24, r2
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	88 16       	cp	r8, r24
    1220:	99 06       	cpc	r9, r25
    1222:	a0 f4       	brcc	.+40     	; 0x124c <vfprintf+0x1da>
    1224:	b6 01       	movw	r22, r12
    1226:	80 e2       	ldi	r24, 0x20	; 32
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	86 d5       	rcall	.+2828   	; 0x1d38 <fputc>
    122c:	2a 94       	dec	r2
    122e:	f5 cf       	rjmp	.-22     	; 0x121a <vfprintf+0x1a8>
    1230:	f5 01       	movw	r30, r10
    1232:	37 fc       	sbrc	r3, 7
    1234:	85 91       	lpm	r24, Z+
    1236:	37 fe       	sbrs	r3, 7
    1238:	81 91       	ld	r24, Z+
    123a:	5f 01       	movw	r10, r30
    123c:	b6 01       	movw	r22, r12
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	7b d5       	rcall	.+2806   	; 0x1d38 <fputc>
    1242:	21 10       	cpse	r2, r1
    1244:	2a 94       	dec	r2
    1246:	21 e0       	ldi	r18, 0x01	; 1
    1248:	82 1a       	sub	r8, r18
    124a:	91 08       	sbc	r9, r1
    124c:	81 14       	cp	r8, r1
    124e:	91 04       	cpc	r9, r1
    1250:	79 f7       	brne	.-34     	; 0x1230 <vfprintf+0x1be>
    1252:	e1 c0       	rjmp	.+450    	; 0x1416 <vfprintf+0x3a4>
    1254:	84 36       	cpi	r24, 0x64	; 100
    1256:	11 f0       	breq	.+4      	; 0x125c <vfprintf+0x1ea>
    1258:	89 36       	cpi	r24, 0x69	; 105
    125a:	39 f5       	brne	.+78     	; 0x12aa <vfprintf+0x238>
    125c:	f8 01       	movw	r30, r16
    125e:	37 fe       	sbrs	r3, 7
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <vfprintf+0x1fe>
    1262:	60 81       	ld	r22, Z
    1264:	71 81       	ldd	r23, Z+1	; 0x01
    1266:	82 81       	ldd	r24, Z+2	; 0x02
    1268:	93 81       	ldd	r25, Z+3	; 0x03
    126a:	0c 5f       	subi	r16, 0xFC	; 252
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <vfprintf+0x20e>
    1270:	60 81       	ld	r22, Z
    1272:	71 81       	ldd	r23, Z+1	; 0x01
    1274:	07 2e       	mov	r0, r23
    1276:	00 0c       	add	r0, r0
    1278:	88 0b       	sbc	r24, r24
    127a:	99 0b       	sbc	r25, r25
    127c:	0e 5f       	subi	r16, 0xFE	; 254
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	f3 2d       	mov	r31, r3
    1282:	ff 76       	andi	r31, 0x6F	; 111
    1284:	3f 2e       	mov	r3, r31
    1286:	97 ff       	sbrs	r25, 7
    1288:	09 c0       	rjmp	.+18     	; 0x129c <vfprintf+0x22a>
    128a:	90 95       	com	r25
    128c:	80 95       	com	r24
    128e:	70 95       	com	r23
    1290:	61 95       	neg	r22
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	8f 4f       	sbci	r24, 0xFF	; 255
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	f0 68       	ori	r31, 0x80	; 128
    129a:	3f 2e       	mov	r3, r31
    129c:	2a e0       	ldi	r18, 0x0A	; 10
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	a3 01       	movw	r20, r6
    12a2:	9f d5       	rcall	.+2878   	; 0x1de2 <__ultoa_invert>
    12a4:	88 2e       	mov	r8, r24
    12a6:	86 18       	sub	r8, r6
    12a8:	44 c0       	rjmp	.+136    	; 0x1332 <vfprintf+0x2c0>
    12aa:	85 37       	cpi	r24, 0x75	; 117
    12ac:	31 f4       	brne	.+12     	; 0x12ba <vfprintf+0x248>
    12ae:	23 2d       	mov	r18, r3
    12b0:	2f 7e       	andi	r18, 0xEF	; 239
    12b2:	b2 2e       	mov	r11, r18
    12b4:	2a e0       	ldi	r18, 0x0A	; 10
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	25 c0       	rjmp	.+74     	; 0x1304 <vfprintf+0x292>
    12ba:	93 2d       	mov	r25, r3
    12bc:	99 7f       	andi	r25, 0xF9	; 249
    12be:	b9 2e       	mov	r11, r25
    12c0:	8f 36       	cpi	r24, 0x6F	; 111
    12c2:	c1 f0       	breq	.+48     	; 0x12f4 <vfprintf+0x282>
    12c4:	18 f4       	brcc	.+6      	; 0x12cc <vfprintf+0x25a>
    12c6:	88 35       	cpi	r24, 0x58	; 88
    12c8:	79 f0       	breq	.+30     	; 0x12e8 <vfprintf+0x276>
    12ca:	ae c0       	rjmp	.+348    	; 0x1428 <vfprintf+0x3b6>
    12cc:	80 37       	cpi	r24, 0x70	; 112
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <vfprintf+0x264>
    12d0:	88 37       	cpi	r24, 0x78	; 120
    12d2:	21 f0       	breq	.+8      	; 0x12dc <vfprintf+0x26a>
    12d4:	a9 c0       	rjmp	.+338    	; 0x1428 <vfprintf+0x3b6>
    12d6:	e9 2f       	mov	r30, r25
    12d8:	e0 61       	ori	r30, 0x10	; 16
    12da:	be 2e       	mov	r11, r30
    12dc:	b4 fe       	sbrs	r11, 4
    12de:	0d c0       	rjmp	.+26     	; 0x12fa <vfprintf+0x288>
    12e0:	fb 2d       	mov	r31, r11
    12e2:	f4 60       	ori	r31, 0x04	; 4
    12e4:	bf 2e       	mov	r11, r31
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <vfprintf+0x288>
    12e8:	34 fe       	sbrs	r3, 4
    12ea:	0a c0       	rjmp	.+20     	; 0x1300 <vfprintf+0x28e>
    12ec:	29 2f       	mov	r18, r25
    12ee:	26 60       	ori	r18, 0x06	; 6
    12f0:	b2 2e       	mov	r11, r18
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <vfprintf+0x28e>
    12f4:	28 e0       	ldi	r18, 0x08	; 8
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <vfprintf+0x292>
    12fa:	20 e1       	ldi	r18, 0x10	; 16
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <vfprintf+0x292>
    1300:	20 e1       	ldi	r18, 0x10	; 16
    1302:	32 e0       	ldi	r19, 0x02	; 2
    1304:	f8 01       	movw	r30, r16
    1306:	b7 fe       	sbrs	r11, 7
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <vfprintf+0x2a6>
    130a:	60 81       	ld	r22, Z
    130c:	71 81       	ldd	r23, Z+1	; 0x01
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	93 81       	ldd	r25, Z+3	; 0x03
    1312:	0c 5f       	subi	r16, 0xFC	; 252
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <vfprintf+0x2b2>
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 5f       	subi	r16, 0xFE	; 254
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	a3 01       	movw	r20, r6
    1326:	5d d5       	rcall	.+2746   	; 0x1de2 <__ultoa_invert>
    1328:	88 2e       	mov	r8, r24
    132a:	86 18       	sub	r8, r6
    132c:	fb 2d       	mov	r31, r11
    132e:	ff 77       	andi	r31, 0x7F	; 127
    1330:	3f 2e       	mov	r3, r31
    1332:	36 fe       	sbrs	r3, 6
    1334:	0d c0       	rjmp	.+26     	; 0x1350 <vfprintf+0x2de>
    1336:	23 2d       	mov	r18, r3
    1338:	2e 7f       	andi	r18, 0xFE	; 254
    133a:	a2 2e       	mov	r10, r18
    133c:	89 14       	cp	r8, r9
    133e:	58 f4       	brcc	.+22     	; 0x1356 <vfprintf+0x2e4>
    1340:	34 fe       	sbrs	r3, 4
    1342:	0b c0       	rjmp	.+22     	; 0x135a <vfprintf+0x2e8>
    1344:	32 fc       	sbrc	r3, 2
    1346:	09 c0       	rjmp	.+18     	; 0x135a <vfprintf+0x2e8>
    1348:	83 2d       	mov	r24, r3
    134a:	8e 7e       	andi	r24, 0xEE	; 238
    134c:	a8 2e       	mov	r10, r24
    134e:	05 c0       	rjmp	.+10     	; 0x135a <vfprintf+0x2e8>
    1350:	b8 2c       	mov	r11, r8
    1352:	a3 2c       	mov	r10, r3
    1354:	03 c0       	rjmp	.+6      	; 0x135c <vfprintf+0x2ea>
    1356:	b8 2c       	mov	r11, r8
    1358:	01 c0       	rjmp	.+2      	; 0x135c <vfprintf+0x2ea>
    135a:	b9 2c       	mov	r11, r9
    135c:	a4 fe       	sbrs	r10, 4
    135e:	0f c0       	rjmp	.+30     	; 0x137e <vfprintf+0x30c>
    1360:	fe 01       	movw	r30, r28
    1362:	e8 0d       	add	r30, r8
    1364:	f1 1d       	adc	r31, r1
    1366:	80 81       	ld	r24, Z
    1368:	80 33       	cpi	r24, 0x30	; 48
    136a:	21 f4       	brne	.+8      	; 0x1374 <vfprintf+0x302>
    136c:	9a 2d       	mov	r25, r10
    136e:	99 7e       	andi	r25, 0xE9	; 233
    1370:	a9 2e       	mov	r10, r25
    1372:	09 c0       	rjmp	.+18     	; 0x1386 <vfprintf+0x314>
    1374:	a2 fe       	sbrs	r10, 2
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <vfprintf+0x312>
    1378:	b3 94       	inc	r11
    137a:	b3 94       	inc	r11
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <vfprintf+0x314>
    137e:	8a 2d       	mov	r24, r10
    1380:	86 78       	andi	r24, 0x86	; 134
    1382:	09 f0       	breq	.+2      	; 0x1386 <vfprintf+0x314>
    1384:	b3 94       	inc	r11
    1386:	a3 fc       	sbrc	r10, 3
    1388:	10 c0       	rjmp	.+32     	; 0x13aa <vfprintf+0x338>
    138a:	a0 fe       	sbrs	r10, 0
    138c:	06 c0       	rjmp	.+12     	; 0x139a <vfprintf+0x328>
    138e:	b2 14       	cp	r11, r2
    1390:	80 f4       	brcc	.+32     	; 0x13b2 <vfprintf+0x340>
    1392:	28 0c       	add	r2, r8
    1394:	92 2c       	mov	r9, r2
    1396:	9b 18       	sub	r9, r11
    1398:	0d c0       	rjmp	.+26     	; 0x13b4 <vfprintf+0x342>
    139a:	b2 14       	cp	r11, r2
    139c:	58 f4       	brcc	.+22     	; 0x13b4 <vfprintf+0x342>
    139e:	b6 01       	movw	r22, r12
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	c9 d4       	rcall	.+2450   	; 0x1d38 <fputc>
    13a6:	b3 94       	inc	r11
    13a8:	f8 cf       	rjmp	.-16     	; 0x139a <vfprintf+0x328>
    13aa:	b2 14       	cp	r11, r2
    13ac:	18 f4       	brcc	.+6      	; 0x13b4 <vfprintf+0x342>
    13ae:	2b 18       	sub	r2, r11
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0x344>
    13b2:	98 2c       	mov	r9, r8
    13b4:	21 2c       	mov	r2, r1
    13b6:	a4 fe       	sbrs	r10, 4
    13b8:	0f c0       	rjmp	.+30     	; 0x13d8 <vfprintf+0x366>
    13ba:	b6 01       	movw	r22, r12
    13bc:	80 e3       	ldi	r24, 0x30	; 48
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	bb d4       	rcall	.+2422   	; 0x1d38 <fputc>
    13c2:	a2 fe       	sbrs	r10, 2
    13c4:	16 c0       	rjmp	.+44     	; 0x13f2 <vfprintf+0x380>
    13c6:	a1 fc       	sbrc	r10, 1
    13c8:	03 c0       	rjmp	.+6      	; 0x13d0 <vfprintf+0x35e>
    13ca:	88 e7       	ldi	r24, 0x78	; 120
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <vfprintf+0x362>
    13d0:	88 e5       	ldi	r24, 0x58	; 88
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	b6 01       	movw	r22, r12
    13d6:	0c c0       	rjmp	.+24     	; 0x13f0 <vfprintf+0x37e>
    13d8:	8a 2d       	mov	r24, r10
    13da:	86 78       	andi	r24, 0x86	; 134
    13dc:	51 f0       	breq	.+20     	; 0x13f2 <vfprintf+0x380>
    13de:	a1 fe       	sbrs	r10, 1
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <vfprintf+0x374>
    13e2:	8b e2       	ldi	r24, 0x2B	; 43
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <vfprintf+0x376>
    13e6:	80 e2       	ldi	r24, 0x20	; 32
    13e8:	a7 fc       	sbrc	r10, 7
    13ea:	8d e2       	ldi	r24, 0x2D	; 45
    13ec:	b6 01       	movw	r22, r12
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a3 d4       	rcall	.+2374   	; 0x1d38 <fputc>
    13f2:	89 14       	cp	r8, r9
    13f4:	30 f4       	brcc	.+12     	; 0x1402 <vfprintf+0x390>
    13f6:	b6 01       	movw	r22, r12
    13f8:	80 e3       	ldi	r24, 0x30	; 48
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9d d4       	rcall	.+2362   	; 0x1d38 <fputc>
    13fe:	9a 94       	dec	r9
    1400:	f8 cf       	rjmp	.-16     	; 0x13f2 <vfprintf+0x380>
    1402:	8a 94       	dec	r8
    1404:	f3 01       	movw	r30, r6
    1406:	e8 0d       	add	r30, r8
    1408:	f1 1d       	adc	r31, r1
    140a:	80 81       	ld	r24, Z
    140c:	b6 01       	movw	r22, r12
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	93 d4       	rcall	.+2342   	; 0x1d38 <fputc>
    1412:	81 10       	cpse	r8, r1
    1414:	f6 cf       	rjmp	.-20     	; 0x1402 <vfprintf+0x390>
    1416:	22 20       	and	r2, r2
    1418:	09 f4       	brne	.+2      	; 0x141c <vfprintf+0x3aa>
    141a:	4e ce       	rjmp	.-868    	; 0x10b8 <vfprintf+0x46>
    141c:	b6 01       	movw	r22, r12
    141e:	80 e2       	ldi	r24, 0x20	; 32
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	8a d4       	rcall	.+2324   	; 0x1d38 <fputc>
    1424:	2a 94       	dec	r2
    1426:	f7 cf       	rjmp	.-18     	; 0x1416 <vfprintf+0x3a4>
    1428:	f6 01       	movw	r30, r12
    142a:	86 81       	ldd	r24, Z+6	; 0x06
    142c:	97 81       	ldd	r25, Z+7	; 0x07
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0x3c2>
    1430:	8f ef       	ldi	r24, 0xFF	; 255
    1432:	9f ef       	ldi	r25, 0xFF	; 255
    1434:	2b 96       	adiw	r28, 0x0b	; 11
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	bf 90       	pop	r11
    144c:	af 90       	pop	r10
    144e:	9f 90       	pop	r9
    1450:	8f 90       	pop	r8
    1452:	7f 90       	pop	r7
    1454:	6f 90       	pop	r6
    1456:	5f 90       	pop	r5
    1458:	4f 90       	pop	r4
    145a:	3f 90       	pop	r3
    145c:	2f 90       	pop	r2
    145e:	08 95       	ret

00001460 <putval>:
    1460:	20 fd       	sbrc	r18, 0
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <putval+0x16>
    1464:	fc 01       	movw	r30, r24
    1466:	23 fd       	sbrc	r18, 3
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <putval+0x14>
    146a:	22 ff       	sbrs	r18, 2
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <putval+0x12>
    146e:	73 83       	std	Z+3, r23	; 0x03
    1470:	62 83       	std	Z+2, r22	; 0x02
    1472:	51 83       	std	Z+1, r21	; 0x01
    1474:	40 83       	st	Z, r20
    1476:	08 95       	ret

00001478 <mulacc>:
    1478:	44 fd       	sbrc	r20, 4
    147a:	17 c0       	rjmp	.+46     	; 0x14aa <mulacc+0x32>
    147c:	46 fd       	sbrc	r20, 6
    147e:	17 c0       	rjmp	.+46     	; 0x14ae <mulacc+0x36>
    1480:	ab 01       	movw	r20, r22
    1482:	bc 01       	movw	r22, r24
    1484:	da 01       	movw	r26, r20
    1486:	fb 01       	movw	r30, r22
    1488:	aa 0f       	add	r26, r26
    148a:	bb 1f       	adc	r27, r27
    148c:	ee 1f       	adc	r30, r30
    148e:	ff 1f       	adc	r31, r31
    1490:	10 94       	com	r1
    1492:	d1 f7       	brne	.-12     	; 0x1488 <mulacc+0x10>
    1494:	4a 0f       	add	r20, r26
    1496:	5b 1f       	adc	r21, r27
    1498:	6e 1f       	adc	r22, r30
    149a:	7f 1f       	adc	r23, r31
    149c:	cb 01       	movw	r24, r22
    149e:	ba 01       	movw	r22, r20
    14a0:	66 0f       	add	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <mulacc+0x44>
    14aa:	33 e0       	ldi	r19, 0x03	; 3
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <mulacc+0x38>
    14ae:	34 e0       	ldi	r19, 0x04	; 4
    14b0:	66 0f       	add	r22, r22
    14b2:	77 1f       	adc	r23, r23
    14b4:	88 1f       	adc	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	31 50       	subi	r19, 0x01	; 1
    14ba:	d1 f7       	brne	.-12     	; 0x14b0 <mulacc+0x38>
    14bc:	62 0f       	add	r22, r18
    14be:	71 1d       	adc	r23, r1
    14c0:	81 1d       	adc	r24, r1
    14c2:	91 1d       	adc	r25, r1
    14c4:	08 95       	ret

000014c6 <skip_spaces>:
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	8c 01       	movw	r16, r24
    14d0:	c8 01       	movw	r24, r16
    14d2:	f4 d3       	rcall	.+2024   	; 0x1cbc <fgetc>
    14d4:	ec 01       	movw	r28, r24
    14d6:	97 fd       	sbrc	r25, 7
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <skip_spaces+0x20>
    14da:	c0 d3       	rcall	.+1920   	; 0x1c5c <isspace>
    14dc:	89 2b       	or	r24, r25
    14de:	c1 f7       	brne	.-16     	; 0x14d0 <skip_spaces+0xa>
    14e0:	b8 01       	movw	r22, r16
    14e2:	ce 01       	movw	r24, r28
    14e4:	65 d4       	rcall	.+2250   	; 0x1db0 <ungetc>
    14e6:	ce 01       	movw	r24, r28
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	08 95       	ret

000014f2 <conv_int>:
    14f2:	8f 92       	push	r8
    14f4:	9f 92       	push	r9
    14f6:	af 92       	push	r10
    14f8:	bf 92       	push	r11
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	8c 01       	movw	r16, r24
    1508:	d6 2f       	mov	r29, r22
    150a:	7a 01       	movw	r14, r20
    150c:	b2 2e       	mov	r11, r18
    150e:	d6 d3       	rcall	.+1964   	; 0x1cbc <fgetc>
    1510:	9c 01       	movw	r18, r24
    1512:	33 27       	eor	r19, r19
    1514:	2b 32       	cpi	r18, 0x2B	; 43
    1516:	31 05       	cpc	r19, r1
    1518:	31 f0       	breq	.+12     	; 0x1526 <conv_int+0x34>
    151a:	2d 32       	cpi	r18, 0x2D	; 45
    151c:	31 05       	cpc	r19, r1
    151e:	59 f4       	brne	.+22     	; 0x1536 <conv_int+0x44>
    1520:	8b 2d       	mov	r24, r11
    1522:	80 68       	ori	r24, 0x80	; 128
    1524:	b8 2e       	mov	r11, r24
    1526:	d1 50       	subi	r29, 0x01	; 1
    1528:	11 f4       	brne	.+4      	; 0x152e <conv_int+0x3c>
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	61 c0       	rjmp	.+194    	; 0x15f0 <conv_int+0xfe>
    152e:	c8 01       	movw	r24, r16
    1530:	c5 d3       	rcall	.+1930   	; 0x1cbc <fgetc>
    1532:	97 fd       	sbrc	r25, 7
    1534:	fa cf       	rjmp	.-12     	; 0x152a <conv_int+0x38>
    1536:	cb 2d       	mov	r28, r11
    1538:	cd 7f       	andi	r28, 0xFD	; 253
    153a:	2b 2d       	mov	r18, r11
    153c:	20 73       	andi	r18, 0x30	; 48
    153e:	f9 f4       	brne	.+62     	; 0x157e <conv_int+0x8c>
    1540:	80 33       	cpi	r24, 0x30	; 48
    1542:	e9 f4       	brne	.+58     	; 0x157e <conv_int+0x8c>
    1544:	aa 24       	eor	r10, r10
    1546:	aa 94       	dec	r10
    1548:	ad 0e       	add	r10, r29
    154a:	09 f4       	brne	.+2      	; 0x154e <conv_int+0x5c>
    154c:	3e c0       	rjmp	.+124    	; 0x15ca <conv_int+0xd8>
    154e:	c8 01       	movw	r24, r16
    1550:	b5 d3       	rcall	.+1898   	; 0x1cbc <fgetc>
    1552:	97 fd       	sbrc	r25, 7
    1554:	3a c0       	rjmp	.+116    	; 0x15ca <conv_int+0xd8>
    1556:	9c 01       	movw	r18, r24
    1558:	2f 7d       	andi	r18, 0xDF	; 223
    155a:	33 27       	eor	r19, r19
    155c:	28 35       	cpi	r18, 0x58	; 88
    155e:	31 05       	cpc	r19, r1
    1560:	41 f4       	brne	.+16     	; 0x1572 <conv_int+0x80>
    1562:	c2 64       	ori	r28, 0x42	; 66
    1564:	d2 50       	subi	r29, 0x02	; 2
    1566:	89 f1       	breq	.+98     	; 0x15ca <conv_int+0xd8>
    1568:	c8 01       	movw	r24, r16
    156a:	a8 d3       	rcall	.+1872   	; 0x1cbc <fgetc>
    156c:	97 ff       	sbrs	r25, 7
    156e:	07 c0       	rjmp	.+14     	; 0x157e <conv_int+0x8c>
    1570:	2c c0       	rjmp	.+88     	; 0x15ca <conv_int+0xd8>
    1572:	b6 fe       	sbrs	r11, 6
    1574:	02 c0       	rjmp	.+4      	; 0x157a <conv_int+0x88>
    1576:	c2 60       	ori	r28, 0x02	; 2
    1578:	01 c0       	rjmp	.+2      	; 0x157c <conv_int+0x8a>
    157a:	c2 61       	ori	r28, 0x12	; 18
    157c:	da 2d       	mov	r29, r10
    157e:	81 2c       	mov	r8, r1
    1580:	91 2c       	mov	r9, r1
    1582:	54 01       	movw	r10, r8
    1584:	20 ed       	ldi	r18, 0xD0	; 208
    1586:	28 0f       	add	r18, r24
    1588:	28 30       	cpi	r18, 0x08	; 8
    158a:	78 f0       	brcs	.+30     	; 0x15aa <conv_int+0xb8>
    158c:	c4 ff       	sbrs	r28, 4
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <conv_int+0xa4>
    1590:	b8 01       	movw	r22, r16
    1592:	0e d4       	rcall	.+2076   	; 0x1db0 <ungetc>
    1594:	17 c0       	rjmp	.+46     	; 0x15c4 <conv_int+0xd2>
    1596:	2a 30       	cpi	r18, 0x0A	; 10
    1598:	40 f0       	brcs	.+16     	; 0x15aa <conv_int+0xb8>
    159a:	c6 ff       	sbrs	r28, 6
    159c:	f9 cf       	rjmp	.-14     	; 0x1590 <conv_int+0x9e>
    159e:	2f 7d       	andi	r18, 0xDF	; 223
    15a0:	3f ee       	ldi	r19, 0xEF	; 239
    15a2:	32 0f       	add	r19, r18
    15a4:	36 30       	cpi	r19, 0x06	; 6
    15a6:	a0 f7       	brcc	.-24     	; 0x1590 <conv_int+0x9e>
    15a8:	27 50       	subi	r18, 0x07	; 7
    15aa:	4c 2f       	mov	r20, r28
    15ac:	c5 01       	movw	r24, r10
    15ae:	b4 01       	movw	r22, r8
    15b0:	63 df       	rcall	.-314    	; 0x1478 <mulacc>
    15b2:	4b 01       	movw	r8, r22
    15b4:	5c 01       	movw	r10, r24
    15b6:	c2 60       	ori	r28, 0x02	; 2
    15b8:	d1 50       	subi	r29, 0x01	; 1
    15ba:	51 f0       	breq	.+20     	; 0x15d0 <conv_int+0xde>
    15bc:	c8 01       	movw	r24, r16
    15be:	7e d3       	rcall	.+1788   	; 0x1cbc <fgetc>
    15c0:	97 ff       	sbrs	r25, 7
    15c2:	e0 cf       	rjmp	.-64     	; 0x1584 <conv_int+0x92>
    15c4:	c1 fd       	sbrc	r28, 1
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <conv_int+0xde>
    15c8:	b0 cf       	rjmp	.-160    	; 0x152a <conv_int+0x38>
    15ca:	81 2c       	mov	r8, r1
    15cc:	91 2c       	mov	r9, r1
    15ce:	54 01       	movw	r10, r8
    15d0:	c7 ff       	sbrs	r28, 7
    15d2:	08 c0       	rjmp	.+16     	; 0x15e4 <conv_int+0xf2>
    15d4:	b0 94       	com	r11
    15d6:	a0 94       	com	r10
    15d8:	90 94       	com	r9
    15da:	80 94       	com	r8
    15dc:	81 1c       	adc	r8, r1
    15de:	91 1c       	adc	r9, r1
    15e0:	a1 1c       	adc	r10, r1
    15e2:	b1 1c       	adc	r11, r1
    15e4:	2c 2f       	mov	r18, r28
    15e6:	b5 01       	movw	r22, r10
    15e8:	a4 01       	movw	r20, r8
    15ea:	c7 01       	movw	r24, r14
    15ec:	39 df       	rcall	.-398    	; 0x1460 <putval>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	bf 90       	pop	r11
    15fe:	af 90       	pop	r10
    1600:	9f 90       	pop	r9
    1602:	8f 90       	pop	r8
    1604:	08 95       	ret

00001606 <conv_brk>:
    1606:	5f 92       	push	r5
    1608:	6f 92       	push	r6
    160a:	7f 92       	push	r7
    160c:	8f 92       	push	r8
    160e:	9f 92       	push	r9
    1610:	af 92       	push	r10
    1612:	bf 92       	push	r11
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	a0 97       	sbiw	r28, 0x20	; 32
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	5c 01       	movw	r10, r24
    1630:	96 2e       	mov	r9, r22
    1632:	7a 01       	movw	r14, r20
    1634:	f9 01       	movw	r30, r18
    1636:	8e 01       	movw	r16, r28
    1638:	0f 5f       	subi	r16, 0xFF	; 255
    163a:	1f 4f       	sbci	r17, 0xFF	; 255
    163c:	68 01       	movw	r12, r16
    163e:	80 e2       	ldi	r24, 0x20	; 32
    1640:	d8 01       	movw	r26, r16
    1642:	1d 92       	st	X+, r1
    1644:	8a 95       	dec	r24
    1646:	e9 f7       	brne	.-6      	; 0x1642 <conv_brk+0x3c>
    1648:	d5 01       	movw	r26, r10
    164a:	13 96       	adiw	r26, 0x03	; 3
    164c:	8c 90       	ld	r8, X
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	61 2c       	mov	r6, r1
    1654:	71 2c       	mov	r7, r1
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	83 fc       	sbrc	r8, 3
    165e:	25 91       	lpm	r18, Z+
    1660:	83 fe       	sbrs	r8, 3
    1662:	21 91       	ld	r18, Z+
    1664:	8f 01       	movw	r16, r30
    1666:	52 2e       	mov	r5, r18
    1668:	21 11       	cpse	r18, r1
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <conv_brk+0x6c>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	90 c0       	rjmp	.+288    	; 0x1792 <conv_brk+0x18c>
    1672:	2e 35       	cpi	r18, 0x5E	; 94
    1674:	11 f4       	brne	.+4      	; 0x167a <conv_brk+0x74>
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	51 f1       	breq	.+84     	; 0x16ce <conv_brk+0xc8>
    167a:	43 2f       	mov	r20, r19
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	48 17       	cp	r20, r24
    1680:	59 07       	cpc	r21, r25
    1682:	3c f4       	brge	.+14     	; 0x1692 <conv_brk+0x8c>
    1684:	2d 35       	cpi	r18, 0x5D	; 93
    1686:	59 f1       	breq	.+86     	; 0x16de <conv_brk+0xd8>
    1688:	2d 32       	cpi	r18, 0x2D	; 45
    168a:	19 f4       	brne	.+6      	; 0x1692 <conv_brk+0x8c>
    168c:	77 20       	and	r7, r7
    168e:	09 f1       	breq	.+66     	; 0x16d2 <conv_brk+0xcc>
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <conv_brk+0x92>
    1692:	77 20       	and	r7, r7
    1694:	09 f4       	brne	.+2      	; 0x1698 <conv_brk+0x92>
    1696:	68 c0       	rjmp	.+208    	; 0x1768 <conv_brk+0x162>
    1698:	45 2d       	mov	r20, r5
    169a:	46 95       	lsr	r20
    169c:	46 95       	lsr	r20
    169e:	46 95       	lsr	r20
    16a0:	d6 01       	movw	r26, r12
    16a2:	a4 0f       	add	r26, r20
    16a4:	b1 1d       	adc	r27, r1
    16a6:	45 2d       	mov	r20, r5
    16a8:	47 70       	andi	r20, 0x07	; 7
    16aa:	8b 01       	movw	r16, r22
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <conv_brk+0xac>
    16ae:	00 0f       	add	r16, r16
    16b0:	11 1f       	adc	r17, r17
    16b2:	4a 95       	dec	r20
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <conv_brk+0xa8>
    16b6:	a8 01       	movw	r20, r16
    16b8:	5c 91       	ld	r21, X
    16ba:	45 2b       	or	r20, r21
    16bc:	4c 93       	st	X, r20
    16be:	65 14       	cp	r6, r5
    16c0:	59 f0       	breq	.+22     	; 0x16d8 <conv_brk+0xd2>
    16c2:	56 14       	cp	r5, r6
    16c4:	10 f4       	brcc	.+4      	; 0x16ca <conv_brk+0xc4>
    16c6:	53 94       	inc	r5
    16c8:	e7 cf       	rjmp	.-50     	; 0x1698 <conv_brk+0x92>
    16ca:	5a 94       	dec	r5
    16cc:	e5 cf       	rjmp	.-54     	; 0x1698 <conv_brk+0x92>
    16ce:	31 e0       	ldi	r19, 0x01	; 1
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <conv_brk+0xd4>
    16d2:	77 24       	eor	r7, r7
    16d4:	73 94       	inc	r7
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <conv_brk+0xd4>
    16d8:	71 2c       	mov	r7, r1
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	bf cf       	rjmp	.-130    	; 0x165c <conv_brk+0x56>
    16de:	77 20       	and	r7, r7
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <conv_brk+0xe2>
    16e2:	8e 81       	ldd	r24, Y+6	; 0x06
    16e4:	80 62       	ori	r24, 0x20	; 32
    16e6:	8e 83       	std	Y+6, r24	; 0x06
    16e8:	31 11       	cpse	r19, r1
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <conv_brk+0xec>
    16ec:	88 24       	eor	r8, r8
    16ee:	83 94       	inc	r8
    16f0:	17 c0       	rjmp	.+46     	; 0x1720 <conv_brk+0x11a>
    16f2:	f6 01       	movw	r30, r12
    16f4:	9e 01       	movw	r18, r28
    16f6:	2f 5d       	subi	r18, 0xDF	; 223
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	80 95       	com	r24
    16fe:	81 93       	st	Z+, r24
    1700:	2e 17       	cp	r18, r30
    1702:	3f 07       	cpc	r19, r31
    1704:	d1 f7       	brne	.-12     	; 0x16fa <conv_brk+0xf4>
    1706:	f2 cf       	rjmp	.-28     	; 0x16ec <conv_brk+0xe6>
    1708:	e1 14       	cp	r14, r1
    170a:	f1 04       	cpc	r15, r1
    170c:	29 f0       	breq	.+10     	; 0x1718 <conv_brk+0x112>
    170e:	d7 01       	movw	r26, r14
    1710:	8c 93       	st	X, r24
    1712:	f7 01       	movw	r30, r14
    1714:	31 96       	adiw	r30, 0x01	; 1
    1716:	7f 01       	movw	r14, r30
    1718:	9a 94       	dec	r9
    171a:	81 2c       	mov	r8, r1
    171c:	99 20       	and	r9, r9
    171e:	e9 f0       	breq	.+58     	; 0x175a <conv_brk+0x154>
    1720:	c5 01       	movw	r24, r10
    1722:	cc d2       	rcall	.+1432   	; 0x1cbc <fgetc>
    1724:	97 fd       	sbrc	r25, 7
    1726:	17 c0       	rjmp	.+46     	; 0x1756 <conv_brk+0x150>
    1728:	fc 01       	movw	r30, r24
    172a:	ff 27       	eor	r31, r31
    172c:	23 e0       	ldi	r18, 0x03	; 3
    172e:	f5 95       	asr	r31
    1730:	e7 95       	ror	r30
    1732:	2a 95       	dec	r18
    1734:	e1 f7       	brne	.-8      	; 0x172e <conv_brk+0x128>
    1736:	ec 0d       	add	r30, r12
    1738:	fd 1d       	adc	r31, r13
    173a:	20 81       	ld	r18, Z
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	ac 01       	movw	r20, r24
    1740:	47 70       	andi	r20, 0x07	; 7
    1742:	55 27       	eor	r21, r21
    1744:	02 c0       	rjmp	.+4      	; 0x174a <conv_brk+0x144>
    1746:	35 95       	asr	r19
    1748:	27 95       	ror	r18
    174a:	4a 95       	dec	r20
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <conv_brk+0x140>
    174e:	20 fd       	sbrc	r18, 0
    1750:	db cf       	rjmp	.-74     	; 0x1708 <conv_brk+0x102>
    1752:	b5 01       	movw	r22, r10
    1754:	2d d3       	rcall	.+1626   	; 0x1db0 <ungetc>
    1756:	81 10       	cpse	r8, r1
    1758:	89 cf       	rjmp	.-238    	; 0x166c <conv_brk+0x66>
    175a:	e1 14       	cp	r14, r1
    175c:	f1 04       	cpc	r15, r1
    175e:	11 f0       	breq	.+4      	; 0x1764 <conv_brk+0x15e>
    1760:	d7 01       	movw	r26, r14
    1762:	1c 92       	st	X, r1
    1764:	c8 01       	movw	r24, r16
    1766:	15 c0       	rjmp	.+42     	; 0x1792 <conv_brk+0x18c>
    1768:	42 2f       	mov	r20, r18
    176a:	46 95       	lsr	r20
    176c:	46 95       	lsr	r20
    176e:	46 95       	lsr	r20
    1770:	d6 01       	movw	r26, r12
    1772:	a4 0f       	add	r26, r20
    1774:	b1 1d       	adc	r27, r1
    1776:	42 2f       	mov	r20, r18
    1778:	47 70       	andi	r20, 0x07	; 7
    177a:	8b 01       	movw	r16, r22
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <conv_brk+0x17c>
    177e:	00 0f       	add	r16, r16
    1780:	11 1f       	adc	r17, r17
    1782:	4a 95       	dec	r20
    1784:	e2 f7       	brpl	.-8      	; 0x177e <conv_brk+0x178>
    1786:	a8 01       	movw	r20, r16
    1788:	5c 91       	ld	r21, X
    178a:	45 2b       	or	r20, r21
    178c:	4c 93       	st	X, r20
    178e:	62 2e       	mov	r6, r18
    1790:	a4 cf       	rjmp	.-184    	; 0x16da <conv_brk+0xd4>
    1792:	a0 96       	adiw	r28, 0x20	; 32
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	ff 90       	pop	r15
    17a2:	ef 90       	pop	r14
    17a4:	df 90       	pop	r13
    17a6:	cf 90       	pop	r12
    17a8:	bf 90       	pop	r11
    17aa:	af 90       	pop	r10
    17ac:	9f 90       	pop	r9
    17ae:	8f 90       	pop	r8
    17b0:	7f 90       	pop	r7
    17b2:	6f 90       	pop	r6
    17b4:	5f 90       	pop	r5
    17b6:	08 95       	ret

000017b8 <vfscanf>:
    17b8:	5f 92       	push	r5
    17ba:	6f 92       	push	r6
    17bc:	7f 92       	push	r7
    17be:	8f 92       	push	r8
    17c0:	9f 92       	push	r9
    17c2:	af 92       	push	r10
    17c4:	bf 92       	push	r11
    17c6:	cf 92       	push	r12
    17c8:	df 92       	push	r13
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	6c 01       	movw	r12, r24
    17d8:	eb 01       	movw	r28, r22
    17da:	5a 01       	movw	r10, r20
    17dc:	fc 01       	movw	r30, r24
    17de:	16 82       	std	Z+6, r1	; 0x06
    17e0:	17 82       	std	Z+7, r1	; 0x07
    17e2:	51 2c       	mov	r5, r1
    17e4:	f6 01       	movw	r30, r12
    17e6:	e3 80       	ldd	r14, Z+3	; 0x03
    17e8:	fe 01       	movw	r30, r28
    17ea:	e3 fc       	sbrc	r14, 3
    17ec:	85 91       	lpm	r24, Z+
    17ee:	e3 fe       	sbrs	r14, 3
    17f0:	81 91       	ld	r24, Z+
    17f2:	18 2f       	mov	r17, r24
    17f4:	ef 01       	movw	r28, r30
    17f6:	88 23       	and	r24, r24
    17f8:	09 f4       	brne	.+2      	; 0x17fc <vfscanf+0x44>
    17fa:	e0 c0       	rjmp	.+448    	; 0x19bc <vfscanf+0x204>
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	2e d2       	rcall	.+1116   	; 0x1c5c <isspace>
    1800:	89 2b       	or	r24, r25
    1802:	19 f0       	breq	.+6      	; 0x180a <vfscanf+0x52>
    1804:	c6 01       	movw	r24, r12
    1806:	5f de       	rcall	.-834    	; 0x14c6 <skip_spaces>
    1808:	ed cf       	rjmp	.-38     	; 0x17e4 <vfscanf+0x2c>
    180a:	15 32       	cpi	r17, 0x25	; 37
    180c:	41 f4       	brne	.+16     	; 0x181e <vfscanf+0x66>
    180e:	fe 01       	movw	r30, r28
    1810:	e3 fc       	sbrc	r14, 3
    1812:	15 91       	lpm	r17, Z+
    1814:	e3 fe       	sbrs	r14, 3
    1816:	11 91       	ld	r17, Z+
    1818:	ef 01       	movw	r28, r30
    181a:	15 32       	cpi	r17, 0x25	; 37
    181c:	71 f4       	brne	.+28     	; 0x183a <vfscanf+0x82>
    181e:	c6 01       	movw	r24, r12
    1820:	4d d2       	rcall	.+1178   	; 0x1cbc <fgetc>
    1822:	97 fd       	sbrc	r25, 7
    1824:	c9 c0       	rjmp	.+402    	; 0x19b8 <vfscanf+0x200>
    1826:	41 2f       	mov	r20, r17
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	9c 01       	movw	r18, r24
    182c:	33 27       	eor	r19, r19
    182e:	24 17       	cp	r18, r20
    1830:	35 07       	cpc	r19, r21
    1832:	c1 f2       	breq	.-80     	; 0x17e4 <vfscanf+0x2c>
    1834:	b6 01       	movw	r22, r12
    1836:	bc d2       	rcall	.+1400   	; 0x1db0 <ungetc>
    1838:	c1 c0       	rjmp	.+386    	; 0x19bc <vfscanf+0x204>
    183a:	1a 32       	cpi	r17, 0x2A	; 42
    183c:	39 f4       	brne	.+14     	; 0x184c <vfscanf+0x94>
    183e:	e3 fc       	sbrc	r14, 3
    1840:	15 91       	lpm	r17, Z+
    1842:	e3 fe       	sbrs	r14, 3
    1844:	11 91       	ld	r17, Z+
    1846:	ef 01       	movw	r28, r30
    1848:	01 e0       	ldi	r16, 0x01	; 1
    184a:	01 c0       	rjmp	.+2      	; 0x184e <vfscanf+0x96>
    184c:	00 e0       	ldi	r16, 0x00	; 0
    184e:	f1 2c       	mov	r15, r1
    1850:	20 ed       	ldi	r18, 0xD0	; 208
    1852:	21 0f       	add	r18, r17
    1854:	2a 30       	cpi	r18, 0x0A	; 10
    1856:	78 f4       	brcc	.+30     	; 0x1876 <vfscanf+0xbe>
    1858:	02 60       	ori	r16, 0x02	; 2
    185a:	6f 2d       	mov	r22, r15
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	40 e2       	ldi	r20, 0x20	; 32
    1864:	09 de       	rcall	.-1006   	; 0x1478 <mulacc>
    1866:	f6 2e       	mov	r15, r22
    1868:	fe 01       	movw	r30, r28
    186a:	e3 fc       	sbrc	r14, 3
    186c:	15 91       	lpm	r17, Z+
    186e:	e3 fe       	sbrs	r14, 3
    1870:	11 91       	ld	r17, Z+
    1872:	ef 01       	movw	r28, r30
    1874:	ed cf       	rjmp	.-38     	; 0x1850 <vfscanf+0x98>
    1876:	01 ff       	sbrs	r16, 1
    1878:	03 c0       	rjmp	.+6      	; 0x1880 <vfscanf+0xc8>
    187a:	f1 10       	cpse	r15, r1
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <vfscanf+0xcc>
    187e:	9e c0       	rjmp	.+316    	; 0x19bc <vfscanf+0x204>
    1880:	ff 24       	eor	r15, r15
    1882:	fa 94       	dec	r15
    1884:	18 36       	cpi	r17, 0x68	; 104
    1886:	19 f0       	breq	.+6      	; 0x188e <vfscanf+0xd6>
    1888:	1c 36       	cpi	r17, 0x6C	; 108
    188a:	51 f0       	breq	.+20     	; 0x18a0 <vfscanf+0xe8>
    188c:	10 c0       	rjmp	.+32     	; 0x18ae <vfscanf+0xf6>
    188e:	fe 01       	movw	r30, r28
    1890:	e3 fc       	sbrc	r14, 3
    1892:	15 91       	lpm	r17, Z+
    1894:	e3 fe       	sbrs	r14, 3
    1896:	11 91       	ld	r17, Z+
    1898:	ef 01       	movw	r28, r30
    189a:	18 36       	cpi	r17, 0x68	; 104
    189c:	41 f4       	brne	.+16     	; 0x18ae <vfscanf+0xf6>
    189e:	08 60       	ori	r16, 0x08	; 8
    18a0:	04 60       	ori	r16, 0x04	; 4
    18a2:	fe 01       	movw	r30, r28
    18a4:	e3 fc       	sbrc	r14, 3
    18a6:	15 91       	lpm	r17, Z+
    18a8:	e3 fe       	sbrs	r14, 3
    18aa:	11 91       	ld	r17, Z+
    18ac:	ef 01       	movw	r28, r30
    18ae:	11 23       	and	r17, r17
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <vfscanf+0xfc>
    18b2:	84 c0       	rjmp	.+264    	; 0x19bc <vfscanf+0x204>
    18b4:	61 2f       	mov	r22, r17
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	8c ef       	ldi	r24, 0xFC	; 252
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	d7 d1       	rcall	.+942    	; 0x1c6c <strchr_P>
    18be:	89 2b       	or	r24, r25
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <vfscanf+0x10c>
    18c2:	7c c0       	rjmp	.+248    	; 0x19bc <vfscanf+0x204>
    18c4:	00 fd       	sbrc	r16, 0
    18c6:	07 c0       	rjmp	.+14     	; 0x18d6 <vfscanf+0x11e>
    18c8:	f5 01       	movw	r30, r10
    18ca:	80 80       	ld	r8, Z
    18cc:	91 80       	ldd	r9, Z+1	; 0x01
    18ce:	c5 01       	movw	r24, r10
    18d0:	02 96       	adiw	r24, 0x02	; 2
    18d2:	5c 01       	movw	r10, r24
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <vfscanf+0x122>
    18d6:	81 2c       	mov	r8, r1
    18d8:	91 2c       	mov	r9, r1
    18da:	1e 36       	cpi	r17, 0x6E	; 110
    18dc:	49 f4       	brne	.+18     	; 0x18f0 <vfscanf+0x138>
    18de:	f6 01       	movw	r30, r12
    18e0:	46 81       	ldd	r20, Z+6	; 0x06
    18e2:	57 81       	ldd	r21, Z+7	; 0x07
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	20 2f       	mov	r18, r16
    18ea:	c4 01       	movw	r24, r8
    18ec:	b9 dd       	rcall	.-1166   	; 0x1460 <putval>
    18ee:	7a cf       	rjmp	.-268    	; 0x17e4 <vfscanf+0x2c>
    18f0:	13 36       	cpi	r17, 0x63	; 99
    18f2:	a1 f4       	brne	.+40     	; 0x191c <vfscanf+0x164>
    18f4:	01 fd       	sbrc	r16, 1
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <vfscanf+0x144>
    18f8:	ff 24       	eor	r15, r15
    18fa:	f3 94       	inc	r15
    18fc:	c6 01       	movw	r24, r12
    18fe:	de d1       	rcall	.+956    	; 0x1cbc <fgetc>
    1900:	97 fd       	sbrc	r25, 7
    1902:	5a c0       	rjmp	.+180    	; 0x19b8 <vfscanf+0x200>
    1904:	81 14       	cp	r8, r1
    1906:	91 04       	cpc	r9, r1
    1908:	29 f0       	breq	.+10     	; 0x1914 <vfscanf+0x15c>
    190a:	f4 01       	movw	r30, r8
    190c:	80 83       	st	Z, r24
    190e:	c4 01       	movw	r24, r8
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	4c 01       	movw	r8, r24
    1914:	fa 94       	dec	r15
    1916:	f1 10       	cpse	r15, r1
    1918:	f1 cf       	rjmp	.-30     	; 0x18fc <vfscanf+0x144>
    191a:	4a c0       	rjmp	.+148    	; 0x19b0 <vfscanf+0x1f8>
    191c:	1b 35       	cpi	r17, 0x5B	; 91
    191e:	51 f4       	brne	.+20     	; 0x1934 <vfscanf+0x17c>
    1920:	9e 01       	movw	r18, r28
    1922:	a4 01       	movw	r20, r8
    1924:	6f 2d       	mov	r22, r15
    1926:	c6 01       	movw	r24, r12
    1928:	6e de       	rcall	.-804    	; 0x1606 <conv_brk>
    192a:	ec 01       	movw	r28, r24
    192c:	89 2b       	or	r24, r25
    192e:	09 f0       	breq	.+2      	; 0x1932 <vfscanf+0x17a>
    1930:	3f c0       	rjmp	.+126    	; 0x19b0 <vfscanf+0x1f8>
    1932:	39 c0       	rjmp	.+114    	; 0x19a6 <vfscanf+0x1ee>
    1934:	c6 01       	movw	r24, r12
    1936:	c7 dd       	rcall	.-1138   	; 0x14c6 <skip_spaces>
    1938:	97 fd       	sbrc	r25, 7
    193a:	3e c0       	rjmp	.+124    	; 0x19b8 <vfscanf+0x200>
    193c:	1f 36       	cpi	r17, 0x6F	; 111
    193e:	49 f1       	breq	.+82     	; 0x1992 <vfscanf+0x1da>
    1940:	28 f4       	brcc	.+10     	; 0x194c <vfscanf+0x194>
    1942:	14 36       	cpi	r17, 0x64	; 100
    1944:	21 f1       	breq	.+72     	; 0x198e <vfscanf+0x1d6>
    1946:	19 36       	cpi	r17, 0x69	; 105
    1948:	39 f1       	breq	.+78     	; 0x1998 <vfscanf+0x1e0>
    194a:	25 c0       	rjmp	.+74     	; 0x1996 <vfscanf+0x1de>
    194c:	13 37       	cpi	r17, 0x73	; 115
    194e:	71 f0       	breq	.+28     	; 0x196c <vfscanf+0x1b4>
    1950:	15 37       	cpi	r17, 0x75	; 117
    1952:	e9 f0       	breq	.+58     	; 0x198e <vfscanf+0x1d6>
    1954:	20 c0       	rjmp	.+64     	; 0x1996 <vfscanf+0x1de>
    1956:	81 14       	cp	r8, r1
    1958:	91 04       	cpc	r9, r1
    195a:	29 f0       	breq	.+10     	; 0x1966 <vfscanf+0x1ae>
    195c:	f4 01       	movw	r30, r8
    195e:	60 82       	st	Z, r6
    1960:	c4 01       	movw	r24, r8
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	4c 01       	movw	r8, r24
    1966:	fa 94       	dec	r15
    1968:	ff 20       	and	r15, r15
    196a:	59 f0       	breq	.+22     	; 0x1982 <vfscanf+0x1ca>
    196c:	c6 01       	movw	r24, r12
    196e:	a6 d1       	rcall	.+844    	; 0x1cbc <fgetc>
    1970:	3c 01       	movw	r6, r24
    1972:	97 fd       	sbrc	r25, 7
    1974:	06 c0       	rjmp	.+12     	; 0x1982 <vfscanf+0x1ca>
    1976:	72 d1       	rcall	.+740    	; 0x1c5c <isspace>
    1978:	89 2b       	or	r24, r25
    197a:	69 f3       	breq	.-38     	; 0x1956 <vfscanf+0x19e>
    197c:	b6 01       	movw	r22, r12
    197e:	c3 01       	movw	r24, r6
    1980:	17 d2       	rcall	.+1070   	; 0x1db0 <ungetc>
    1982:	81 14       	cp	r8, r1
    1984:	91 04       	cpc	r9, r1
    1986:	a1 f0       	breq	.+40     	; 0x19b0 <vfscanf+0x1f8>
    1988:	f4 01       	movw	r30, r8
    198a:	10 82       	st	Z, r1
    198c:	11 c0       	rjmp	.+34     	; 0x19b0 <vfscanf+0x1f8>
    198e:	00 62       	ori	r16, 0x20	; 32
    1990:	03 c0       	rjmp	.+6      	; 0x1998 <vfscanf+0x1e0>
    1992:	00 61       	ori	r16, 0x10	; 16
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <vfscanf+0x1e0>
    1996:	00 64       	ori	r16, 0x40	; 64
    1998:	20 2f       	mov	r18, r16
    199a:	a4 01       	movw	r20, r8
    199c:	6f 2d       	mov	r22, r15
    199e:	c6 01       	movw	r24, r12
    19a0:	a8 dd       	rcall	.-1200   	; 0x14f2 <conv_int>
    19a2:	81 11       	cpse	r24, r1
    19a4:	05 c0       	rjmp	.+10     	; 0x19b0 <vfscanf+0x1f8>
    19a6:	f6 01       	movw	r30, r12
    19a8:	83 81       	ldd	r24, Z+3	; 0x03
    19aa:	80 73       	andi	r24, 0x30	; 48
    19ac:	29 f4       	brne	.+10     	; 0x19b8 <vfscanf+0x200>
    19ae:	06 c0       	rjmp	.+12     	; 0x19bc <vfscanf+0x204>
    19b0:	00 fd       	sbrc	r16, 0
    19b2:	18 cf       	rjmp	.-464    	; 0x17e4 <vfscanf+0x2c>
    19b4:	53 94       	inc	r5
    19b6:	16 cf       	rjmp	.-468    	; 0x17e4 <vfscanf+0x2c>
    19b8:	55 20       	and	r5, r5
    19ba:	19 f0       	breq	.+6      	; 0x19c2 <vfscanf+0x20a>
    19bc:	85 2d       	mov	r24, r5
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <vfscanf+0x20e>
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	9f ef       	ldi	r25, 0xFF	; 255
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	ff 90       	pop	r15
    19d0:	ef 90       	pop	r14
    19d2:	df 90       	pop	r13
    19d4:	cf 90       	pop	r12
    19d6:	bf 90       	pop	r11
    19d8:	af 90       	pop	r10
    19da:	9f 90       	pop	r9
    19dc:	8f 90       	pop	r8
    19de:	7f 90       	pop	r7
    19e0:	6f 90       	pop	r6
    19e2:	5f 90       	pop	r5
    19e4:	08 95       	ret

000019e6 <calloc>:
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	86 9f       	mul	r24, r22
    19f0:	80 01       	movw	r16, r0
    19f2:	87 9f       	mul	r24, r23
    19f4:	10 0d       	add	r17, r0
    19f6:	96 9f       	mul	r25, r22
    19f8:	10 0d       	add	r17, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	c8 01       	movw	r24, r16
    19fe:	0d d0       	rcall	.+26     	; 0x1a1a <malloc>
    1a00:	ec 01       	movw	r28, r24
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	21 f0       	breq	.+8      	; 0x1a0e <calloc+0x28>
    1a06:	a8 01       	movw	r20, r16
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	45 d1       	rcall	.+650    	; 0x1c98 <memset>
    1a0e:	ce 01       	movw	r24, r28
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	08 95       	ret

00001a1a <malloc>:
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	91 05       	cpc	r25, r1
    1a26:	10 f4       	brcc	.+4      	; 0x1a2c <malloc+0x12>
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <__flp>
    1a30:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <__flp+0x1>
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	a0 e0       	ldi	r26, 0x00	; 0
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	30 97       	sbiw	r30, 0x00	; 0
    1a3e:	19 f1       	breq	.+70     	; 0x1a86 <malloc+0x6c>
    1a40:	40 81       	ld	r20, Z
    1a42:	51 81       	ldd	r21, Z+1	; 0x01
    1a44:	02 81       	ldd	r16, Z+2	; 0x02
    1a46:	13 81       	ldd	r17, Z+3	; 0x03
    1a48:	48 17       	cp	r20, r24
    1a4a:	59 07       	cpc	r21, r25
    1a4c:	c8 f0       	brcs	.+50     	; 0x1a80 <malloc+0x66>
    1a4e:	84 17       	cp	r24, r20
    1a50:	95 07       	cpc	r25, r21
    1a52:	69 f4       	brne	.+26     	; 0x1a6e <malloc+0x54>
    1a54:	10 97       	sbiw	r26, 0x00	; 0
    1a56:	31 f0       	breq	.+12     	; 0x1a64 <malloc+0x4a>
    1a58:	12 96       	adiw	r26, 0x02	; 2
    1a5a:	0c 93       	st	X, r16
    1a5c:	12 97       	sbiw	r26, 0x02	; 2
    1a5e:	13 96       	adiw	r26, 0x03	; 3
    1a60:	1c 93       	st	X, r17
    1a62:	27 c0       	rjmp	.+78     	; 0x1ab2 <malloc+0x98>
    1a64:	00 93 2e 20 	sts	0x202E, r16	; 0x80202e <__flp>
    1a68:	10 93 2f 20 	sts	0x202F, r17	; 0x80202f <__flp+0x1>
    1a6c:	22 c0       	rjmp	.+68     	; 0x1ab2 <malloc+0x98>
    1a6e:	21 15       	cp	r18, r1
    1a70:	31 05       	cpc	r19, r1
    1a72:	19 f0       	breq	.+6      	; 0x1a7a <malloc+0x60>
    1a74:	42 17       	cp	r20, r18
    1a76:	53 07       	cpc	r21, r19
    1a78:	18 f4       	brcc	.+6      	; 0x1a80 <malloc+0x66>
    1a7a:	9a 01       	movw	r18, r20
    1a7c:	bd 01       	movw	r22, r26
    1a7e:	ef 01       	movw	r28, r30
    1a80:	df 01       	movw	r26, r30
    1a82:	f8 01       	movw	r30, r16
    1a84:	db cf       	rjmp	.-74     	; 0x1a3c <malloc+0x22>
    1a86:	21 15       	cp	r18, r1
    1a88:	31 05       	cpc	r19, r1
    1a8a:	f9 f0       	breq	.+62     	; 0x1aca <malloc+0xb0>
    1a8c:	28 1b       	sub	r18, r24
    1a8e:	39 0b       	sbc	r19, r25
    1a90:	24 30       	cpi	r18, 0x04	; 4
    1a92:	31 05       	cpc	r19, r1
    1a94:	80 f4       	brcc	.+32     	; 0x1ab6 <malloc+0x9c>
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9a:	61 15       	cp	r22, r1
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	21 f0       	breq	.+8      	; 0x1aa8 <malloc+0x8e>
    1aa0:	fb 01       	movw	r30, r22
    1aa2:	82 83       	std	Z+2, r24	; 0x02
    1aa4:	93 83       	std	Z+3, r25	; 0x03
    1aa6:	04 c0       	rjmp	.+8      	; 0x1ab0 <malloc+0x96>
    1aa8:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__flp>
    1aac:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__flp+0x1>
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	32 96       	adiw	r30, 0x02	; 2
    1ab4:	44 c0       	rjmp	.+136    	; 0x1b3e <malloc+0x124>
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e2 0f       	add	r30, r18
    1aba:	f3 1f       	adc	r31, r19
    1abc:	81 93       	st	Z+, r24
    1abe:	91 93       	st	Z+, r25
    1ac0:	22 50       	subi	r18, 0x02	; 2
    1ac2:	31 09       	sbc	r19, r1
    1ac4:	28 83       	st	Y, r18
    1ac6:	39 83       	std	Y+1, r19	; 0x01
    1ac8:	3a c0       	rjmp	.+116    	; 0x1b3e <malloc+0x124>
    1aca:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    1ace:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    1ad2:	23 2b       	or	r18, r19
    1ad4:	41 f4       	brne	.+16     	; 0x1ae6 <malloc+0xcc>
    1ad6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1ada:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    1ade:	20 93 2c 20 	sts	0x202C, r18	; 0x80202c <__brkval>
    1ae2:	30 93 2d 20 	sts	0x202D, r19	; 0x80202d <__brkval+0x1>
    1ae6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1aea:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    1aee:	21 15       	cp	r18, r1
    1af0:	31 05       	cpc	r19, r1
    1af2:	41 f4       	brne	.+16     	; 0x1b04 <malloc+0xea>
    1af4:	2d b7       	in	r18, 0x3d	; 61
    1af6:	3e b7       	in	r19, 0x3e	; 62
    1af8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1afc:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1b00:	24 1b       	sub	r18, r20
    1b02:	35 0b       	sbc	r19, r21
    1b04:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <__brkval>
    1b08:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <__brkval+0x1>
    1b0c:	e2 17       	cp	r30, r18
    1b0e:	f3 07       	cpc	r31, r19
    1b10:	a0 f4       	brcc	.+40     	; 0x1b3a <malloc+0x120>
    1b12:	2e 1b       	sub	r18, r30
    1b14:	3f 0b       	sbc	r19, r31
    1b16:	28 17       	cp	r18, r24
    1b18:	39 07       	cpc	r19, r25
    1b1a:	78 f0       	brcs	.+30     	; 0x1b3a <malloc+0x120>
    1b1c:	ac 01       	movw	r20, r24
    1b1e:	4e 5f       	subi	r20, 0xFE	; 254
    1b20:	5f 4f       	sbci	r21, 0xFF	; 255
    1b22:	24 17       	cp	r18, r20
    1b24:	35 07       	cpc	r19, r21
    1b26:	48 f0       	brcs	.+18     	; 0x1b3a <malloc+0x120>
    1b28:	4e 0f       	add	r20, r30
    1b2a:	5f 1f       	adc	r21, r31
    1b2c:	40 93 2c 20 	sts	0x202C, r20	; 0x80202c <__brkval>
    1b30:	50 93 2d 20 	sts	0x202D, r21	; 0x80202d <__brkval+0x1>
    1b34:	81 93       	st	Z+, r24
    1b36:	91 93       	st	Z+, r25
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <malloc+0x124>
    1b3a:	e0 e0       	ldi	r30, 0x00	; 0
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	cf 01       	movw	r24, r30
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	08 95       	ret

00001b4a <free>:
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <free+0xa>
    1b52:	81 c0       	rjmp	.+258    	; 0x1c56 <free+0x10c>
    1b54:	fc 01       	movw	r30, r24
    1b56:	32 97       	sbiw	r30, 0x02	; 2
    1b58:	12 82       	std	Z+2, r1	; 0x02
    1b5a:	13 82       	std	Z+3, r1	; 0x03
    1b5c:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <__flp>
    1b60:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <__flp+0x1>
    1b64:	10 97       	sbiw	r26, 0x00	; 0
    1b66:	81 f4       	brne	.+32     	; 0x1b88 <free+0x3e>
    1b68:	20 81       	ld	r18, Z
    1b6a:	31 81       	ldd	r19, Z+1	; 0x01
    1b6c:	82 0f       	add	r24, r18
    1b6e:	93 1f       	adc	r25, r19
    1b70:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    1b74:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    1b78:	28 17       	cp	r18, r24
    1b7a:	39 07       	cpc	r19, r25
    1b7c:	51 f5       	brne	.+84     	; 0x1bd2 <free+0x88>
    1b7e:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <__brkval>
    1b82:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <__brkval+0x1>
    1b86:	67 c0       	rjmp	.+206    	; 0x1c56 <free+0x10c>
    1b88:	ed 01       	movw	r28, r26
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	ce 17       	cp	r28, r30
    1b90:	df 07       	cpc	r29, r31
    1b92:	40 f4       	brcc	.+16     	; 0x1ba4 <free+0x5a>
    1b94:	4a 81       	ldd	r20, Y+2	; 0x02
    1b96:	5b 81       	ldd	r21, Y+3	; 0x03
    1b98:	9e 01       	movw	r18, r28
    1b9a:	41 15       	cp	r20, r1
    1b9c:	51 05       	cpc	r21, r1
    1b9e:	f1 f0       	breq	.+60     	; 0x1bdc <free+0x92>
    1ba0:	ea 01       	movw	r28, r20
    1ba2:	f5 cf       	rjmp	.-22     	; 0x1b8e <free+0x44>
    1ba4:	c2 83       	std	Z+2, r28	; 0x02
    1ba6:	d3 83       	std	Z+3, r29	; 0x03
    1ba8:	40 81       	ld	r20, Z
    1baa:	51 81       	ldd	r21, Z+1	; 0x01
    1bac:	84 0f       	add	r24, r20
    1bae:	95 1f       	adc	r25, r21
    1bb0:	c8 17       	cp	r28, r24
    1bb2:	d9 07       	cpc	r29, r25
    1bb4:	59 f4       	brne	.+22     	; 0x1bcc <free+0x82>
    1bb6:	88 81       	ld	r24, Y
    1bb8:	99 81       	ldd	r25, Y+1	; 0x01
    1bba:	84 0f       	add	r24, r20
    1bbc:	95 1f       	adc	r25, r21
    1bbe:	02 96       	adiw	r24, 0x02	; 2
    1bc0:	80 83       	st	Z, r24
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc8:	82 83       	std	Z+2, r24	; 0x02
    1bca:	93 83       	std	Z+3, r25	; 0x03
    1bcc:	21 15       	cp	r18, r1
    1bce:	31 05       	cpc	r19, r1
    1bd0:	29 f4       	brne	.+10     	; 0x1bdc <free+0x92>
    1bd2:	e0 93 2e 20 	sts	0x202E, r30	; 0x80202e <__flp>
    1bd6:	f0 93 2f 20 	sts	0x202F, r31	; 0x80202f <__flp+0x1>
    1bda:	3d c0       	rjmp	.+122    	; 0x1c56 <free+0x10c>
    1bdc:	e9 01       	movw	r28, r18
    1bde:	ea 83       	std	Y+2, r30	; 0x02
    1be0:	fb 83       	std	Y+3, r31	; 0x03
    1be2:	49 91       	ld	r20, Y+
    1be4:	59 91       	ld	r21, Y+
    1be6:	c4 0f       	add	r28, r20
    1be8:	d5 1f       	adc	r29, r21
    1bea:	ec 17       	cp	r30, r28
    1bec:	fd 07       	cpc	r31, r29
    1bee:	61 f4       	brne	.+24     	; 0x1c08 <free+0xbe>
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	84 0f       	add	r24, r20
    1bf6:	95 1f       	adc	r25, r21
    1bf8:	02 96       	adiw	r24, 0x02	; 2
    1bfa:	e9 01       	movw	r28, r18
    1bfc:	88 83       	st	Y, r24
    1bfe:	99 83       	std	Y+1, r25	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	9b 83       	std	Y+3, r25	; 0x03
    1c08:	e0 e0       	ldi	r30, 0x00	; 0
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	12 96       	adiw	r26, 0x02	; 2
    1c0e:	8d 91       	ld	r24, X+
    1c10:	9c 91       	ld	r25, X
    1c12:	13 97       	sbiw	r26, 0x03	; 3
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	19 f0       	breq	.+6      	; 0x1c1e <free+0xd4>
    1c18:	fd 01       	movw	r30, r26
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	f7 cf       	rjmp	.-18     	; 0x1c0c <free+0xc2>
    1c1e:	8d 91       	ld	r24, X+
    1c20:	9c 91       	ld	r25, X
    1c22:	11 97       	sbiw	r26, 0x01	; 1
    1c24:	9d 01       	movw	r18, r26
    1c26:	2e 5f       	subi	r18, 0xFE	; 254
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	82 0f       	add	r24, r18
    1c2c:	93 1f       	adc	r25, r19
    1c2e:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    1c32:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    1c36:	28 17       	cp	r18, r24
    1c38:	39 07       	cpc	r19, r25
    1c3a:	69 f4       	brne	.+26     	; 0x1c56 <free+0x10c>
    1c3c:	30 97       	sbiw	r30, 0x00	; 0
    1c3e:	29 f4       	brne	.+10     	; 0x1c4a <free+0x100>
    1c40:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <__flp>
    1c44:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <__flp+0x1>
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <free+0x104>
    1c4a:	12 82       	std	Z+2, r1	; 0x02
    1c4c:	13 82       	std	Z+3, r1	; 0x03
    1c4e:	a0 93 2c 20 	sts	0x202C, r26	; 0x80202c <__brkval>
    1c52:	b0 93 2d 20 	sts	0x202D, r27	; 0x80202d <__brkval+0x1>
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	08 95       	ret

00001c5c <isspace>:
    1c5c:	91 11       	cpse	r25, r1
    1c5e:	1f c1       	rjmp	.+574    	; 0x1e9e <__ctype_isfalse>
    1c60:	80 32       	cpi	r24, 0x20	; 32
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <isspace+0xe>
    1c64:	89 50       	subi	r24, 0x09	; 9
    1c66:	85 50       	subi	r24, 0x05	; 5
    1c68:	d0 f7       	brcc	.-12     	; 0x1c5e <isspace+0x2>
    1c6a:	08 95       	ret

00001c6c <strchr_P>:
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	05 90       	lpm	r0, Z+
    1c70:	06 16       	cp	r0, r22
    1c72:	21 f0       	breq	.+8      	; 0x1c7c <strchr_P+0x10>
    1c74:	00 20       	and	r0, r0
    1c76:	d9 f7       	brne	.-10     	; 0x1c6e <strchr_P+0x2>
    1c78:	c0 01       	movw	r24, r0
    1c7a:	08 95       	ret
    1c7c:	31 97       	sbiw	r30, 0x01	; 1
    1c7e:	cf 01       	movw	r24, r30
    1c80:	08 95       	ret

00001c82 <strnlen_P>:
    1c82:	fc 01       	movw	r30, r24
    1c84:	05 90       	lpm	r0, Z+
    1c86:	61 50       	subi	r22, 0x01	; 1
    1c88:	70 40       	sbci	r23, 0x00	; 0
    1c8a:	01 10       	cpse	r0, r1
    1c8c:	d8 f7       	brcc	.-10     	; 0x1c84 <strnlen_P+0x2>
    1c8e:	80 95       	com	r24
    1c90:	90 95       	com	r25
    1c92:	8e 0f       	add	r24, r30
    1c94:	9f 1f       	adc	r25, r31
    1c96:	08 95       	ret

00001c98 <memset>:
    1c98:	dc 01       	movw	r26, r24
    1c9a:	01 c0       	rjmp	.+2      	; 0x1c9e <memset+0x6>
    1c9c:	6d 93       	st	X+, r22
    1c9e:	41 50       	subi	r20, 0x01	; 1
    1ca0:	50 40       	sbci	r21, 0x00	; 0
    1ca2:	e0 f7       	brcc	.-8      	; 0x1c9c <memset+0x4>
    1ca4:	08 95       	ret

00001ca6 <strnlen>:
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	61 50       	subi	r22, 0x01	; 1
    1caa:	70 40       	sbci	r23, 0x00	; 0
    1cac:	01 90       	ld	r0, Z+
    1cae:	01 10       	cpse	r0, r1
    1cb0:	d8 f7       	brcc	.-10     	; 0x1ca8 <strnlen+0x2>
    1cb2:	80 95       	com	r24
    1cb4:	90 95       	com	r25
    1cb6:	8e 0f       	add	r24, r30
    1cb8:	9f 1f       	adc	r25, r31
    1cba:	08 95       	ret

00001cbc <fgetc>:
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	ec 01       	movw	r28, r24
    1cc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc4:	20 ff       	sbrs	r18, 0
    1cc6:	33 c0       	rjmp	.+102    	; 0x1d2e <fgetc+0x72>
    1cc8:	26 ff       	sbrs	r18, 6
    1cca:	0a c0       	rjmp	.+20     	; 0x1ce0 <fgetc+0x24>
    1ccc:	2f 7b       	andi	r18, 0xBF	; 191
    1cce:	2b 83       	std	Y+3, r18	; 0x03
    1cd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	8e 83       	std	Y+6, r24	; 0x06
    1cd8:	9f 83       	std	Y+7, r25	; 0x07
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	29 c0       	rjmp	.+82     	; 0x1d32 <fgetc+0x76>
    1ce0:	22 ff       	sbrs	r18, 2
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <fgetc+0x46>
    1ce4:	e8 81       	ld	r30, Y
    1ce6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ce8:	80 81       	ld	r24, Z
    1cea:	08 2e       	mov	r0, r24
    1cec:	00 0c       	add	r0, r0
    1cee:	99 0b       	sbc	r25, r25
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	19 f4       	brne	.+6      	; 0x1cfa <fgetc+0x3e>
    1cf4:	20 62       	ori	r18, 0x20	; 32
    1cf6:	2b 83       	std	Y+3, r18	; 0x03
    1cf8:	1a c0       	rjmp	.+52     	; 0x1d2e <fgetc+0x72>
    1cfa:	31 96       	adiw	r30, 0x01	; 1
    1cfc:	e8 83       	st	Y, r30
    1cfe:	f9 83       	std	Y+1, r31	; 0x01
    1d00:	0e c0       	rjmp	.+28     	; 0x1d1e <fgetc+0x62>
    1d02:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d04:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d06:	19 95       	eicall
    1d08:	97 ff       	sbrs	r25, 7
    1d0a:	09 c0       	rjmp	.+18     	; 0x1d1e <fgetc+0x62>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <fgetc+0x5a>
    1d12:	80 e2       	ldi	r24, 0x20	; 32
    1d14:	01 c0       	rjmp	.+2      	; 0x1d18 <fgetc+0x5c>
    1d16:	80 e1       	ldi	r24, 0x10	; 16
    1d18:	82 2b       	or	r24, r18
    1d1a:	8b 83       	std	Y+3, r24	; 0x03
    1d1c:	08 c0       	rjmp	.+16     	; 0x1d2e <fgetc+0x72>
    1d1e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d20:	3f 81       	ldd	r19, Y+7	; 0x07
    1d22:	2f 5f       	subi	r18, 0xFF	; 255
    1d24:	3f 4f       	sbci	r19, 0xFF	; 255
    1d26:	2e 83       	std	Y+6, r18	; 0x06
    1d28:	3f 83       	std	Y+7, r19	; 0x07
    1d2a:	99 27       	eor	r25, r25
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <fgetc+0x76>
    1d2e:	8f ef       	ldi	r24, 0xFF	; 255
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	08 95       	ret

00001d38 <fputc>:
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	fb 01       	movw	r30, r22
    1d42:	23 81       	ldd	r18, Z+3	; 0x03
    1d44:	21 fd       	sbrc	r18, 1
    1d46:	03 c0       	rjmp	.+6      	; 0x1d4e <fputc+0x16>
    1d48:	8f ef       	ldi	r24, 0xFF	; 255
    1d4a:	9f ef       	ldi	r25, 0xFF	; 255
    1d4c:	2c c0       	rjmp	.+88     	; 0x1da6 <fputc+0x6e>
    1d4e:	22 ff       	sbrs	r18, 2
    1d50:	16 c0       	rjmp	.+44     	; 0x1d7e <fputc+0x46>
    1d52:	46 81       	ldd	r20, Z+6	; 0x06
    1d54:	57 81       	ldd	r21, Z+7	; 0x07
    1d56:	24 81       	ldd	r18, Z+4	; 0x04
    1d58:	35 81       	ldd	r19, Z+5	; 0x05
    1d5a:	42 17       	cp	r20, r18
    1d5c:	53 07       	cpc	r21, r19
    1d5e:	44 f4       	brge	.+16     	; 0x1d70 <fputc+0x38>
    1d60:	a0 81       	ld	r26, Z
    1d62:	b1 81       	ldd	r27, Z+1	; 0x01
    1d64:	9d 01       	movw	r18, r26
    1d66:	2f 5f       	subi	r18, 0xFF	; 255
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	20 83       	st	Z, r18
    1d6c:	31 83       	std	Z+1, r19	; 0x01
    1d6e:	8c 93       	st	X, r24
    1d70:	26 81       	ldd	r18, Z+6	; 0x06
    1d72:	37 81       	ldd	r19, Z+7	; 0x07
    1d74:	2f 5f       	subi	r18, 0xFF	; 255
    1d76:	3f 4f       	sbci	r19, 0xFF	; 255
    1d78:	26 83       	std	Z+6, r18	; 0x06
    1d7a:	37 83       	std	Z+7, r19	; 0x07
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <fputc+0x6e>
    1d7e:	8b 01       	movw	r16, r22
    1d80:	ec 01       	movw	r28, r24
    1d82:	fb 01       	movw	r30, r22
    1d84:	00 84       	ldd	r0, Z+8	; 0x08
    1d86:	f1 85       	ldd	r31, Z+9	; 0x09
    1d88:	e0 2d       	mov	r30, r0
    1d8a:	19 95       	eicall
    1d8c:	89 2b       	or	r24, r25
    1d8e:	e1 f6       	brne	.-72     	; 0x1d48 <fputc+0x10>
    1d90:	d8 01       	movw	r26, r16
    1d92:	16 96       	adiw	r26, 0x06	; 6
    1d94:	8d 91       	ld	r24, X+
    1d96:	9c 91       	ld	r25, X
    1d98:	17 97       	sbiw	r26, 0x07	; 7
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	16 96       	adiw	r26, 0x06	; 6
    1d9e:	8d 93       	st	X+, r24
    1da0:	9c 93       	st	X, r25
    1da2:	17 97       	sbiw	r26, 0x07	; 7
    1da4:	ce 01       	movw	r24, r28
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	08 95       	ret

00001db0 <ungetc>:
    1db0:	fb 01       	movw	r30, r22
    1db2:	23 81       	ldd	r18, Z+3	; 0x03
    1db4:	20 ff       	sbrs	r18, 0
    1db6:	12 c0       	rjmp	.+36     	; 0x1ddc <ungetc+0x2c>
    1db8:	26 fd       	sbrc	r18, 6
    1dba:	10 c0       	rjmp	.+32     	; 0x1ddc <ungetc+0x2c>
    1dbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	93 07       	cpc	r25, r19
    1dc2:	61 f0       	breq	.+24     	; 0x1ddc <ungetc+0x2c>
    1dc4:	82 83       	std	Z+2, r24	; 0x02
    1dc6:	2f 7d       	andi	r18, 0xDF	; 223
    1dc8:	20 64       	ori	r18, 0x40	; 64
    1dca:	23 83       	std	Z+3, r18	; 0x03
    1dcc:	26 81       	ldd	r18, Z+6	; 0x06
    1dce:	37 81       	ldd	r19, Z+7	; 0x07
    1dd0:	21 50       	subi	r18, 0x01	; 1
    1dd2:	31 09       	sbc	r19, r1
    1dd4:	26 83       	std	Z+6, r18	; 0x06
    1dd6:	37 83       	std	Z+7, r19	; 0x07
    1dd8:	99 27       	eor	r25, r25
    1dda:	08 95       	ret
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	9f ef       	ldi	r25, 0xFF	; 255
    1de0:	08 95       	ret

00001de2 <__ultoa_invert>:
    1de2:	fa 01       	movw	r30, r20
    1de4:	aa 27       	eor	r26, r26
    1de6:	28 30       	cpi	r18, 0x08	; 8
    1de8:	51 f1       	breq	.+84     	; 0x1e3e <__ultoa_invert+0x5c>
    1dea:	20 31       	cpi	r18, 0x10	; 16
    1dec:	81 f1       	breq	.+96     	; 0x1e4e <__ultoa_invert+0x6c>
    1dee:	e8 94       	clt
    1df0:	6f 93       	push	r22
    1df2:	6e 7f       	andi	r22, 0xFE	; 254
    1df4:	6e 5f       	subi	r22, 0xFE	; 254
    1df6:	7f 4f       	sbci	r23, 0xFF	; 255
    1df8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfc:	af 4f       	sbci	r26, 0xFF	; 255
    1dfe:	b1 e0       	ldi	r27, 0x01	; 1
    1e00:	3e d0       	rcall	.+124    	; 0x1e7e <__ultoa_invert+0x9c>
    1e02:	b4 e0       	ldi	r27, 0x04	; 4
    1e04:	3c d0       	rcall	.+120    	; 0x1e7e <__ultoa_invert+0x9c>
    1e06:	67 0f       	add	r22, r23
    1e08:	78 1f       	adc	r23, r24
    1e0a:	89 1f       	adc	r24, r25
    1e0c:	9a 1f       	adc	r25, r26
    1e0e:	a1 1d       	adc	r26, r1
    1e10:	68 0f       	add	r22, r24
    1e12:	79 1f       	adc	r23, r25
    1e14:	8a 1f       	adc	r24, r26
    1e16:	91 1d       	adc	r25, r1
    1e18:	a1 1d       	adc	r26, r1
    1e1a:	6a 0f       	add	r22, r26
    1e1c:	71 1d       	adc	r23, r1
    1e1e:	81 1d       	adc	r24, r1
    1e20:	91 1d       	adc	r25, r1
    1e22:	a1 1d       	adc	r26, r1
    1e24:	20 d0       	rcall	.+64     	; 0x1e66 <__ultoa_invert+0x84>
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <__ultoa_invert+0x48>
    1e28:	68 94       	set
    1e2a:	3f 91       	pop	r19
    1e2c:	2a e0       	ldi	r18, 0x0A	; 10
    1e2e:	26 9f       	mul	r18, r22
    1e30:	11 24       	eor	r1, r1
    1e32:	30 19       	sub	r19, r0
    1e34:	30 5d       	subi	r19, 0xD0	; 208
    1e36:	31 93       	st	Z+, r19
    1e38:	de f6       	brtc	.-74     	; 0x1df0 <__ultoa_invert+0xe>
    1e3a:	cf 01       	movw	r24, r30
    1e3c:	08 95       	ret
    1e3e:	46 2f       	mov	r20, r22
    1e40:	47 70       	andi	r20, 0x07	; 7
    1e42:	40 5d       	subi	r20, 0xD0	; 208
    1e44:	41 93       	st	Z+, r20
    1e46:	b3 e0       	ldi	r27, 0x03	; 3
    1e48:	0f d0       	rcall	.+30     	; 0x1e68 <__ultoa_invert+0x86>
    1e4a:	c9 f7       	brne	.-14     	; 0x1e3e <__ultoa_invert+0x5c>
    1e4c:	f6 cf       	rjmp	.-20     	; 0x1e3a <__ultoa_invert+0x58>
    1e4e:	46 2f       	mov	r20, r22
    1e50:	4f 70       	andi	r20, 0x0F	; 15
    1e52:	40 5d       	subi	r20, 0xD0	; 208
    1e54:	4a 33       	cpi	r20, 0x3A	; 58
    1e56:	18 f0       	brcs	.+6      	; 0x1e5e <__ultoa_invert+0x7c>
    1e58:	49 5d       	subi	r20, 0xD9	; 217
    1e5a:	31 fd       	sbrc	r19, 1
    1e5c:	40 52       	subi	r20, 0x20	; 32
    1e5e:	41 93       	st	Z+, r20
    1e60:	02 d0       	rcall	.+4      	; 0x1e66 <__ultoa_invert+0x84>
    1e62:	a9 f7       	brne	.-22     	; 0x1e4e <__ultoa_invert+0x6c>
    1e64:	ea cf       	rjmp	.-44     	; 0x1e3a <__ultoa_invert+0x58>
    1e66:	b4 e0       	ldi	r27, 0x04	; 4
    1e68:	a6 95       	lsr	r26
    1e6a:	97 95       	ror	r25
    1e6c:	87 95       	ror	r24
    1e6e:	77 95       	ror	r23
    1e70:	67 95       	ror	r22
    1e72:	ba 95       	dec	r27
    1e74:	c9 f7       	brne	.-14     	; 0x1e68 <__ultoa_invert+0x86>
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	61 05       	cpc	r22, r1
    1e7a:	71 05       	cpc	r23, r1
    1e7c:	08 95       	ret
    1e7e:	9b 01       	movw	r18, r22
    1e80:	ac 01       	movw	r20, r24
    1e82:	0a 2e       	mov	r0, r26
    1e84:	06 94       	lsr	r0
    1e86:	57 95       	ror	r21
    1e88:	47 95       	ror	r20
    1e8a:	37 95       	ror	r19
    1e8c:	27 95       	ror	r18
    1e8e:	ba 95       	dec	r27
    1e90:	c9 f7       	brne	.-14     	; 0x1e84 <__ultoa_invert+0xa2>
    1e92:	62 0f       	add	r22, r18
    1e94:	73 1f       	adc	r23, r19
    1e96:	84 1f       	adc	r24, r20
    1e98:	95 1f       	adc	r25, r21
    1e9a:	a0 1d       	adc	r26, r0
    1e9c:	08 95       	ret

00001e9e <__ctype_isfalse>:
    1e9e:	99 27       	eor	r25, r25
    1ea0:	88 27       	eor	r24, r24

00001ea2 <__ctype_istrue>:
    1ea2:	08 95       	ret

00001ea4 <_exit>:
    1ea4:	f8 94       	cli

00001ea6 <__stop_program>:
    1ea6:	ff cf       	rjmp	.-2      	; 0x1ea6 <__stop_program>
