
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002744  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00802000  00002744  000027d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00802014  00802014  000027ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002848  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00002890  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009cb0  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000429a  00000000  00000000  0000c748  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003dac  00000000  00000000  000109e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  00014790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f446  00000000  00000000  00014ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024ff  00000000  00000000  0004430e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00046810  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a587  00000000  00000000  00046a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	84 c1       	rjmp	.+776    	; 0x30a <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c1       	rjmp	.+832    	; 0x34a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c1       	rjmp	.+828    	; 0x34a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c1       	rjmp	.+824    	; 0x34a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c1       	rjmp	.+820    	; 0x34a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c1       	rjmp	.+808    	; 0x34a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c1       	rjmp	.+804    	; 0x34a <__bad_interrupt>
      26:	00 00       	nop
      28:	90 c1       	rjmp	.+800    	; 0x34a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8e c1       	rjmp	.+796    	; 0x34a <__bad_interrupt>
      2e:	00 00       	nop
      30:	8c c1       	rjmp	.+792    	; 0x34a <__bad_interrupt>
      32:	00 00       	nop
      34:	8a c1       	rjmp	.+788    	; 0x34a <__bad_interrupt>
      36:	00 00       	nop
      38:	88 c1       	rjmp	.+784    	; 0x34a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	86 c1       	rjmp	.+780    	; 0x34a <__bad_interrupt>
      3e:	00 00       	nop
      40:	84 c1       	rjmp	.+776    	; 0x34a <__bad_interrupt>
      42:	00 00       	nop
      44:	82 c1       	rjmp	.+772    	; 0x34a <__bad_interrupt>
      46:	00 00       	nop
      48:	80 c1       	rjmp	.+768    	; 0x34a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7e c1       	rjmp	.+764    	; 0x34a <__bad_interrupt>
      4e:	00 00       	nop
      50:	7c c1       	rjmp	.+760    	; 0x34a <__bad_interrupt>
      52:	00 00       	nop
      54:	7a c1       	rjmp	.+756    	; 0x34a <__bad_interrupt>
      56:	00 00       	nop
      58:	78 c1       	rjmp	.+752    	; 0x34a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	76 c1       	rjmp	.+748    	; 0x34a <__bad_interrupt>
      5e:	00 00       	nop
      60:	74 c1       	rjmp	.+744    	; 0x34a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c1       	rjmp	.+740    	; 0x34a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c1       	rjmp	.+736    	; 0x34a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c1       	rjmp	.+732    	; 0x34a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c1       	rjmp	.+728    	; 0x34a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c1       	rjmp	.+724    	; 0x34a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c1       	rjmp	.+720    	; 0x34a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c1       	rjmp	.+716    	; 0x34a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c1       	rjmp	.+712    	; 0x34a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c1       	rjmp	.+708    	; 0x34a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c1       	rjmp	.+704    	; 0x34a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c1       	rjmp	.+700    	; 0x34a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c1       	rjmp	.+696    	; 0x34a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c1       	rjmp	.+692    	; 0x34a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c1       	rjmp	.+688    	; 0x34a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d2 c4       	rjmp	.+2468   	; 0xa42 <__vector_39>
      9e:	00 00       	nop
      a0:	02 c5       	rjmp	.+2564   	; 0xaa6 <__vector_40>
      a2:	00 00       	nop
      a4:	32 c5       	rjmp	.+2660   	; 0xb0a <__vector_41>
      a6:	00 00       	nop
      a8:	62 c5       	rjmp	.+2756   	; 0xb6e <__vector_42>
      aa:	00 00       	nop
      ac:	4e c1       	rjmp	.+668    	; 0x34a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c1       	rjmp	.+664    	; 0x34a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c1       	rjmp	.+660    	; 0x34a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	48 c1       	rjmp	.+656    	; 0x34a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	46 c1       	rjmp	.+652    	; 0x34a <__bad_interrupt>
      be:	00 00       	nop
      c0:	44 c1       	rjmp	.+648    	; 0x34a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	42 c1       	rjmp	.+644    	; 0x34a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	40 c1       	rjmp	.+640    	; 0x34a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3e c1       	rjmp	.+636    	; 0x34a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3c c1       	rjmp	.+632    	; 0x34a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3a c1       	rjmp	.+628    	; 0x34a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	38 c1       	rjmp	.+624    	; 0x34a <__bad_interrupt>
      da:	00 00       	nop
      dc:	36 c1       	rjmp	.+620    	; 0x34a <__bad_interrupt>
      de:	00 00       	nop
      e0:	34 c1       	rjmp	.+616    	; 0x34a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	32 c1       	rjmp	.+612    	; 0x34a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	30 c1       	rjmp	.+608    	; 0x34a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2e c1       	rjmp	.+604    	; 0x34a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2c c1       	rjmp	.+600    	; 0x34a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	2a c1       	rjmp	.+596    	; 0x34a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	28 c1       	rjmp	.+592    	; 0x34a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	26 c1       	rjmp	.+588    	; 0x34a <__bad_interrupt>
      fe:	00 00       	nop
     100:	24 c1       	rjmp	.+584    	; 0x34a <__bad_interrupt>
     102:	00 00       	nop
     104:	22 c1       	rjmp	.+580    	; 0x34a <__bad_interrupt>
     106:	00 00       	nop
     108:	20 c1       	rjmp	.+576    	; 0x34a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1e c1       	rjmp	.+572    	; 0x34a <__bad_interrupt>
     10e:	00 00       	nop
     110:	1c c1       	rjmp	.+568    	; 0x34a <__bad_interrupt>
     112:	00 00       	nop
     114:	1a c1       	rjmp	.+564    	; 0x34a <__bad_interrupt>
     116:	00 00       	nop
     118:	18 c1       	rjmp	.+560    	; 0x34a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ca c3       	rjmp	.+1940   	; 0x8b2 <__vector_71>
     11e:	00 00       	nop
     120:	fa c3       	rjmp	.+2036   	; 0x916 <__vector_72>
     122:	00 00       	nop
     124:	2a c4       	rjmp	.+2132   	; 0x97a <__vector_73>
     126:	00 00       	nop
     128:	5a c4       	rjmp	.+2228   	; 0x9de <__vector_74>
     12a:	00 00       	nop
     12c:	0e c1       	rjmp	.+540    	; 0x34a <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c c1       	rjmp	.+536    	; 0x34a <__bad_interrupt>
     132:	00 00       	nop
     134:	0a c1       	rjmp	.+532    	; 0x34a <__bad_interrupt>
     136:	00 00       	nop
     138:	08 c1       	rjmp	.+528    	; 0x34a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	06 c1       	rjmp	.+524    	; 0x34a <__bad_interrupt>
     13e:	00 00       	nop
     140:	04 c1       	rjmp	.+520    	; 0x34a <__bad_interrupt>
     142:	00 00       	nop
     144:	02 c1       	rjmp	.+516    	; 0x34a <__bad_interrupt>
     146:	00 00       	nop
     148:	00 c1       	rjmp	.+512    	; 0x34a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	fe c0       	rjmp	.+508    	; 0x34a <__bad_interrupt>
     14e:	00 00       	nop
     150:	fc c0       	rjmp	.+504    	; 0x34a <__bad_interrupt>
     152:	00 00       	nop
     154:	fa c0       	rjmp	.+500    	; 0x34a <__bad_interrupt>
     156:	00 00       	nop
     158:	f8 c0       	rjmp	.+496    	; 0x34a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f6 c0       	rjmp	.+492    	; 0x34a <__bad_interrupt>
     15e:	00 00       	nop
     160:	f4 c0       	rjmp	.+488    	; 0x34a <__bad_interrupt>
     162:	00 00       	nop
     164:	f2 c0       	rjmp	.+484    	; 0x34a <__bad_interrupt>
     166:	00 00       	nop
     168:	f0 c0       	rjmp	.+480    	; 0x34a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ee c0       	rjmp	.+476    	; 0x34a <__bad_interrupt>
     16e:	00 00       	nop
     170:	ec c0       	rjmp	.+472    	; 0x34a <__bad_interrupt>
     172:	00 00       	nop
     174:	ea c0       	rjmp	.+468    	; 0x34a <__bad_interrupt>
     176:	00 00       	nop
     178:	e8 c0       	rjmp	.+464    	; 0x34a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e6 c0       	rjmp	.+460    	; 0x34a <__bad_interrupt>
     17e:	00 00       	nop
     180:	e4 c0       	rjmp	.+456    	; 0x34a <__bad_interrupt>
     182:	00 00       	nop
     184:	e2 c0       	rjmp	.+452    	; 0x34a <__bad_interrupt>
     186:	00 00       	nop
     188:	e0 c0       	rjmp	.+448    	; 0x34a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	de c0       	rjmp	.+444    	; 0x34a <__bad_interrupt>
     18e:	00 00       	nop
     190:	dc c0       	rjmp	.+440    	; 0x34a <__bad_interrupt>
     192:	00 00       	nop
     194:	da c0       	rjmp	.+436    	; 0x34a <__bad_interrupt>
     196:	00 00       	nop
     198:	d8 c0       	rjmp	.+432    	; 0x34a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d6 c0       	rjmp	.+428    	; 0x34a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d4 c0       	rjmp	.+424    	; 0x34a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d2 c0       	rjmp	.+420    	; 0x34a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	ce c0       	rjmp	.+412    	; 0x34a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	cc c0       	rjmp	.+408    	; 0x34a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	ca c0       	rjmp	.+404    	; 0x34a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c8 c0       	rjmp	.+400    	; 0x34a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c6 c0       	rjmp	.+396    	; 0x34a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	c4 c0       	rjmp	.+392    	; 0x34a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	c2 c0       	rjmp	.+388    	; 0x34a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	c0 c0       	rjmp	.+384    	; 0x34a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	be c0       	rjmp	.+380    	; 0x34a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	bc c0       	rjmp	.+376    	; 0x34a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	ba c0       	rjmp	.+372    	; 0x34a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b8 c0       	rjmp	.+368    	; 0x34a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b6 c0       	rjmp	.+364    	; 0x34a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	b4 c0       	rjmp	.+360    	; 0x34a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b2 c0       	rjmp	.+356    	; 0x34a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b0 c0       	rjmp	.+352    	; 0x34a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	ae c0       	rjmp	.+348    	; 0x34a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ac c0       	rjmp	.+344    	; 0x34a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	aa c0       	rjmp	.+340    	; 0x34a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a8 c0       	rjmp	.+336    	; 0x34a <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2332>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__c.2474>:
     2fe:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000030a <__ctors_end>:
     30a:	11 24       	eor	r1, r1
     30c:	1f be       	out	0x3f, r1	; 63
     30e:	cf ef       	ldi	r28, 0xFF	; 255
     310:	cd bf       	out	0x3d, r28	; 61
     312:	df e5       	ldi	r29, 0x5F	; 95
     314:	de bf       	out	0x3e, r29	; 62
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	0c bf       	out	0x3c, r16	; 60

0000031a <__do_copy_data>:
     31a:	10 e2       	ldi	r17, 0x20	; 32
     31c:	a0 e0       	ldi	r26, 0x00	; 0
     31e:	b0 e2       	ldi	r27, 0x20	; 32
     320:	e4 e4       	ldi	r30, 0x44	; 68
     322:	f7 e2       	ldi	r31, 0x27	; 39
     324:	00 e0       	ldi	r16, 0x00	; 0
     326:	0b bf       	out	0x3b, r16	; 59
     328:	02 c0       	rjmp	.+4      	; 0x32e <__do_copy_data+0x14>
     32a:	07 90       	elpm	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	a4 31       	cpi	r26, 0x14	; 20
     330:	b1 07       	cpc	r27, r17
     332:	d9 f7       	brne	.-10     	; 0x32a <__do_copy_data+0x10>

00000334 <__do_clear_bss>:
     334:	20 e2       	ldi	r18, 0x20	; 32
     336:	a4 e1       	ldi	r26, 0x14	; 20
     338:	b0 e2       	ldi	r27, 0x20	; 32
     33a:	01 c0       	rjmp	.+2      	; 0x33e <.do_clear_bss_start>

0000033c <.do_clear_bss_loop>:
     33c:	1d 92       	st	X+, r1

0000033e <.do_clear_bss_start>:
     33e:	a0 33       	cpi	r26, 0x30	; 48
     340:	b2 07       	cpc	r27, r18
     342:	e1 f7       	brne	.-8      	; 0x33c <.do_clear_bss_loop>
     344:	dc d5       	rcall	.+3000   	; 0xefe <main>
     346:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <_exit>

0000034a <__bad_interrupt>:
     34a:	5a ce       	rjmp	.-844    	; 0x0 <__vectors>

0000034c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	1f 92       	push	r1
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     356:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <stdio_base>
     35a:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <stdio_base+0x1>
     35e:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <ptr_get>
     362:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <ptr_get+0x1>
     366:	be 01       	movw	r22, r28
     368:	6f 5f       	subi	r22, 0xFF	; 255
     36a:	7f 4f       	sbci	r23, 0xFF	; 255
     36c:	19 95       	eicall
	return c;
     36e:	89 81       	ldd	r24, Y+1	; 0x01
}
     370:	08 2e       	mov	r0, r24
     372:	00 0c       	add	r0, r0
     374:	99 0b       	sbc	r25, r25
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     37e:	81 15       	cp	r24, r1
     380:	22 e0       	ldi	r18, 0x02	; 2
     382:	92 07       	cpc	r25, r18
     384:	61 f4       	brne	.+24     	; 0x39e <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     386:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <adca_enable_count>
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	98 0f       	add	r25, r24
     38e:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <adca_enable_count>
     392:	81 11       	cpse	r24, r1
     394:	12 c0       	rjmp	.+36     	; 0x3ba <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     396:	62 e0       	ldi	r22, 0x02	; 2
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	72 c5       	rjmp	.+2788   	; 0xe80 <sysclk_enable_module>
     39c:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     39e:	80 34       	cpi	r24, 0x40	; 64
     3a0:	92 40       	sbci	r25, 0x02	; 2
     3a2:	59 f4       	brne	.+22     	; 0x3ba <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     3a4:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <__data_end>
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	98 0f       	add	r25, r24
     3ac:	90 93 14 20 	sts	0x2014, r25	; 0x802014 <__data_end>
     3b0:	81 11       	cpse	r24, r1
     3b2:	03 c0       	rjmp	.+6      	; 0x3ba <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     3b4:	62 e0       	ldi	r22, 0x02	; 2
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	63 c5       	rjmp	.+2758   	; 0xe80 <sysclk_enable_module>
     3ba:	08 95       	ret

000003bc <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     3bc:	81 15       	cp	r24, r1
     3be:	22 e0       	ldi	r18, 0x02	; 2
     3c0:	92 07       	cpc	r25, r18
     3c2:	59 f4       	brne	.+22     	; 0x3da <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     3c4:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <adca_enable_count>
     3c8:	81 50       	subi	r24, 0x01	; 1
     3ca:	80 93 15 20 	sts	0x2015, r24	; 0x802015 <adca_enable_count>
     3ce:	81 11       	cpse	r24, r1
     3d0:	11 c0       	rjmp	.+34     	; 0x3f4 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     3d2:	62 e0       	ldi	r22, 0x02	; 2
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	6a c5       	rjmp	.+2772   	; 0xeac <sysclk_disable_module>
     3d8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     3da:	80 34       	cpi	r24, 0x40	; 64
     3dc:	92 40       	sbci	r25, 0x02	; 2
     3de:	51 f4       	brne	.+20     	; 0x3f4 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     3e0:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <__data_end>
     3e4:	81 50       	subi	r24, 0x01	; 1
     3e6:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <__data_end>
     3ea:	81 11       	cpse	r24, r1
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     3ee:	62 e0       	ldi	r22, 0x02	; 2
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	5c c5       	rjmp	.+2744   	; 0xeac <sysclk_disable_module>
     3f4:	08 95       	ret

000003f6 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	1f 92       	push	r1
     402:	1f 92       	push	r1
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     40a:	8f b7       	in	r24, 0x3f	; 63
     40c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     40e:	f8 94       	cli
	return flags;
     410:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     412:	c7 01       	movw	r24, r14
     414:	b4 df       	rcall	.-152    	; 0x37e <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     416:	f7 01       	movw	r30, r14
     418:	80 81       	ld	r24, Z
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     41e:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     420:	80 91 21 20 	lds	r24, 0x2021	; 0x802021 <sleepmgr_locks+0x1>
     424:	8f 3f       	cpi	r24, 0xFF	; 255
     426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	ff cf       	rjmp	.-2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     42a:	8f b7       	in	r24, 0x3f	; 63
     42c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     42e:	f8 94       	cli
	return flags;
     430:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     432:	e0 e2       	ldi	r30, 0x20	; 32
     434:	f0 e2       	ldi	r31, 0x20	; 32
     436:	81 81       	ldd	r24, Z+1	; 0x01
     438:	8f 5f       	subi	r24, 0xFF	; 255
     43a:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     43c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	08 95       	ret

0000044e <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     44e:	fc 01       	movw	r30, r24
     450:	91 81       	ldd	r25, Z+1	; 0x01
     452:	95 ff       	sbrs	r25, 5
     454:	fd cf       	rjmp	.-6      	; 0x450 <usart_putchar+0x2>
     456:	60 83       	st	Z, r22
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	08 95       	ret

0000045e <usart_getchar>:
     45e:	fc 01       	movw	r30, r24
     460:	91 81       	ldd	r25, Z+1	; 0x01
     462:	99 23       	and	r25, r25
     464:	ec f7       	brge	.-6      	; 0x460 <usart_getchar+0x2>
     466:	80 81       	ld	r24, Z
     468:	08 95       	ret

0000046a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     46a:	4f 92       	push	r4
     46c:	5f 92       	push	r5
     46e:	6f 92       	push	r6
     470:	7f 92       	push	r7
     472:	8f 92       	push	r8
     474:	9f 92       	push	r9
     476:	af 92       	push	r10
     478:	bf 92       	push	r11
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	7c 01       	movw	r14, r24
     486:	4a 01       	movw	r8, r20
     488:	5b 01       	movw	r10, r22
     48a:	28 01       	movw	r4, r16
     48c:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     48e:	fc 01       	movw	r30, r24
     490:	84 81       	ldd	r24, Z+4	; 0x04
     492:	82 ff       	sbrs	r24, 2
     494:	16 c0       	rjmp	.+44     	; 0x4c2 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     496:	d9 01       	movw	r26, r18
     498:	c8 01       	movw	r24, r16
     49a:	68 94       	set
     49c:	12 f8       	bld	r1, 2
     49e:	b6 95       	lsr	r27
     4a0:	a7 95       	ror	r26
     4a2:	97 95       	ror	r25
     4a4:	87 95       	ror	r24
     4a6:	16 94       	lsr	r1
     4a8:	d1 f7       	brne	.-12     	; 0x49e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     4aa:	b9 01       	movw	r22, r18
     4ac:	a8 01       	movw	r20, r16
     4ae:	03 2e       	mov	r0, r19
     4b0:	36 e1       	ldi	r19, 0x16	; 22
     4b2:	76 95       	lsr	r23
     4b4:	67 95       	ror	r22
     4b6:	57 95       	ror	r21
     4b8:	47 95       	ror	r20
     4ba:	3a 95       	dec	r19
     4bc:	d1 f7       	brne	.-12     	; 0x4b2 <usart_set_baudrate+0x48>
     4be:	30 2d       	mov	r19, r0
     4c0:	15 c0       	rjmp	.+42     	; 0x4ec <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     4c2:	d9 01       	movw	r26, r18
     4c4:	c8 01       	movw	r24, r16
     4c6:	68 94       	set
     4c8:	13 f8       	bld	r1, 3
     4ca:	b6 95       	lsr	r27
     4cc:	a7 95       	ror	r26
     4ce:	97 95       	ror	r25
     4d0:	87 95       	ror	r24
     4d2:	16 94       	lsr	r1
     4d4:	d1 f7       	brne	.-12     	; 0x4ca <usart_set_baudrate+0x60>
		min_rate /= 2;
     4d6:	b9 01       	movw	r22, r18
     4d8:	a8 01       	movw	r20, r16
     4da:	03 2e       	mov	r0, r19
     4dc:	37 e1       	ldi	r19, 0x17	; 23
     4de:	76 95       	lsr	r23
     4e0:	67 95       	ror	r22
     4e2:	57 95       	ror	r21
     4e4:	47 95       	ror	r20
     4e6:	3a 95       	dec	r19
     4e8:	d1 f7       	brne	.-12     	; 0x4de <usart_set_baudrate+0x74>
     4ea:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     4ec:	88 15       	cp	r24, r8
     4ee:	99 05       	cpc	r25, r9
     4f0:	aa 05       	cpc	r26, r10
     4f2:	bb 05       	cpc	r27, r11
     4f4:	08 f4       	brcc	.+2      	; 0x4f8 <usart_set_baudrate+0x8e>
     4f6:	a6 c0       	rjmp	.+332    	; 0x644 <usart_set_baudrate+0x1da>
     4f8:	84 16       	cp	r8, r20
     4fa:	95 06       	cpc	r9, r21
     4fc:	a6 06       	cpc	r10, r22
     4fe:	b7 06       	cpc	r11, r23
     500:	08 f4       	brcc	.+2      	; 0x504 <usart_set_baudrate+0x9a>
     502:	a2 c0       	rjmp	.+324    	; 0x648 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     504:	f7 01       	movw	r30, r14
     506:	84 81       	ldd	r24, Z+4	; 0x04
     508:	82 fd       	sbrc	r24, 2
     50a:	04 c0       	rjmp	.+8      	; 0x514 <usart_set_baudrate+0xaa>
		baud *= 2;
     50c:	88 0c       	add	r8, r8
     50e:	99 1c       	adc	r9, r9
     510:	aa 1c       	adc	r10, r10
     512:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     514:	c3 01       	movw	r24, r6
     516:	b2 01       	movw	r22, r4
     518:	a5 01       	movw	r20, r10
     51a:	94 01       	movw	r18, r8
     51c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     520:	2f 3f       	cpi	r18, 0xFF	; 255
     522:	31 05       	cpc	r19, r1
     524:	41 05       	cpc	r20, r1
     526:	51 05       	cpc	r21, r1
     528:	08 f4       	brcc	.+2      	; 0x52c <usart_set_baudrate+0xc2>
     52a:	90 c0       	rjmp	.+288    	; 0x64c <usart_set_baudrate+0x1e2>
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b0 e0       	ldi	r27, 0x00	; 0
     534:	c9 ef       	ldi	r28, 0xF9	; 249
     536:	05 c0       	rjmp	.+10     	; 0x542 <usart_set_baudrate+0xd8>
     538:	28 17       	cp	r18, r24
     53a:	39 07       	cpc	r19, r25
     53c:	4a 07       	cpc	r20, r26
     53e:	5b 07       	cpc	r21, r27
     540:	58 f0       	brcs	.+22     	; 0x558 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	aa 1f       	adc	r26, r26
     548:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     54a:	cd 3f       	cpi	r28, 0xFD	; 253
     54c:	0c f4       	brge	.+2      	; 0x550 <usart_set_baudrate+0xe6>
			limit |= 1;
     54e:	81 60       	ori	r24, 0x01	; 1
     550:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     552:	c7 30       	cpi	r28, 0x07	; 7
     554:	89 f7       	brne	.-30     	; 0x538 <usart_set_baudrate+0xce>
     556:	4f c0       	rjmp	.+158    	; 0x5f6 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     558:	cc 23       	and	r28, r28
     55a:	0c f0       	brlt	.+2      	; 0x55e <usart_set_baudrate+0xf4>
     55c:	4c c0       	rjmp	.+152    	; 0x5f6 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     55e:	d5 01       	movw	r26, r10
     560:	c4 01       	movw	r24, r8
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	aa 1f       	adc	r26, r26
     568:	bb 1f       	adc	r27, r27
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	aa 1f       	adc	r26, r26
     570:	bb 1f       	adc	r27, r27
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	aa 1f       	adc	r26, r26
     578:	bb 1f       	adc	r27, r27
     57a:	48 1a       	sub	r4, r24
     57c:	59 0a       	sbc	r5, r25
     57e:	6a 0a       	sbc	r6, r26
     580:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     582:	ce 3f       	cpi	r28, 0xFE	; 254
     584:	f4 f4       	brge	.+60     	; 0x5c2 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     586:	8d ef       	ldi	r24, 0xFD	; 253
     588:	9f ef       	ldi	r25, 0xFF	; 255
     58a:	8c 1b       	sub	r24, r28
     58c:	91 09       	sbc	r25, r1
     58e:	c7 fd       	sbrc	r28, 7
     590:	93 95       	inc	r25
     592:	04 c0       	rjmp	.+8      	; 0x59c <usart_set_baudrate+0x132>
     594:	44 0c       	add	r4, r4
     596:	55 1c       	adc	r5, r5
     598:	66 1c       	adc	r6, r6
     59a:	77 1c       	adc	r7, r7
     59c:	8a 95       	dec	r24
     59e:	d2 f7       	brpl	.-12     	; 0x594 <usart_set_baudrate+0x12a>
     5a0:	d5 01       	movw	r26, r10
     5a2:	c4 01       	movw	r24, r8
     5a4:	b6 95       	lsr	r27
     5a6:	a7 95       	ror	r26
     5a8:	97 95       	ror	r25
     5aa:	87 95       	ror	r24
     5ac:	bc 01       	movw	r22, r24
     5ae:	cd 01       	movw	r24, r26
     5b0:	64 0d       	add	r22, r4
     5b2:	75 1d       	adc	r23, r5
     5b4:	86 1d       	adc	r24, r6
     5b6:	97 1d       	adc	r25, r7
     5b8:	a5 01       	movw	r20, r10
     5ba:	94 01       	movw	r18, r8
     5bc:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__udivmodsi4>
     5c0:	37 c0       	rjmp	.+110    	; 0x630 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	8c 0f       	add	r24, r28
     5c6:	a5 01       	movw	r20, r10
     5c8:	94 01       	movw	r18, r8
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <usart_set_baudrate+0x16a>
     5cc:	22 0f       	add	r18, r18
     5ce:	33 1f       	adc	r19, r19
     5d0:	44 1f       	adc	r20, r20
     5d2:	55 1f       	adc	r21, r21
     5d4:	8a 95       	dec	r24
     5d6:	d2 f7       	brpl	.-12     	; 0x5cc <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     5d8:	da 01       	movw	r26, r20
     5da:	c9 01       	movw	r24, r18
     5dc:	b6 95       	lsr	r27
     5de:	a7 95       	ror	r26
     5e0:	97 95       	ror	r25
     5e2:	87 95       	ror	r24
     5e4:	bc 01       	movw	r22, r24
     5e6:	cd 01       	movw	r24, r26
     5e8:	64 0d       	add	r22, r4
     5ea:	75 1d       	adc	r23, r5
     5ec:	86 1d       	adc	r24, r6
     5ee:	97 1d       	adc	r25, r7
     5f0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__udivmodsi4>
     5f4:	1d c0       	rjmp	.+58     	; 0x630 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	8c 0f       	add	r24, r28
     5fa:	a5 01       	movw	r20, r10
     5fc:	94 01       	movw	r18, r8
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <usart_set_baudrate+0x19e>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	8a 95       	dec	r24
     60a:	d2 f7       	brpl	.-12     	; 0x600 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     60c:	da 01       	movw	r26, r20
     60e:	c9 01       	movw	r24, r18
     610:	b6 95       	lsr	r27
     612:	a7 95       	ror	r26
     614:	97 95       	ror	r25
     616:	87 95       	ror	r24
     618:	bc 01       	movw	r22, r24
     61a:	cd 01       	movw	r24, r26
     61c:	64 0d       	add	r22, r4
     61e:	75 1d       	adc	r23, r5
     620:	86 1d       	adc	r24, r6
     622:	97 1d       	adc	r25, r7
     624:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__udivmodsi4>
     628:	21 50       	subi	r18, 0x01	; 1
     62a:	31 09       	sbc	r19, r1
     62c:	41 09       	sbc	r20, r1
     62e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     630:	83 2f       	mov	r24, r19
     632:	8f 70       	andi	r24, 0x0F	; 15
     634:	c2 95       	swap	r28
     636:	c0 7f       	andi	r28, 0xF0	; 240
     638:	c8 2b       	or	r28, r24
     63a:	f7 01       	movw	r30, r14
     63c:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     63e:	26 83       	std	Z+6, r18	; 0x06

	return true;
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	18 c0       	rjmp	.+48     	; 0x674 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	16 c0       	rjmp	.+44     	; 0x674 <usart_set_baudrate+0x20a>
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	14 c0       	rjmp	.+40     	; 0x674 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     64c:	d5 01       	movw	r26, r10
     64e:	c4 01       	movw	r24, r8
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	aa 1f       	adc	r26, r26
     656:	bb 1f       	adc	r27, r27
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	aa 1f       	adc	r26, r26
     65e:	bb 1f       	adc	r27, r27
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	aa 1f       	adc	r26, r26
     666:	bb 1f       	adc	r27, r27
     668:	48 1a       	sub	r4, r24
     66a:	59 0a       	sbc	r5, r25
     66c:	6a 0a       	sbc	r6, r26
     66e:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     670:	c9 ef       	ldi	r28, 0xF9	; 249
     672:	89 cf       	rjmp	.-238    	; 0x586 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	bf 90       	pop	r11
     680:	af 90       	pop	r10
     682:	9f 90       	pop	r9
     684:	8f 90       	pop	r8
     686:	7f 90       	pop	r7
     688:	6f 90       	pop	r6
     68a:	5f 90       	pop	r5
     68c:	4f 90       	pop	r4
     68e:	08 95       	ret

00000690 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	ec 01       	movw	r28, r24
     69a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	09 f4       	brne	.+2      	; 0x6a2 <usart_init_rs232+0x12>
     6a0:	e6 c0       	rjmp	.+460    	; 0x86e <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     6a2:	80 3c       	cpi	r24, 0xC0	; 192
     6a4:	91 05       	cpc	r25, r1
     6a6:	21 f4       	brne	.+8      	; 0x6b0 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     6a8:	60 e1       	ldi	r22, 0x10	; 16
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	e9 d3       	rcall	.+2002   	; 0xe80 <sysclk_enable_module>
     6ae:	df c0       	rjmp	.+446    	; 0x86e <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     6b0:	c0 38       	cpi	r28, 0x80	; 128
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	d8 07       	cpc	r29, r24
     6b6:	21 f4       	brne	.+8      	; 0x6c0 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     6b8:	62 e0       	ldi	r22, 0x02	; 2
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	e1 d3       	rcall	.+1986   	; 0xe80 <sysclk_enable_module>
     6be:	d7 c0       	rjmp	.+430    	; 0x86e <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     6c0:	c1 15       	cp	r28, r1
     6c2:	e1 e0       	ldi	r30, 0x01	; 1
     6c4:	de 07       	cpc	r29, r30
     6c6:	21 f4       	brne	.+8      	; 0x6d0 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	d9 d3       	rcall	.+1970   	; 0xe80 <sysclk_enable_module>
     6ce:	cf c0       	rjmp	.+414    	; 0x86e <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     6d0:	c0 38       	cpi	r28, 0x80	; 128
     6d2:	f3 e0       	ldi	r31, 0x03	; 3
     6d4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     6d6:	21 f4       	brne	.+8      	; 0x6e0 <usart_init_rs232+0x50>
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	d1 d3       	rcall	.+1954   	; 0xe80 <sysclk_enable_module>
     6de:	c7 c0       	rjmp	.+398    	; 0x86e <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     6e0:	c0 39       	cpi	r28, 0x90	; 144
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     6e6:	21 f4       	brne	.+8      	; 0x6f0 <usart_init_rs232+0x60>
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	c9 d3       	rcall	.+1938   	; 0xe80 <sysclk_enable_module>
     6ee:	bf c0       	rjmp	.+382    	; 0x86e <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     6f0:	c1 15       	cp	r28, r1
     6f2:	e2 e0       	ldi	r30, 0x02	; 2
     6f4:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     6f6:	21 f4       	brne	.+8      	; 0x700 <usart_init_rs232+0x70>
     6f8:	62 e0       	ldi	r22, 0x02	; 2
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	c1 d3       	rcall	.+1922   	; 0xe80 <sysclk_enable_module>
     6fe:	b7 c0       	rjmp	.+366    	; 0x86e <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     700:	c0 34       	cpi	r28, 0x40	; 64
     702:	f2 e0       	ldi	r31, 0x02	; 2
     704:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     706:	21 f4       	brne	.+8      	; 0x710 <usart_init_rs232+0x80>
     708:	62 e0       	ldi	r22, 0x02	; 2
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	b9 d3       	rcall	.+1906   	; 0xe80 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     70e:	af c0       	rjmp	.+350    	; 0x86e <usart_init_rs232+0x1de>
     710:	c0 32       	cpi	r28, 0x20	; 32
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     716:	21 f4       	brne	.+8      	; 0x720 <usart_init_rs232+0x90>
     718:	64 e0       	ldi	r22, 0x04	; 4
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	b1 d3       	rcall	.+1890   	; 0xe80 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     71e:	a7 c0       	rjmp	.+334    	; 0x86e <usart_init_rs232+0x1de>
     720:	c1 15       	cp	r28, r1
     722:	e8 e0       	ldi	r30, 0x08	; 8
     724:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     726:	21 f4       	brne	.+8      	; 0x730 <usart_init_rs232+0xa0>
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	a9 d3       	rcall	.+1874   	; 0xe80 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     72e:	9f c0       	rjmp	.+318    	; 0x86e <usart_init_rs232+0x1de>
     730:	c1 15       	cp	r28, r1
     732:	f9 e0       	ldi	r31, 0x09	; 9
     734:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     736:	21 f4       	brne	.+8      	; 0x740 <usart_init_rs232+0xb0>
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	a1 d3       	rcall	.+1858   	; 0xe80 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     73e:	97 c0       	rjmp	.+302    	; 0x86e <usart_init_rs232+0x1de>
     740:	c1 15       	cp	r28, r1
     742:	8a e0       	ldi	r24, 0x0A	; 10
     744:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     746:	21 f4       	brne	.+8      	; 0x750 <usart_init_rs232+0xc0>
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	85 e0       	ldi	r24, 0x05	; 5
     74c:	99 d3       	rcall	.+1842   	; 0xe80 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     74e:	8f c0       	rjmp	.+286    	; 0x86e <usart_init_rs232+0x1de>
     750:	c1 15       	cp	r28, r1
     752:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     754:	de 07       	cpc	r29, r30
     756:	21 f4       	brne	.+8      	; 0x760 <usart_init_rs232+0xd0>
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	86 e0       	ldi	r24, 0x06	; 6
     75c:	91 d3       	rcall	.+1826   	; 0xe80 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     75e:	87 c0       	rjmp	.+270    	; 0x86e <usart_init_rs232+0x1de>
     760:	c0 34       	cpi	r28, 0x40	; 64
     762:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     764:	df 07       	cpc	r29, r31
     766:	21 f4       	brne	.+8      	; 0x770 <usart_init_rs232+0xe0>
     768:	62 e0       	ldi	r22, 0x02	; 2
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	89 d3       	rcall	.+1810   	; 0xe80 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     76e:	7f c0       	rjmp	.+254    	; 0x86e <usart_init_rs232+0x1de>
     770:	c0 34       	cpi	r28, 0x40	; 64
     772:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     774:	d8 07       	cpc	r29, r24
     776:	21 f4       	brne	.+8      	; 0x780 <usart_init_rs232+0xf0>
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	81 d3       	rcall	.+1794   	; 0xe80 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     77e:	77 c0       	rjmp	.+238    	; 0x86e <usart_init_rs232+0x1de>
     780:	c0 34       	cpi	r28, 0x40	; 64
     782:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     784:	de 07       	cpc	r29, r30
     786:	21 f4       	brne	.+8      	; 0x790 <usart_init_rs232+0x100>
     788:	62 e0       	ldi	r22, 0x02	; 2
     78a:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     78c:	79 d3       	rcall	.+1778   	; 0xe80 <sysclk_enable_module>
     78e:	6f c0       	rjmp	.+222    	; 0x86e <usart_init_rs232+0x1de>
     790:	c0 39       	cpi	r28, 0x90	; 144
     792:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     794:	df 07       	cpc	r29, r31
     796:	21 f4       	brne	.+8      	; 0x7a0 <usart_init_rs232+0x110>
     798:	64 e0       	ldi	r22, 0x04	; 4
     79a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     79c:	71 d3       	rcall	.+1762   	; 0xe80 <sysclk_enable_module>
     79e:	67 c0       	rjmp	.+206    	; 0x86e <usart_init_rs232+0x1de>
     7a0:	c0 39       	cpi	r28, 0x90	; 144
     7a2:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     7a4:	d8 07       	cpc	r29, r24
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <usart_init_rs232+0x120>
     7a8:	64 e0       	ldi	r22, 0x04	; 4
     7aa:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     7ac:	69 d3       	rcall	.+1746   	; 0xe80 <sysclk_enable_module>
     7ae:	5f c0       	rjmp	.+190    	; 0x86e <usart_init_rs232+0x1de>
     7b0:	c0 39       	cpi	r28, 0x90	; 144
     7b2:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     7b4:	de 07       	cpc	r29, r30
     7b6:	21 f4       	brne	.+8      	; 0x7c0 <usart_init_rs232+0x130>
     7b8:	64 e0       	ldi	r22, 0x04	; 4
     7ba:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     7bc:	61 d3       	rcall	.+1730   	; 0xe80 <sysclk_enable_module>
     7be:	57 c0       	rjmp	.+174    	; 0x86e <usart_init_rs232+0x1de>
     7c0:	c0 39       	cpi	r28, 0x90	; 144
     7c2:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     7c4:	df 07       	cpc	r29, r31
     7c6:	21 f4       	brne	.+8      	; 0x7d0 <usart_init_rs232+0x140>
     7c8:	64 e0       	ldi	r22, 0x04	; 4
     7ca:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     7cc:	59 d3       	rcall	.+1714   	; 0xe80 <sysclk_enable_module>
     7ce:	4f c0       	rjmp	.+158    	; 0x86e <usart_init_rs232+0x1de>
     7d0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     7d2:	88 e0       	ldi	r24, 0x08	; 8
     7d4:	d8 07       	cpc	r29, r24
     7d6:	21 f4       	brne	.+8      	; 0x7e0 <usart_init_rs232+0x150>
     7d8:	68 e0       	ldi	r22, 0x08	; 8
     7da:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     7dc:	51 d3       	rcall	.+1698   	; 0xe80 <sysclk_enable_module>
     7de:	47 c0       	rjmp	.+142    	; 0x86e <usart_init_rs232+0x1de>
     7e0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     7e2:	e9 e0       	ldi	r30, 0x09	; 9
     7e4:	de 07       	cpc	r29, r30
     7e6:	21 f4       	brne	.+8      	; 0x7f0 <usart_init_rs232+0x160>
     7e8:	68 e0       	ldi	r22, 0x08	; 8
     7ea:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     7ec:	49 d3       	rcall	.+1682   	; 0xe80 <sysclk_enable_module>
     7ee:	3f c0       	rjmp	.+126    	; 0x86e <usart_init_rs232+0x1de>
     7f0:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     7f2:	f8 e0       	ldi	r31, 0x08	; 8
     7f4:	df 07       	cpc	r29, r31
     7f6:	21 f4       	brne	.+8      	; 0x800 <usart_init_rs232+0x170>
     7f8:	60 e1       	ldi	r22, 0x10	; 16
     7fa:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     7fc:	41 d3       	rcall	.+1666   	; 0xe80 <sysclk_enable_module>
     7fe:	37 c0       	rjmp	.+110    	; 0x86e <usart_init_rs232+0x1de>
     800:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     802:	89 e0       	ldi	r24, 0x09	; 9
     804:	d8 07       	cpc	r29, r24
     806:	21 f4       	brne	.+8      	; 0x810 <usart_init_rs232+0x180>
     808:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	39 d3       	rcall	.+1650   	; 0xe80 <sysclk_enable_module>
     80e:	2f c0       	rjmp	.+94     	; 0x86e <usart_init_rs232+0x1de>
     810:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     812:	ea e0       	ldi	r30, 0x0A	; 10
     814:	de 07       	cpc	r29, r30
     816:	21 f4       	brne	.+8      	; 0x820 <usart_init_rs232+0x190>
     818:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     81a:	85 e0       	ldi	r24, 0x05	; 5
     81c:	31 d3       	rcall	.+1634   	; 0xe80 <sysclk_enable_module>
     81e:	27 c0       	rjmp	.+78     	; 0x86e <usart_init_rs232+0x1de>
     820:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     822:	fb e0       	ldi	r31, 0x0B	; 11
     824:	df 07       	cpc	r29, r31
     826:	21 f4       	brne	.+8      	; 0x830 <usart_init_rs232+0x1a0>
     828:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     82a:	86 e0       	ldi	r24, 0x06	; 6
     82c:	29 d3       	rcall	.+1618   	; 0xe80 <sysclk_enable_module>
     82e:	1f c0       	rjmp	.+62     	; 0x86e <usart_init_rs232+0x1de>
     830:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     832:	88 e0       	ldi	r24, 0x08	; 8
     834:	d8 07       	cpc	r29, r24
     836:	21 f4       	brne	.+8      	; 0x840 <usart_init_rs232+0x1b0>
     838:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     83a:	83 e0       	ldi	r24, 0x03	; 3
     83c:	21 d3       	rcall	.+1602   	; 0xe80 <sysclk_enable_module>
     83e:	17 c0       	rjmp	.+46     	; 0x86e <usart_init_rs232+0x1de>
     840:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     842:	e9 e0       	ldi	r30, 0x09	; 9
     844:	de 07       	cpc	r29, r30
     846:	21 f4       	brne	.+8      	; 0x850 <usart_init_rs232+0x1c0>
     848:	60 e2       	ldi	r22, 0x20	; 32
     84a:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     84c:	19 d3       	rcall	.+1586   	; 0xe80 <sysclk_enable_module>
     84e:	0f c0       	rjmp	.+30     	; 0x86e <usart_init_rs232+0x1de>
     850:	c0 38       	cpi	r28, 0x80	; 128
     852:	f4 e0       	ldi	r31, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     854:	df 07       	cpc	r29, r31
     856:	21 f4       	brne	.+8      	; 0x860 <usart_init_rs232+0x1d0>
     858:	60 e4       	ldi	r22, 0x40	; 64
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	11 d3       	rcall	.+1570   	; 0xe80 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     85e:	07 c0       	rjmp	.+14     	; 0x86e <usart_init_rs232+0x1de>
     860:	c0 3a       	cpi	r28, 0xA0	; 160
     862:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     864:	d8 07       	cpc	r29, r24
     866:	19 f4       	brne	.+6      	; 0x86e <usart_init_rs232+0x1de>
     868:	60 e4       	ldi	r22, 0x40	; 64
     86a:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     86c:	09 d3       	rcall	.+1554   	; 0xe80 <sysclk_enable_module>
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     872:	8d 83       	std	Y+5, r24	; 0x05
     874:	f8 01       	movw	r30, r16
     876:	95 81       	ldd	r25, Z+5	; 0x05
     878:	84 81       	ldd	r24, Z+4	; 0x04
     87a:	89 2b       	or	r24, r25
     87c:	96 81       	ldd	r25, Z+6	; 0x06
     87e:	91 11       	cpse	r25, r1
     880:	98 e0       	ldi	r25, 0x08	; 8
     882:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     884:	8d 83       	std	Y+5, r24	; 0x05
     886:	f8 01       	movw	r30, r16
     888:	40 81       	ld	r20, Z
     88a:	51 81       	ldd	r21, Z+1	; 0x01
     88c:	62 81       	ldd	r22, Z+2	; 0x02
     88e:	73 81       	ldd	r23, Z+3	; 0x03
     890:	00 e8       	ldi	r16, 0x80	; 128
     892:	14 e8       	ldi	r17, 0x84	; 132
     894:	2e e1       	ldi	r18, 0x1E	; 30
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	ce 01       	movw	r24, r28
     89a:	e7 dd       	rcall	.-1074   	; 0x46a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     89c:	9c 81       	ldd	r25, Y+4	; 0x04
     89e:	98 60       	ori	r25, 0x08	; 8
     8a0:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     8a2:	9c 81       	ldd	r25, Y+4	; 0x04
     8a4:	90 61       	ori	r25, 0x10	; 16
     8a6:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	08 95       	ret

000008b2 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     8b2:	1f 92       	push	r1
     8b4:	0f 92       	push	r0
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	0b b6       	in	r0, 0x3b	; 59
     8be:	0f 92       	push	r0
     8c0:	2f 93       	push	r18
     8c2:	3f 93       	push	r19
     8c4:	4f 93       	push	r20
     8c6:	5f 93       	push	r21
     8c8:	6f 93       	push	r22
     8ca:	7f 93       	push	r23
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	af 93       	push	r26
     8d2:	bf 93       	push	r27
     8d4:	ef 93       	push	r30
     8d6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     8d8:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     8dc:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     8e0:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <adca_callback>
     8e4:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <adca_callback+0x1>
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	19 95       	eicall
}
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	bf 91       	pop	r27
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
     8fa:	8f 91       	pop	r24
     8fc:	7f 91       	pop	r23
     8fe:	6f 91       	pop	r22
     900:	5f 91       	pop	r21
     902:	4f 91       	pop	r20
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	0b be       	out	0x3b, r0	; 59
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	0f 90       	pop	r0
     912:	1f 90       	pop	r1
     914:	18 95       	reti

00000916 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     916:	1f 92       	push	r1
     918:	0f 92       	push	r0
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	0f 92       	push	r0
     91e:	11 24       	eor	r1, r1
     920:	0b b6       	in	r0, 0x3b	; 59
     922:	0f 92       	push	r0
     924:	2f 93       	push	r18
     926:	3f 93       	push	r19
     928:	4f 93       	push	r20
     92a:	5f 93       	push	r21
     92c:	6f 93       	push	r22
     92e:	7f 93       	push	r23
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	af 93       	push	r26
     936:	bf 93       	push	r27
     938:	ef 93       	push	r30
     93a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     93c:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     940:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     944:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <adca_callback>
     948:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <adca_callback+0x1>
     94c:	62 e0       	ldi	r22, 0x02	; 2
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	19 95       	eicall
}
     954:	ff 91       	pop	r31
     956:	ef 91       	pop	r30
     958:	bf 91       	pop	r27
     95a:	af 91       	pop	r26
     95c:	9f 91       	pop	r25
     95e:	8f 91       	pop	r24
     960:	7f 91       	pop	r23
     962:	6f 91       	pop	r22
     964:	5f 91       	pop	r21
     966:	4f 91       	pop	r20
     968:	3f 91       	pop	r19
     96a:	2f 91       	pop	r18
     96c:	0f 90       	pop	r0
     96e:	0b be       	out	0x3b, r0	; 59
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	0b b6       	in	r0, 0x3b	; 59
     986:	0f 92       	push	r0
     988:	2f 93       	push	r18
     98a:	3f 93       	push	r19
     98c:	4f 93       	push	r20
     98e:	5f 93       	push	r21
     990:	6f 93       	push	r22
     992:	7f 93       	push	r23
     994:	8f 93       	push	r24
     996:	9f 93       	push	r25
     998:	af 93       	push	r26
     99a:	bf 93       	push	r27
     99c:	ef 93       	push	r30
     99e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     9a0:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     9a4:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     9a8:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <adca_callback>
     9ac:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <adca_callback+0x1>
     9b0:	64 e0       	ldi	r22, 0x04	; 4
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	19 95       	eicall
}
     9b8:	ff 91       	pop	r31
     9ba:	ef 91       	pop	r30
     9bc:	bf 91       	pop	r27
     9be:	af 91       	pop	r26
     9c0:	9f 91       	pop	r25
     9c2:	8f 91       	pop	r24
     9c4:	7f 91       	pop	r23
     9c6:	6f 91       	pop	r22
     9c8:	5f 91       	pop	r21
     9ca:	4f 91       	pop	r20
     9cc:	3f 91       	pop	r19
     9ce:	2f 91       	pop	r18
     9d0:	0f 90       	pop	r0
     9d2:	0b be       	out	0x3b, r0	; 59
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	0b b6       	in	r0, 0x3b	; 59
     9ea:	0f 92       	push	r0
     9ec:	2f 93       	push	r18
     9ee:	3f 93       	push	r19
     9f0:	4f 93       	push	r20
     9f2:	5f 93       	push	r21
     9f4:	6f 93       	push	r22
     9f6:	7f 93       	push	r23
     9f8:	8f 93       	push	r24
     9fa:	9f 93       	push	r25
     9fc:	af 93       	push	r26
     9fe:	bf 93       	push	r27
     a00:	ef 93       	push	r30
     a02:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     a04:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     a08:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     a0c:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <adca_callback>
     a10:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <adca_callback+0x1>
     a14:	68 e0       	ldi	r22, 0x08	; 8
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	19 95       	eicall
}
     a1c:	ff 91       	pop	r31
     a1e:	ef 91       	pop	r30
     a20:	bf 91       	pop	r27
     a22:	af 91       	pop	r26
     a24:	9f 91       	pop	r25
     a26:	8f 91       	pop	r24
     a28:	7f 91       	pop	r23
     a2a:	6f 91       	pop	r22
     a2c:	5f 91       	pop	r21
     a2e:	4f 91       	pop	r20
     a30:	3f 91       	pop	r19
     a32:	2f 91       	pop	r18
     a34:	0f 90       	pop	r0
     a36:	0b be       	out	0x3b, r0	; 59
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	0b b6       	in	r0, 0x3b	; 59
     a4e:	0f 92       	push	r0
     a50:	2f 93       	push	r18
     a52:	3f 93       	push	r19
     a54:	4f 93       	push	r20
     a56:	5f 93       	push	r21
     a58:	6f 93       	push	r22
     a5a:	7f 93       	push	r23
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
     a60:	af 93       	push	r26
     a62:	bf 93       	push	r27
     a64:	ef 93       	push	r30
     a66:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     a68:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     a6c:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     a70:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <adcb_callback>
     a74:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <adcb_callback+0x1>
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	80 e4       	ldi	r24, 0x40	; 64
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	19 95       	eicall
}
     a80:	ff 91       	pop	r31
     a82:	ef 91       	pop	r30
     a84:	bf 91       	pop	r27
     a86:	af 91       	pop	r26
     a88:	9f 91       	pop	r25
     a8a:	8f 91       	pop	r24
     a8c:	7f 91       	pop	r23
     a8e:	6f 91       	pop	r22
     a90:	5f 91       	pop	r21
     a92:	4f 91       	pop	r20
     a94:	3f 91       	pop	r19
     a96:	2f 91       	pop	r18
     a98:	0f 90       	pop	r0
     a9a:	0b be       	out	0x3b, r0	; 59
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	0b b6       	in	r0, 0x3b	; 59
     ab2:	0f 92       	push	r0
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     acc:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     ad0:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     ad4:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <adcb_callback>
     ad8:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <adcb_callback+0x1>
     adc:	62 e0       	ldi	r22, 0x02	; 2
     ade:	80 e4       	ldi	r24, 0x40	; 64
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	19 95       	eicall
}
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     b0a:	1f 92       	push	r1
     b0c:	0f 92       	push	r0
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	0f 92       	push	r0
     b12:	11 24       	eor	r1, r1
     b14:	0b b6       	in	r0, 0x3b	; 59
     b16:	0f 92       	push	r0
     b18:	2f 93       	push	r18
     b1a:	3f 93       	push	r19
     b1c:	4f 93       	push	r20
     b1e:	5f 93       	push	r21
     b20:	6f 93       	push	r22
     b22:	7f 93       	push	r23
     b24:	8f 93       	push	r24
     b26:	9f 93       	push	r25
     b28:	af 93       	push	r26
     b2a:	bf 93       	push	r27
     b2c:	ef 93       	push	r30
     b2e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     b30:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     b34:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     b38:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <adcb_callback>
     b3c:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <adcb_callback+0x1>
     b40:	64 e0       	ldi	r22, 0x04	; 4
     b42:	80 e4       	ldi	r24, 0x40	; 64
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	19 95       	eicall
}
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0b be       	out	0x3b, r0	; 59
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	0f 90       	pop	r0
     b6a:	1f 90       	pop	r1
     b6c:	18 95       	reti

00000b6e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     b6e:	1f 92       	push	r1
     b70:	0f 92       	push	r0
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	0b b6       	in	r0, 0x3b	; 59
     b7a:	0f 92       	push	r0
     b7c:	2f 93       	push	r18
     b7e:	3f 93       	push	r19
     b80:	4f 93       	push	r20
     b82:	5f 93       	push	r21
     b84:	6f 93       	push	r22
     b86:	7f 93       	push	r23
     b88:	8f 93       	push	r24
     b8a:	9f 93       	push	r25
     b8c:	af 93       	push	r26
     b8e:	bf 93       	push	r27
     b90:	ef 93       	push	r30
     b92:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     b94:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     b98:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     b9c:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <adcb_callback>
     ba0:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <adcb_callback+0x1>
     ba4:	68 e0       	ldi	r22, 0x08	; 8
     ba6:	80 e4       	ldi	r24, 0x40	; 64
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	19 95       	eicall
}
     bac:	ff 91       	pop	r31
     bae:	ef 91       	pop	r30
     bb0:	bf 91       	pop	r27
     bb2:	af 91       	pop	r26
     bb4:	9f 91       	pop	r25
     bb6:	8f 91       	pop	r24
     bb8:	7f 91       	pop	r23
     bba:	6f 91       	pop	r22
     bbc:	5f 91       	pop	r21
     bbe:	4f 91       	pop	r20
     bc0:	3f 91       	pop	r19
     bc2:	2f 91       	pop	r18
     bc4:	0f 90       	pop	r0
     bc6:	0b be       	out	0x3b, r0	; 59
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     bd2:	bf 92       	push	r11
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	1f 92       	push	r1
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	8c 01       	movw	r16, r24
     bec:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     bee:	81 15       	cp	r24, r1
     bf0:	22 e0       	ldi	r18, 0x02	; 2
     bf2:	92 07       	cpc	r25, r18
     bf4:	71 f4       	brne	.+28     	; 0xc12 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     bf6:	61 e2       	ldi	r22, 0x21	; 33
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	6c d1       	rcall	.+728    	; 0xed6 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     bfe:	c8 2e       	mov	r12, r24
     c00:	d1 2c       	mov	r13, r1
     c02:	60 e2       	ldi	r22, 0x20	; 32
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	66 d1       	rcall	.+716    	; 0xed6 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     c0a:	dc 2c       	mov	r13, r12
     c0c:	cc 24       	eor	r12, r12
     c0e:	c8 2a       	or	r12, r24
     c10:	10 c0       	rjmp	.+32     	; 0xc32 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     c12:	80 34       	cpi	r24, 0x40	; 64
     c14:	92 40       	sbci	r25, 0x02	; 2
     c16:	c1 f5       	brne	.+112    	; 0xc88 <adc_write_configuration+0xb6>
     c18:	65 e2       	ldi	r22, 0x25	; 37
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	5b d1       	rcall	.+694    	; 0xed6 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     c20:	c8 2e       	mov	r12, r24
     c22:	d1 2c       	mov	r13, r1
     c24:	64 e2       	ldi	r22, 0x24	; 36
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	55 d1       	rcall	.+682    	; 0xed6 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     c2c:	dc 2c       	mov	r13, r12
     c2e:	cc 24       	eor	r12, r12
     c30:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c32:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     c34:	89 83       	std	Y+1, r24	; 0x01
	return flags;
     c36:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     c38:	b9 80       	ldd	r11, Y+1	; 0x01
     c3a:	c8 01       	movw	r24, r16
     c3c:	a0 db       	rcall	.-2240   	; 0x37e <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     c3e:	f8 01       	movw	r30, r16
     c40:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	90 83       	st	Z, r25
	adc->CAL = cal;
     c46:	c4 86       	std	Z+12, r12	; 0x0c
     c48:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     c4a:	f7 01       	movw	r30, r14
     c4c:	25 81       	ldd	r18, Z+5	; 0x05
     c4e:	36 81       	ldd	r19, Z+6	; 0x06
     c50:	f8 01       	movw	r30, r16
     c52:	20 8f       	std	Z+24, r18	; 0x18
     c54:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     c56:	f7 01       	movw	r30, r14
     c58:	92 81       	ldd	r25, Z+2	; 0x02
     c5a:	f8 01       	movw	r30, r16
     c5c:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     c5e:	f7 01       	movw	r30, r14
     c60:	94 81       	ldd	r25, Z+4	; 0x04
     c62:	f8 01       	movw	r30, r16
     c64:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     c66:	f7 01       	movw	r30, r14
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	f8 01       	movw	r30, r16
     c6c:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     c6e:	f7 01       	movw	r30, r14
     c70:	91 81       	ldd	r25, Z+1	; 0x01
     c72:	f8 01       	movw	r30, r16
     c74:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     c76:	81 70       	andi	r24, 0x01	; 1
     c78:	f7 01       	movw	r30, r14
     c7a:	90 81       	ld	r25, Z
     c7c:	89 2b       	or	r24, r25
     c7e:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     c80:	80 83       	st	Z, r24
     c82:	c8 01       	movw	r24, r16
     c84:	9b db       	rcall	.-2250   	; 0x3bc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c86:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
     c88:	0f 90       	pop	r0
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	bf 90       	pop	r11
     c9c:	08 95       	ret

00000c9e <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     c9e:	df 92       	push	r13
     ca0:	ef 92       	push	r14
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	1f 92       	push	r1
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	8c 01       	movw	r16, r24
     cb4:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cb6:	8f b7       	in	r24, 0x3f	; 63
     cb8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     cba:	f8 94       	cli
	return flags;
     cbc:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     cbe:	c8 01       	movw	r24, r16
     cc0:	5e db       	rcall	.-2372   	; 0x37e <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     cc2:	f8 01       	movw	r30, r16
     cc4:	80 81       	ld	r24, Z
     cc6:	80 7c       	andi	r24, 0xC0	; 192
     cc8:	f7 01       	movw	r30, r14
     cca:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     ccc:	f8 01       	movw	r30, r16
     cce:	80 8d       	ldd	r24, Z+24	; 0x18
     cd0:	91 8d       	ldd	r25, Z+25	; 0x19
     cd2:	f7 01       	movw	r30, r14
     cd4:	85 83       	std	Z+5, r24	; 0x05
     cd6:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     cd8:	f8 01       	movw	r30, r16
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	f7 01       	movw	r30, r14
     cde:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     ce0:	f8 01       	movw	r30, r16
     ce2:	84 81       	ldd	r24, Z+4	; 0x04
     ce4:	f7 01       	movw	r30, r14
     ce6:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     ce8:	f8 01       	movw	r30, r16
     cea:	83 81       	ldd	r24, Z+3	; 0x03
     cec:	f7 01       	movw	r30, r14
     cee:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     cf0:	f8 01       	movw	r30, r16
     cf2:	81 81       	ldd	r24, Z+1	; 0x01
     cf4:	f7 01       	movw	r30, r14
     cf6:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
     cf8:	c8 01       	movw	r24, r16
     cfa:	60 db       	rcall	.-2368   	; 0x3bc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cfc:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     cfe:	0f 90       	pop	r0
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	08 95       	ret

00000d10 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	1f 92       	push	r1
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	6c 01       	movw	r12, r24
     d2c:	b6 2e       	mov	r11, r22
     d2e:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d30:	86 2f       	mov	r24, r22
     d32:	83 70       	andi	r24, 0x03	; 3
     d34:	29 f4       	brne	.+10     	; 0xd40 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     d36:	96 2f       	mov	r25, r22
     d38:	96 95       	lsr	r25
     d3a:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d40:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     d42:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     d44:	90 ff       	sbrs	r25, 0
		index++;
     d46:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     d48:	86 01       	movw	r16, r12
     d4a:	00 5e       	subi	r16, 0xE0	; 224
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	98 e0       	ldi	r25, 0x08	; 8
     d50:	89 9f       	mul	r24, r25
     d52:	00 0d       	add	r16, r0
     d54:	11 1d       	adc	r17, r1
     d56:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d58:	8f b7       	in	r24, 0x3f	; 63
     d5a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d5c:	f8 94       	cli
	return flags;
     d5e:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     d60:	c6 01       	movw	r24, r12
     d62:	0d db       	rcall	.-2534   	; 0x37e <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     d64:	f7 01       	movw	r30, r14
     d66:	80 81       	ld	r24, Z
     d68:	f8 01       	movw	r30, r16
     d6a:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     d6c:	f7 01       	movw	r30, r14
     d6e:	82 81       	ldd	r24, Z+2	; 0x02
     d70:	f8 01       	movw	r30, r16
     d72:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     d74:	f7 01       	movw	r30, r14
     d76:	81 81       	ldd	r24, Z+1	; 0x01
     d78:	f8 01       	movw	r30, r16
     d7a:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     d7c:	b0 fe       	sbrs	r11, 0
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     d80:	f7 01       	movw	r30, r14
     d82:	83 81       	ldd	r24, Z+3	; 0x03
     d84:	f8 01       	movw	r30, r16
     d86:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
     d88:	c6 01       	movw	r24, r12
     d8a:	18 db       	rcall	.-2512   	; 0x3bc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d8c:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
     d8e:	0f 90       	pop	r0
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	bf 90       	pop	r11
     da2:	af 90       	pop	r10
     da4:	08 95       	ret

00000da6 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     da6:	af 92       	push	r10
     da8:	bf 92       	push	r11
     daa:	cf 92       	push	r12
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	1f 92       	push	r1
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	6c 01       	movw	r12, r24
     dc2:	b6 2e       	mov	r11, r22
     dc4:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     dc6:	86 2f       	mov	r24, r22
     dc8:	83 70       	andi	r24, 0x03	; 3
     dca:	29 f4       	brne	.+10     	; 0xdd6 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     dcc:	96 2f       	mov	r25, r22
     dce:	96 95       	lsr	r25
     dd0:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     dd6:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     dd8:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     dda:	90 ff       	sbrs	r25, 0
		index++;
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     dde:	86 01       	movw	r16, r12
     de0:	00 5e       	subi	r16, 0xE0	; 224
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	98 e0       	ldi	r25, 0x08	; 8
     de6:	89 9f       	mul	r24, r25
     de8:	00 0d       	add	r16, r0
     dea:	11 1d       	adc	r17, r1
     dec:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     dee:	8f b7       	in	r24, 0x3f	; 63
     df0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     df2:	f8 94       	cli
	return flags;
     df4:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     df6:	c6 01       	movw	r24, r12
     df8:	c2 da       	rcall	.-2684   	; 0x37e <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     dfa:	f8 01       	movw	r30, r16
     dfc:	80 81       	ld	r24, Z
     dfe:	f7 01       	movw	r30, r14
     e00:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     e02:	f8 01       	movw	r30, r16
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	f7 01       	movw	r30, r14
     e08:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     e0a:	f8 01       	movw	r30, r16
     e0c:	81 81       	ldd	r24, Z+1	; 0x01
     e0e:	f7 01       	movw	r30, r14
     e10:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     e12:	b0 fe       	sbrs	r11, 0
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     e16:	f8 01       	movw	r30, r16
     e18:	86 81       	ldd	r24, Z+6	; 0x06
     e1a:	f7 01       	movw	r30, r14
     e1c:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
     e1e:	c6 01       	movw	r24, r12
     e20:	cd da       	rcall	.-2662   	; 0x3bc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e22:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
     e24:	0f 90       	pop	r0
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	bf 90       	pop	r11
     e38:	af 90       	pop	r10
     e3a:	08 95       	ret

00000e3c <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     e3c:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     e3e:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <stdio_base>
     e42:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <stdio_base+0x1>
     e46:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <ptr_put>
     e4a:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <ptr_put+0x1>
     e4e:	19 95       	eicall
     e50:	99 23       	and	r25, r25
     e52:	1c f0       	brlt	.+6      	; 0xe5a <_write+0x1e>
		return -1;
	}
	return 1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     e5e:	08 95       	ret

00000e60 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     e66:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     e6a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     e6e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     e72:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     e76:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     e7a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     e7e:	08 95       	ret

00000e80 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	1f 92       	push	r1
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e8a:	9f b7       	in	r25, 0x3f	; 63
     e8c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e8e:	f8 94       	cli
	return flags;
     e90:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     e92:	e8 2f       	mov	r30, r24
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	e0 59       	subi	r30, 0x90	; 144
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	60 95       	com	r22
     e9c:	80 81       	ld	r24, Z
     e9e:	68 23       	and	r22, r24
     ea0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ea2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     ea4:	0f 90       	pop	r0
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	1f 92       	push	r1
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     eb6:	9f b7       	in	r25, 0x3f	; 63
     eb8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     eba:	f8 94       	cli
	return flags;
     ebc:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     ebe:	e8 2f       	mov	r30, r24
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	e0 59       	subi	r30, 0x90	; 144
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	80 81       	ld	r24, Z
     ec8:	68 2b       	or	r22, r24
     eca:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ecc:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     ece:	0f 90       	pop	r0
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     ed6:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     eda:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     edc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     ede:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     ee2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     ee4:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     ee8:	08 95       	ret

00000eea <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     ef0:	b6 da       	rcall	.-2708   	; 0x45e <usart_getchar>
     ef2:	88 83       	st	Y, r24
}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     efa:	a9 ca       	rjmp	.-2734   	; 0x44e <usart_putchar>
}
     efc:	08 95       	ret

00000efe <main>:
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_PIN5, GAIN);
	adc_write_configuration(&MY_ADC, &adc_conf);
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
}

int main (void) {
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	2c 97       	sbiw	r28, 0x0c	; 12
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	de bf       	out	0x3e, r29	; 62
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = false
	};
	
	sysclk_init();
     f0c:	a9 df       	rcall	.-174    	; 0xe60 <sysclk_init>

static void adc_init(void) {
	
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(&MY_ADC, &adc_conf);
     f0e:	be 01       	movw	r22, r28
     f10:	6f 5f       	subi	r22, 0xFF	; 255
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	c2 de       	rcall	.-636    	; 0xc9e <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
     f1a:	ae 01       	movw	r20, r28
     f1c:	48 5f       	subi	r20, 0xF8	; 248
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
     f20:	61 e0       	ldi	r22, 0x01	; 1
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	92 e0       	ldi	r25, 0x02	; 2
     f26:	3f df       	rcall	.-386    	; 0xda6 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     f2a:	9b 81       	ldd	r25, Y+3	; 0x03
     f2c:	9f 78       	andi	r25, 0x8F	; 143
     f2e:	9b 83       	std	Y+3, r25	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     f30:	81 7e       	andi	r24, 0xE1	; 225
     f32:	80 61       	ori	r24, 0x10	; 16
     f34:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
     f36:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	8d 83       	std	Y+5, r24	; 0x05
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
     f3c:	83 e0       	ldi	r24, 0x03	; 3
     f3e:	88 87       	std	Y+8, r24	; 0x08
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     f40:	89 e0       	ldi	r24, 0x09	; 9
     f42:	89 87       	std	Y+9, r24	; 0x09
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_ON, ADC_RES_12, ADC_REF_BANDGAP);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_PIN5, GAIN);
	adc_write_configuration(&MY_ADC, &adc_conf);
     f44:	be 01       	movw	r22, r28
     f46:	6f 5f       	subi	r22, 0xFF	; 255
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	41 de       	rcall	.-894    	; 0xbd2 <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
     f50:	ae 01       	movw	r20, r28
     f52:	48 5f       	subi	r20, 0xF8	; 248
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	d9 de       	rcall	.-590    	; 0xd10 <adcch_write_configuration>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     f5e:	80 ea       	ldi	r24, 0xA0	; 160
     f60:	9a e0       	ldi	r25, 0x0A	; 10
     f62:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <stdio_base>
     f66:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     f6a:	8d e7       	ldi	r24, 0x7D	; 125
     f6c:	97 e0       	ldi	r25, 0x07	; 7
     f6e:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <ptr_put>
     f72:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     f76:	85 e7       	ldi	r24, 0x75	; 117
     f78:	97 e0       	ldi	r25, 0x07	; 7
     f7a:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <ptr_get>
     f7e:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     f82:	e6 e0       	ldi	r30, 0x06	; 6
     f84:	f0 e2       	ldi	r31, 0x20	; 32
     f86:	84 81       	ldd	r24, Z+4	; 0x04
     f88:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     f8a:	85 81       	ldd	r24, Z+5	; 0x05
     f8c:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     f8e:	86 81       	ldd	r24, Z+6	; 0x06
     f90:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     f92:	80 81       	ld	r24, Z
     f94:	91 81       	ldd	r25, Z+1	; 0x01
     f96:	a2 81       	ldd	r26, Z+2	; 0x02
     f98:	b3 81       	ldd	r27, Z+3	; 0x03
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	ab 83       	std	Y+3, r26	; 0x03
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     fa0:	bc 83       	std	Y+4, r27	; 0x04
     fa2:	60 e1       	ldi	r22, 0x10	; 16
     fa4:	85 e0       	ldi	r24, 0x05	; 5
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     fa6:	6c df       	rcall	.-296    	; 0xe80 <sysclk_enable_module>
     fa8:	be 01       	movw	r22, r28
     faa:	6f 5f       	subi	r22, 0xFF	; 255
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	80 ea       	ldi	r24, 0xA0	; 160
     fb0:	9a e0       	ldi	r25, 0x0A	; 10
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     fb2:	6e db       	rcall	.-2340   	; 0x690 <usart_init_rs232>
     fb4:	66 ea       	ldi	r22, 0xA6	; 166
     fb6:	71 e0       	ldi	r23, 0x01	; 1
     fb8:	8e e1       	ldi	r24, 0x1E	; 30
     fba:	97 e0       	ldi	r25, 0x07	; 7
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     fbc:	45 d6       	rcall	.+3210   	; 0x1c48 <fdevopen>
     fbe:	88 e0       	ldi	r24, 0x08	; 8
     fc0:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	adc_init();
	
	stdio_serial_init(&USARTE0, &USART_SERIAL_OPTIONS);
	ioport_set_pin_dir(UART_TXPIN, IOPORT_DIR_OUTPUT);
	
	adc_enable(&MY_ADC);
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	16 da       	rcall	.-3028   	; 0x3f6 <adc_enable>
	while(1) {
		
		float result = 0;
		char buffer;
		
		scanf("%c", &buffer);
     fca:	6e 01       	movw	r12, r28
     fcc:	8c e0       	ldi	r24, 0x0C	; 12
     fce:	c8 0e       	add	r12, r24
     fd0:	d1 1c       	adc	r13, r1
     fd2:	0f 2e       	mov	r0, r31
     fd4:	fd e0       	ldi	r31, 0x0D	; 13
     fd6:	ef 2e       	mov	r14, r31
     fd8:	f0 e2       	ldi	r31, 0x20	; 32
     fda:	ff 2e       	mov	r15, r31
     fdc:	f0 2d       	mov	r31, r0
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     fde:	00 e0       	ldi	r16, 0x00	; 0
     fe0:	12 e0       	ldi	r17, 0x02	; 2
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     fe2:	99 24       	eor	r9, r9
     fe4:	93 94       	inc	r9
				adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
				result += adc_get_signed_result(&MY_ADC, MY_ADC_CH);
			}
			result /= SAMPLES_PER_MEASUREMENT;		// LSB = (1731 - 1574) / 317 = 0,495 mV
			result = (result * REF_VOLTAGE_mV) / (GAIN * 2048);
			printf("%f\n", result);
     fe6:	0f 2e       	mov	r0, r31
     fe8:	f0 e1       	ldi	r31, 0x10	; 16
     fea:	af 2e       	mov	r10, r31
     fec:	f0 e2       	ldi	r31, 0x20	; 32
     fee:	bf 2e       	mov	r11, r31
	while(1) {
		
		float result = 0;
		char buffer;
		
		scanf("%c", &buffer);
     ff0:	f0 2d       	mov	r31, r0
     ff2:	df 92       	push	r13
     ff4:	cf 92       	push	r12
     ff6:	ff 92       	push	r15
     ff8:	ef 92       	push	r14
     ffa:	bf d6       	rcall	.+3454   	; 0x1d7a <scanf>
		if(buffer){
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	8c 85       	ldd	r24, Y+12	; 0x0c
    1006:	88 23       	and	r24, r24
    1008:	a1 f3       	breq	.-24     	; 0xff2 <main+0xf4>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    100a:	8f b7       	in	r24, 0x3f	; 63
    100c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    100e:	f8 94       	cli
	return flags;
    1010:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    1012:	f8 01       	movw	r30, r16
    1014:	80 81       	ld	r24, Z
    1016:	84 60       	ori	r24, 0x04	; 4
    1018:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    101a:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    101c:	f8 01       	movw	r30, r16
    101e:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1020:	80 ff       	sbrs	r24, 0
    1022:	fc cf       	rjmp	.-8      	; 0x101c <main+0x11e>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1024:	96 82       	std	Z+6, r9	; 0x06

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1026:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1028:	88 87       	std	Y+8, r24	; 0x08
	return flags;
    102a:	f8 94       	cli
	ADC_CH_t *adc_ch;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
	val = adc_ch->RES;
    102c:	88 85       	ldd	r24, Y+8	; 0x08
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    102e:	64 a1       	ldd	r22, Z+36	; 0x24
				adc_start_conversion(&MY_ADC, MY_ADC_CH);
				adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
				result += adc_get_signed_result(&MY_ADC, MY_ADC_CH);
			}
			result /= SAMPLES_PER_MEASUREMENT;		// LSB = (1731 - 1574) / 317 = 0,495 mV
			result = (result * REF_VOLTAGE_mV) / (GAIN * 2048);
    1030:	75 a1       	ldd	r23, Z+37	; 0x25
    1032:	8f bf       	out	0x3f, r24	; 63
    1034:	07 2e       	mov	r0, r23
    1036:	00 0c       	add	r0, r0
    1038:	88 0b       	sbc	r24, r24
    103a:	99 0b       	sbc	r25, r25
    103c:	83 d0       	rcall	.+262    	; 0x1144 <__floatsisf>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	a9 01       	movw	r20, r18
    1044:	19 d0       	rcall	.+50     	; 0x1078 <__addsf3>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e8       	ldi	r19, 0x80	; 128
    104a:	49 e8       	ldi	r20, 0x89	; 137
    104c:	54 e4       	ldi	r21, 0x44	; 68
			printf("%f\n", result);
    104e:	06 d1       	rcall	.+524    	; 0x125c <__mulsf3>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	5a e3       	ldi	r21, 0x3A	; 58
    1058:	01 d1       	rcall	.+514    	; 0x125c <__mulsf3>
    105a:	9f 93       	push	r25
    105c:	8f 93       	push	r24
    105e:	7f 93       	push	r23
    1060:	6f 93       	push	r22
    1062:	bf 92       	push	r11
    1064:	af 92       	push	r10
    1066:	76 d6       	rcall	.+3308   	; 0x1d54 <printf>
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	be cf       	rjmp	.-132    	; 0xff2 <main+0xf4>

00001076 <__subsf3>:
		}
		
	}
    1076:	50 58       	subi	r21, 0x80	; 128

00001078 <__addsf3>:
    1078:	bb 27       	eor	r27, r27
    107a:	aa 27       	eor	r26, r26
    107c:	0e d0       	rcall	.+28     	; 0x109a <__addsf3x>
    107e:	b4 c0       	rjmp	.+360    	; 0x11e8 <__fp_round>
    1080:	a5 d0       	rcall	.+330    	; 0x11cc <__fp_pscA>
    1082:	30 f0       	brcs	.+12     	; 0x1090 <__addsf3+0x18>
    1084:	aa d0       	rcall	.+340    	; 0x11da <__fp_pscB>
    1086:	20 f0       	brcs	.+8      	; 0x1090 <__addsf3+0x18>
    1088:	31 f4       	brne	.+12     	; 0x1096 <__addsf3+0x1e>
    108a:	9f 3f       	cpi	r25, 0xFF	; 255
    108c:	11 f4       	brne	.+4      	; 0x1092 <__addsf3+0x1a>
    108e:	1e f4       	brtc	.+6      	; 0x1096 <__addsf3+0x1e>
    1090:	9a c0       	rjmp	.+308    	; 0x11c6 <__fp_nan>
    1092:	0e f4       	brtc	.+2      	; 0x1096 <__addsf3+0x1e>
    1094:	e0 95       	com	r30
    1096:	e7 fb       	bst	r30, 7
    1098:	90 c0       	rjmp	.+288    	; 0x11ba <__fp_inf>

0000109a <__addsf3x>:
    109a:	e9 2f       	mov	r30, r25
    109c:	b6 d0       	rcall	.+364    	; 0x120a <__fp_split3>
    109e:	80 f3       	brcs	.-32     	; 0x1080 <__addsf3+0x8>
    10a0:	ba 17       	cp	r27, r26
    10a2:	62 07       	cpc	r22, r18
    10a4:	73 07       	cpc	r23, r19
    10a6:	84 07       	cpc	r24, r20
    10a8:	95 07       	cpc	r25, r21
    10aa:	18 f0       	brcs	.+6      	; 0x10b2 <__addsf3x+0x18>
    10ac:	71 f4       	brne	.+28     	; 0x10ca <__addsf3x+0x30>
    10ae:	9e f5       	brtc	.+102    	; 0x1116 <__addsf3x+0x7c>
    10b0:	ce c0       	rjmp	.+412    	; 0x124e <__fp_zero>
    10b2:	0e f4       	brtc	.+2      	; 0x10b6 <__addsf3x+0x1c>
    10b4:	e0 95       	com	r30
    10b6:	0b 2e       	mov	r0, r27
    10b8:	ba 2f       	mov	r27, r26
    10ba:	a0 2d       	mov	r26, r0
    10bc:	0b 01       	movw	r0, r22
    10be:	b9 01       	movw	r22, r18
    10c0:	90 01       	movw	r18, r0
    10c2:	0c 01       	movw	r0, r24
    10c4:	ca 01       	movw	r24, r20
    10c6:	a0 01       	movw	r20, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	ff 27       	eor	r31, r31
    10cc:	59 1b       	sub	r21, r25
    10ce:	99 f0       	breq	.+38     	; 0x10f6 <__addsf3x+0x5c>
    10d0:	59 3f       	cpi	r21, 0xF9	; 249
    10d2:	50 f4       	brcc	.+20     	; 0x10e8 <__addsf3x+0x4e>
    10d4:	50 3e       	cpi	r21, 0xE0	; 224
    10d6:	68 f1       	brcs	.+90     	; 0x1132 <__addsf3x+0x98>
    10d8:	1a 16       	cp	r1, r26
    10da:	f0 40       	sbci	r31, 0x00	; 0
    10dc:	a2 2f       	mov	r26, r18
    10de:	23 2f       	mov	r18, r19
    10e0:	34 2f       	mov	r19, r20
    10e2:	44 27       	eor	r20, r20
    10e4:	58 5f       	subi	r21, 0xF8	; 248
    10e6:	f3 cf       	rjmp	.-26     	; 0x10ce <__addsf3x+0x34>
    10e8:	46 95       	lsr	r20
    10ea:	37 95       	ror	r19
    10ec:	27 95       	ror	r18
    10ee:	a7 95       	ror	r26
    10f0:	f0 40       	sbci	r31, 0x00	; 0
    10f2:	53 95       	inc	r21
    10f4:	c9 f7       	brne	.-14     	; 0x10e8 <__addsf3x+0x4e>
    10f6:	7e f4       	brtc	.+30     	; 0x1116 <__addsf3x+0x7c>
    10f8:	1f 16       	cp	r1, r31
    10fa:	ba 0b       	sbc	r27, r26
    10fc:	62 0b       	sbc	r22, r18
    10fe:	73 0b       	sbc	r23, r19
    1100:	84 0b       	sbc	r24, r20
    1102:	ba f0       	brmi	.+46     	; 0x1132 <__addsf3x+0x98>
    1104:	91 50       	subi	r25, 0x01	; 1
    1106:	a1 f0       	breq	.+40     	; 0x1130 <__addsf3x+0x96>
    1108:	ff 0f       	add	r31, r31
    110a:	bb 1f       	adc	r27, r27
    110c:	66 1f       	adc	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	c2 f7       	brpl	.-16     	; 0x1104 <__addsf3x+0x6a>
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <__addsf3x+0x98>
    1116:	ba 0f       	add	r27, r26
    1118:	62 1f       	adc	r22, r18
    111a:	73 1f       	adc	r23, r19
    111c:	84 1f       	adc	r24, r20
    111e:	48 f4       	brcc	.+18     	; 0x1132 <__addsf3x+0x98>
    1120:	87 95       	ror	r24
    1122:	77 95       	ror	r23
    1124:	67 95       	ror	r22
    1126:	b7 95       	ror	r27
    1128:	f7 95       	ror	r31
    112a:	9e 3f       	cpi	r25, 0xFE	; 254
    112c:	08 f0       	brcs	.+2      	; 0x1130 <__addsf3x+0x96>
    112e:	b3 cf       	rjmp	.-154    	; 0x1096 <__addsf3+0x1e>
    1130:	93 95       	inc	r25
    1132:	88 0f       	add	r24, r24
    1134:	08 f0       	brcs	.+2      	; 0x1138 <__addsf3x+0x9e>
    1136:	99 27       	eor	r25, r25
    1138:	ee 0f       	add	r30, r30
    113a:	97 95       	ror	r25
    113c:	87 95       	ror	r24
    113e:	08 95       	ret

00001140 <__floatunsisf>:
    1140:	e8 94       	clt
    1142:	09 c0       	rjmp	.+18     	; 0x1156 <__floatsisf+0x12>

00001144 <__floatsisf>:
    1144:	97 fb       	bst	r25, 7
    1146:	3e f4       	brtc	.+14     	; 0x1156 <__floatsisf+0x12>
    1148:	90 95       	com	r25
    114a:	80 95       	com	r24
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	99 23       	and	r25, r25
    1158:	a9 f0       	breq	.+42     	; 0x1184 <__floatsisf+0x40>
    115a:	f9 2f       	mov	r31, r25
    115c:	96 e9       	ldi	r25, 0x96	; 150
    115e:	bb 27       	eor	r27, r27
    1160:	93 95       	inc	r25
    1162:	f6 95       	lsr	r31
    1164:	87 95       	ror	r24
    1166:	77 95       	ror	r23
    1168:	67 95       	ror	r22
    116a:	b7 95       	ror	r27
    116c:	f1 11       	cpse	r31, r1
    116e:	f8 cf       	rjmp	.-16     	; 0x1160 <__floatsisf+0x1c>
    1170:	fa f4       	brpl	.+62     	; 0x11b0 <__floatsisf+0x6c>
    1172:	bb 0f       	add	r27, r27
    1174:	11 f4       	brne	.+4      	; 0x117a <__floatsisf+0x36>
    1176:	60 ff       	sbrs	r22, 0
    1178:	1b c0       	rjmp	.+54     	; 0x11b0 <__floatsisf+0x6c>
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	16 c0       	rjmp	.+44     	; 0x11b0 <__floatsisf+0x6c>
    1184:	88 23       	and	r24, r24
    1186:	11 f0       	breq	.+4      	; 0x118c <__floatsisf+0x48>
    1188:	96 e9       	ldi	r25, 0x96	; 150
    118a:	11 c0       	rjmp	.+34     	; 0x11ae <__floatsisf+0x6a>
    118c:	77 23       	and	r23, r23
    118e:	21 f0       	breq	.+8      	; 0x1198 <__floatsisf+0x54>
    1190:	9e e8       	ldi	r25, 0x8E	; 142
    1192:	87 2f       	mov	r24, r23
    1194:	76 2f       	mov	r23, r22
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <__floatsisf+0x5e>
    1198:	66 23       	and	r22, r22
    119a:	71 f0       	breq	.+28     	; 0x11b8 <__floatsisf+0x74>
    119c:	96 e8       	ldi	r25, 0x86	; 134
    119e:	86 2f       	mov	r24, r22
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	2a f0       	brmi	.+10     	; 0x11b0 <__floatsisf+0x6c>
    11a6:	9a 95       	dec	r25
    11a8:	66 0f       	add	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	88 1f       	adc	r24, r24
    11ae:	da f7       	brpl	.-10     	; 0x11a6 <__floatsisf+0x62>
    11b0:	88 0f       	add	r24, r24
    11b2:	96 95       	lsr	r25
    11b4:	87 95       	ror	r24
    11b6:	97 f9       	bld	r25, 7
    11b8:	08 95       	ret

000011ba <__fp_inf>:
    11ba:	97 f9       	bld	r25, 7
    11bc:	9f 67       	ori	r25, 0x7F	; 127
    11be:	80 e8       	ldi	r24, 0x80	; 128
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	08 95       	ret

000011c6 <__fp_nan>:
    11c6:	9f ef       	ldi	r25, 0xFF	; 255
    11c8:	80 ec       	ldi	r24, 0xC0	; 192
    11ca:	08 95       	ret

000011cc <__fp_pscA>:
    11cc:	00 24       	eor	r0, r0
    11ce:	0a 94       	dec	r0
    11d0:	16 16       	cp	r1, r22
    11d2:	17 06       	cpc	r1, r23
    11d4:	18 06       	cpc	r1, r24
    11d6:	09 06       	cpc	r0, r25
    11d8:	08 95       	ret

000011da <__fp_pscB>:
    11da:	00 24       	eor	r0, r0
    11dc:	0a 94       	dec	r0
    11de:	12 16       	cp	r1, r18
    11e0:	13 06       	cpc	r1, r19
    11e2:	14 06       	cpc	r1, r20
    11e4:	05 06       	cpc	r0, r21
    11e6:	08 95       	ret

000011e8 <__fp_round>:
    11e8:	09 2e       	mov	r0, r25
    11ea:	03 94       	inc	r0
    11ec:	00 0c       	add	r0, r0
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <__fp_round+0xc>
    11f0:	88 23       	and	r24, r24
    11f2:	52 f0       	brmi	.+20     	; 0x1208 <__fp_round+0x20>
    11f4:	bb 0f       	add	r27, r27
    11f6:	40 f4       	brcc	.+16     	; 0x1208 <__fp_round+0x20>
    11f8:	bf 2b       	or	r27, r31
    11fa:	11 f4       	brne	.+4      	; 0x1200 <__fp_round+0x18>
    11fc:	60 ff       	sbrs	r22, 0
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <__fp_round+0x20>
    1200:	6f 5f       	subi	r22, 0xFF	; 255
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	08 95       	ret

0000120a <__fp_split3>:
    120a:	57 fd       	sbrc	r21, 7
    120c:	90 58       	subi	r25, 0x80	; 128
    120e:	44 0f       	add	r20, r20
    1210:	55 1f       	adc	r21, r21
    1212:	59 f0       	breq	.+22     	; 0x122a <__fp_splitA+0x10>
    1214:	5f 3f       	cpi	r21, 0xFF	; 255
    1216:	71 f0       	breq	.+28     	; 0x1234 <__fp_splitA+0x1a>
    1218:	47 95       	ror	r20

0000121a <__fp_splitA>:
    121a:	88 0f       	add	r24, r24
    121c:	97 fb       	bst	r25, 7
    121e:	99 1f       	adc	r25, r25
    1220:	61 f0       	breq	.+24     	; 0x123a <__fp_splitA+0x20>
    1222:	9f 3f       	cpi	r25, 0xFF	; 255
    1224:	79 f0       	breq	.+30     	; 0x1244 <__fp_splitA+0x2a>
    1226:	87 95       	ror	r24
    1228:	08 95       	ret
    122a:	12 16       	cp	r1, r18
    122c:	13 06       	cpc	r1, r19
    122e:	14 06       	cpc	r1, r20
    1230:	55 1f       	adc	r21, r21
    1232:	f2 cf       	rjmp	.-28     	; 0x1218 <__fp_split3+0xe>
    1234:	46 95       	lsr	r20
    1236:	f1 df       	rcall	.-30     	; 0x121a <__fp_splitA>
    1238:	08 c0       	rjmp	.+16     	; 0x124a <__fp_splitA+0x30>
    123a:	16 16       	cp	r1, r22
    123c:	17 06       	cpc	r1, r23
    123e:	18 06       	cpc	r1, r24
    1240:	99 1f       	adc	r25, r25
    1242:	f1 cf       	rjmp	.-30     	; 0x1226 <__fp_splitA+0xc>
    1244:	86 95       	lsr	r24
    1246:	71 05       	cpc	r23, r1
    1248:	61 05       	cpc	r22, r1
    124a:	08 94       	sec
    124c:	08 95       	ret

0000124e <__fp_zero>:
    124e:	e8 94       	clt

00001250 <__fp_szero>:
    1250:	bb 27       	eor	r27, r27
    1252:	66 27       	eor	r22, r22
    1254:	77 27       	eor	r23, r23
    1256:	cb 01       	movw	r24, r22
    1258:	97 f9       	bld	r25, 7
    125a:	08 95       	ret

0000125c <__mulsf3>:
    125c:	0b d0       	rcall	.+22     	; 0x1274 <__mulsf3x>
    125e:	c4 cf       	rjmp	.-120    	; 0x11e8 <__fp_round>
    1260:	b5 df       	rcall	.-150    	; 0x11cc <__fp_pscA>
    1262:	28 f0       	brcs	.+10     	; 0x126e <__mulsf3+0x12>
    1264:	ba df       	rcall	.-140    	; 0x11da <__fp_pscB>
    1266:	18 f0       	brcs	.+6      	; 0x126e <__mulsf3+0x12>
    1268:	95 23       	and	r25, r21
    126a:	09 f0       	breq	.+2      	; 0x126e <__mulsf3+0x12>
    126c:	a6 cf       	rjmp	.-180    	; 0x11ba <__fp_inf>
    126e:	ab cf       	rjmp	.-170    	; 0x11c6 <__fp_nan>
    1270:	11 24       	eor	r1, r1
    1272:	ee cf       	rjmp	.-36     	; 0x1250 <__fp_szero>

00001274 <__mulsf3x>:
    1274:	ca df       	rcall	.-108    	; 0x120a <__fp_split3>
    1276:	a0 f3       	brcs	.-24     	; 0x1260 <__mulsf3+0x4>

00001278 <__mulsf3_pse>:
    1278:	95 9f       	mul	r25, r21
    127a:	d1 f3       	breq	.-12     	; 0x1270 <__mulsf3+0x14>
    127c:	95 0f       	add	r25, r21
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	55 1f       	adc	r21, r21
    1282:	62 9f       	mul	r22, r18
    1284:	f0 01       	movw	r30, r0
    1286:	72 9f       	mul	r23, r18
    1288:	bb 27       	eor	r27, r27
    128a:	f0 0d       	add	r31, r0
    128c:	b1 1d       	adc	r27, r1
    128e:	63 9f       	mul	r22, r19
    1290:	aa 27       	eor	r26, r26
    1292:	f0 0d       	add	r31, r0
    1294:	b1 1d       	adc	r27, r1
    1296:	aa 1f       	adc	r26, r26
    1298:	64 9f       	mul	r22, r20
    129a:	66 27       	eor	r22, r22
    129c:	b0 0d       	add	r27, r0
    129e:	a1 1d       	adc	r26, r1
    12a0:	66 1f       	adc	r22, r22
    12a2:	82 9f       	mul	r24, r18
    12a4:	22 27       	eor	r18, r18
    12a6:	b0 0d       	add	r27, r0
    12a8:	a1 1d       	adc	r26, r1
    12aa:	62 1f       	adc	r22, r18
    12ac:	73 9f       	mul	r23, r19
    12ae:	b0 0d       	add	r27, r0
    12b0:	a1 1d       	adc	r26, r1
    12b2:	62 1f       	adc	r22, r18
    12b4:	83 9f       	mul	r24, r19
    12b6:	a0 0d       	add	r26, r0
    12b8:	61 1d       	adc	r22, r1
    12ba:	22 1f       	adc	r18, r18
    12bc:	74 9f       	mul	r23, r20
    12be:	33 27       	eor	r19, r19
    12c0:	a0 0d       	add	r26, r0
    12c2:	61 1d       	adc	r22, r1
    12c4:	23 1f       	adc	r18, r19
    12c6:	84 9f       	mul	r24, r20
    12c8:	60 0d       	add	r22, r0
    12ca:	21 1d       	adc	r18, r1
    12cc:	82 2f       	mov	r24, r18
    12ce:	76 2f       	mov	r23, r22
    12d0:	6a 2f       	mov	r22, r26
    12d2:	11 24       	eor	r1, r1
    12d4:	9f 57       	subi	r25, 0x7F	; 127
    12d6:	50 40       	sbci	r21, 0x00	; 0
    12d8:	8a f0       	brmi	.+34     	; 0x12fc <__mulsf3_pse+0x84>
    12da:	e1 f0       	breq	.+56     	; 0x1314 <__mulsf3_pse+0x9c>
    12dc:	88 23       	and	r24, r24
    12de:	4a f0       	brmi	.+18     	; 0x12f2 <__mulsf3_pse+0x7a>
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	bb 1f       	adc	r27, r27
    12e6:	66 1f       	adc	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	91 50       	subi	r25, 0x01	; 1
    12ee:	50 40       	sbci	r21, 0x00	; 0
    12f0:	a9 f7       	brne	.-22     	; 0x12dc <__mulsf3_pse+0x64>
    12f2:	9e 3f       	cpi	r25, 0xFE	; 254
    12f4:	51 05       	cpc	r21, r1
    12f6:	70 f0       	brcs	.+28     	; 0x1314 <__mulsf3_pse+0x9c>
    12f8:	60 cf       	rjmp	.-320    	; 0x11ba <__fp_inf>
    12fa:	aa cf       	rjmp	.-172    	; 0x1250 <__fp_szero>
    12fc:	5f 3f       	cpi	r21, 0xFF	; 255
    12fe:	ec f3       	brlt	.-6      	; 0x12fa <__mulsf3_pse+0x82>
    1300:	98 3e       	cpi	r25, 0xE8	; 232
    1302:	dc f3       	brlt	.-10     	; 0x12fa <__mulsf3_pse+0x82>
    1304:	86 95       	lsr	r24
    1306:	77 95       	ror	r23
    1308:	67 95       	ror	r22
    130a:	b7 95       	ror	r27
    130c:	f7 95       	ror	r31
    130e:	e7 95       	ror	r30
    1310:	9f 5f       	subi	r25, 0xFF	; 255
    1312:	c1 f7       	brne	.-16     	; 0x1304 <__mulsf3_pse+0x8c>
    1314:	fe 2b       	or	r31, r30
    1316:	88 0f       	add	r24, r24
    1318:	91 1d       	adc	r25, r1
    131a:	96 95       	lsr	r25
    131c:	87 95       	ror	r24
    131e:	97 f9       	bld	r25, 7
    1320:	08 95       	ret

00001322 <vfprintf>:
    1322:	2f 92       	push	r2
    1324:	3f 92       	push	r3
    1326:	4f 92       	push	r4
    1328:	5f 92       	push	r5
    132a:	6f 92       	push	r6
    132c:	7f 92       	push	r7
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	60 97       	sbiw	r28, 0x10	; 16
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	7c 01       	movw	r14, r24
    1352:	1b 01       	movw	r2, r22
    1354:	6a 01       	movw	r12, r20
    1356:	fc 01       	movw	r30, r24
    1358:	16 82       	std	Z+6, r1	; 0x06
    135a:	17 82       	std	Z+7, r1	; 0x07
    135c:	83 81       	ldd	r24, Z+3	; 0x03
    135e:	81 ff       	sbrs	r24, 1
    1360:	2a c3       	rjmp	.+1620   	; 0x19b6 <vfprintf+0x694>
    1362:	9e 01       	movw	r18, r28
    1364:	2f 5f       	subi	r18, 0xFF	; 255
    1366:	3f 4f       	sbci	r19, 0xFF	; 255
    1368:	39 01       	movw	r6, r18
    136a:	f7 01       	movw	r30, r14
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	f1 01       	movw	r30, r2
    1370:	93 fd       	sbrc	r25, 3
    1372:	85 91       	lpm	r24, Z+
    1374:	93 ff       	sbrs	r25, 3
    1376:	81 91       	ld	r24, Z+
    1378:	1f 01       	movw	r2, r30
    137a:	88 23       	and	r24, r24
    137c:	09 f4       	brne	.+2      	; 0x1380 <vfprintf+0x5e>
    137e:	17 c3       	rjmp	.+1582   	; 0x19ae <vfprintf+0x68c>
    1380:	85 32       	cpi	r24, 0x25	; 37
    1382:	39 f4       	brne	.+14     	; 0x1392 <vfprintf+0x70>
    1384:	93 fd       	sbrc	r25, 3
    1386:	85 91       	lpm	r24, Z+
    1388:	93 ff       	sbrs	r25, 3
    138a:	81 91       	ld	r24, Z+
    138c:	1f 01       	movw	r2, r30
    138e:	85 32       	cpi	r24, 0x25	; 37
    1390:	31 f4       	brne	.+12     	; 0x139e <vfprintf+0x7c>
    1392:	b7 01       	movw	r22, r14
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a2 d4       	rcall	.+2372   	; 0x1cdc <fputc>
    1398:	56 01       	movw	r10, r12
    139a:	65 01       	movw	r12, r10
    139c:	e6 cf       	rjmp	.-52     	; 0x136a <vfprintf+0x48>
    139e:	10 e0       	ldi	r17, 0x00	; 0
    13a0:	51 2c       	mov	r5, r1
    13a2:	91 2c       	mov	r9, r1
    13a4:	ff e1       	ldi	r31, 0x1F	; 31
    13a6:	f9 15       	cp	r31, r9
    13a8:	d8 f0       	brcs	.+54     	; 0x13e0 <vfprintf+0xbe>
    13aa:	8b 32       	cpi	r24, 0x2B	; 43
    13ac:	79 f0       	breq	.+30     	; 0x13cc <vfprintf+0xaa>
    13ae:	38 f4       	brcc	.+14     	; 0x13be <vfprintf+0x9c>
    13b0:	80 32       	cpi	r24, 0x20	; 32
    13b2:	79 f0       	breq	.+30     	; 0x13d2 <vfprintf+0xb0>
    13b4:	83 32       	cpi	r24, 0x23	; 35
    13b6:	a1 f4       	brne	.+40     	; 0x13e0 <vfprintf+0xbe>
    13b8:	f9 2d       	mov	r31, r9
    13ba:	f0 61       	ori	r31, 0x10	; 16
    13bc:	2e c0       	rjmp	.+92     	; 0x141a <vfprintf+0xf8>
    13be:	8d 32       	cpi	r24, 0x2D	; 45
    13c0:	61 f0       	breq	.+24     	; 0x13da <vfprintf+0xb8>
    13c2:	80 33       	cpi	r24, 0x30	; 48
    13c4:	69 f4       	brne	.+26     	; 0x13e0 <vfprintf+0xbe>
    13c6:	29 2d       	mov	r18, r9
    13c8:	21 60       	ori	r18, 0x01	; 1
    13ca:	2d c0       	rjmp	.+90     	; 0x1426 <vfprintf+0x104>
    13cc:	39 2d       	mov	r19, r9
    13ce:	32 60       	ori	r19, 0x02	; 2
    13d0:	93 2e       	mov	r9, r19
    13d2:	89 2d       	mov	r24, r9
    13d4:	84 60       	ori	r24, 0x04	; 4
    13d6:	98 2e       	mov	r9, r24
    13d8:	2a c0       	rjmp	.+84     	; 0x142e <vfprintf+0x10c>
    13da:	e9 2d       	mov	r30, r9
    13dc:	e8 60       	ori	r30, 0x08	; 8
    13de:	15 c0       	rjmp	.+42     	; 0x140a <vfprintf+0xe8>
    13e0:	97 fc       	sbrc	r9, 7
    13e2:	2d c0       	rjmp	.+90     	; 0x143e <vfprintf+0x11c>
    13e4:	20 ed       	ldi	r18, 0xD0	; 208
    13e6:	28 0f       	add	r18, r24
    13e8:	2a 30       	cpi	r18, 0x0A	; 10
    13ea:	88 f4       	brcc	.+34     	; 0x140e <vfprintf+0xec>
    13ec:	96 fe       	sbrs	r9, 6
    13ee:	06 c0       	rjmp	.+12     	; 0x13fc <vfprintf+0xda>
    13f0:	3a e0       	ldi	r19, 0x0A	; 10
    13f2:	13 9f       	mul	r17, r19
    13f4:	20 0d       	add	r18, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	12 2f       	mov	r17, r18
    13fa:	19 c0       	rjmp	.+50     	; 0x142e <vfprintf+0x10c>
    13fc:	8a e0       	ldi	r24, 0x0A	; 10
    13fe:	58 9e       	mul	r5, r24
    1400:	20 0d       	add	r18, r0
    1402:	11 24       	eor	r1, r1
    1404:	52 2e       	mov	r5, r18
    1406:	e9 2d       	mov	r30, r9
    1408:	e0 62       	ori	r30, 0x20	; 32
    140a:	9e 2e       	mov	r9, r30
    140c:	10 c0       	rjmp	.+32     	; 0x142e <vfprintf+0x10c>
    140e:	8e 32       	cpi	r24, 0x2E	; 46
    1410:	31 f4       	brne	.+12     	; 0x141e <vfprintf+0xfc>
    1412:	96 fc       	sbrc	r9, 6
    1414:	cc c2       	rjmp	.+1432   	; 0x19ae <vfprintf+0x68c>
    1416:	f9 2d       	mov	r31, r9
    1418:	f0 64       	ori	r31, 0x40	; 64
    141a:	9f 2e       	mov	r9, r31
    141c:	08 c0       	rjmp	.+16     	; 0x142e <vfprintf+0x10c>
    141e:	8c 36       	cpi	r24, 0x6C	; 108
    1420:	21 f4       	brne	.+8      	; 0x142a <vfprintf+0x108>
    1422:	29 2d       	mov	r18, r9
    1424:	20 68       	ori	r18, 0x80	; 128
    1426:	92 2e       	mov	r9, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <vfprintf+0x10c>
    142a:	88 36       	cpi	r24, 0x68	; 104
    142c:	41 f4       	brne	.+16     	; 0x143e <vfprintf+0x11c>
    142e:	f1 01       	movw	r30, r2
    1430:	93 fd       	sbrc	r25, 3
    1432:	85 91       	lpm	r24, Z+
    1434:	93 ff       	sbrs	r25, 3
    1436:	81 91       	ld	r24, Z+
    1438:	1f 01       	movw	r2, r30
    143a:	81 11       	cpse	r24, r1
    143c:	b3 cf       	rjmp	.-154    	; 0x13a4 <vfprintf+0x82>
    143e:	9b eb       	ldi	r25, 0xBB	; 187
    1440:	98 0f       	add	r25, r24
    1442:	93 30       	cpi	r25, 0x03	; 3
    1444:	20 f4       	brcc	.+8      	; 0x144e <vfprintf+0x12c>
    1446:	99 2d       	mov	r25, r9
    1448:	90 61       	ori	r25, 0x10	; 16
    144a:	80 5e       	subi	r24, 0xE0	; 224
    144c:	07 c0       	rjmp	.+14     	; 0x145c <vfprintf+0x13a>
    144e:	9b e9       	ldi	r25, 0x9B	; 155
    1450:	98 0f       	add	r25, r24
    1452:	93 30       	cpi	r25, 0x03	; 3
    1454:	08 f0       	brcs	.+2      	; 0x1458 <vfprintf+0x136>
    1456:	59 c1       	rjmp	.+690    	; 0x170a <vfprintf+0x3e8>
    1458:	99 2d       	mov	r25, r9
    145a:	9f 7e       	andi	r25, 0xEF	; 239
    145c:	96 ff       	sbrs	r25, 6
    145e:	16 e0       	ldi	r17, 0x06	; 6
    1460:	9f 73       	andi	r25, 0x3F	; 63
    1462:	99 2e       	mov	r9, r25
    1464:	85 36       	cpi	r24, 0x65	; 101
    1466:	19 f4       	brne	.+6      	; 0x146e <vfprintf+0x14c>
    1468:	90 64       	ori	r25, 0x40	; 64
    146a:	99 2e       	mov	r9, r25
    146c:	08 c0       	rjmp	.+16     	; 0x147e <vfprintf+0x15c>
    146e:	86 36       	cpi	r24, 0x66	; 102
    1470:	21 f4       	brne	.+8      	; 0x147a <vfprintf+0x158>
    1472:	39 2f       	mov	r19, r25
    1474:	30 68       	ori	r19, 0x80	; 128
    1476:	93 2e       	mov	r9, r19
    1478:	02 c0       	rjmp	.+4      	; 0x147e <vfprintf+0x15c>
    147a:	11 11       	cpse	r17, r1
    147c:	11 50       	subi	r17, 0x01	; 1
    147e:	97 fe       	sbrs	r9, 7
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <vfprintf+0x16e>
    1482:	1c 33       	cpi	r17, 0x3C	; 60
    1484:	50 f4       	brcc	.+20     	; 0x149a <vfprintf+0x178>
    1486:	44 24       	eor	r4, r4
    1488:	43 94       	inc	r4
    148a:	41 0e       	add	r4, r17
    148c:	27 e0       	ldi	r18, 0x07	; 7
    148e:	0b c0       	rjmp	.+22     	; 0x14a6 <vfprintf+0x184>
    1490:	18 30       	cpi	r17, 0x08	; 8
    1492:	38 f0       	brcs	.+14     	; 0x14a2 <vfprintf+0x180>
    1494:	27 e0       	ldi	r18, 0x07	; 7
    1496:	17 e0       	ldi	r17, 0x07	; 7
    1498:	05 c0       	rjmp	.+10     	; 0x14a4 <vfprintf+0x182>
    149a:	27 e0       	ldi	r18, 0x07	; 7
    149c:	9c e3       	ldi	r25, 0x3C	; 60
    149e:	49 2e       	mov	r4, r25
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <vfprintf+0x184>
    14a2:	21 2f       	mov	r18, r17
    14a4:	41 2c       	mov	r4, r1
    14a6:	56 01       	movw	r10, r12
    14a8:	84 e0       	ldi	r24, 0x04	; 4
    14aa:	a8 0e       	add	r10, r24
    14ac:	b1 1c       	adc	r11, r1
    14ae:	f6 01       	movw	r30, r12
    14b0:	60 81       	ld	r22, Z
    14b2:	71 81       	ldd	r23, Z+1	; 0x01
    14b4:	82 81       	ldd	r24, Z+2	; 0x02
    14b6:	93 81       	ldd	r25, Z+3	; 0x03
    14b8:	04 2d       	mov	r16, r4
    14ba:	a3 01       	movw	r20, r6
    14bc:	d7 d2       	rcall	.+1454   	; 0x1a6c <__ftoa_engine>
    14be:	6c 01       	movw	r12, r24
    14c0:	f9 81       	ldd	r31, Y+1	; 0x01
    14c2:	fc 87       	std	Y+12, r31	; 0x0c
    14c4:	f0 ff       	sbrs	r31, 0
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <vfprintf+0x1aa>
    14c8:	f3 ff       	sbrs	r31, 3
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <vfprintf+0x1b6>
    14cc:	91 fc       	sbrc	r9, 1
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <vfprintf+0x1ba>
    14d0:	92 fe       	sbrs	r9, 2
    14d2:	06 c0       	rjmp	.+12     	; 0x14e0 <vfprintf+0x1be>
    14d4:	00 e2       	ldi	r16, 0x20	; 32
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <vfprintf+0x1c0>
    14d8:	0d e2       	ldi	r16, 0x2D	; 45
    14da:	03 c0       	rjmp	.+6      	; 0x14e2 <vfprintf+0x1c0>
    14dc:	0b e2       	ldi	r16, 0x2B	; 43
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <vfprintf+0x1c0>
    14e0:	00 e0       	ldi	r16, 0x00	; 0
    14e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    14e4:	8c 70       	andi	r24, 0x0C	; 12
    14e6:	19 f0       	breq	.+6      	; 0x14ee <vfprintf+0x1cc>
    14e8:	01 11       	cpse	r16, r1
    14ea:	43 c2       	rjmp	.+1158   	; 0x1972 <vfprintf+0x650>
    14ec:	80 c2       	rjmp	.+1280   	; 0x19ee <vfprintf+0x6cc>
    14ee:	97 fe       	sbrs	r9, 7
    14f0:	10 c0       	rjmp	.+32     	; 0x1512 <vfprintf+0x1f0>
    14f2:	4c 0c       	add	r4, r12
    14f4:	fc 85       	ldd	r31, Y+12	; 0x0c
    14f6:	f4 ff       	sbrs	r31, 4
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <vfprintf+0x1e0>
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	81 33       	cpi	r24, 0x31	; 49
    14fe:	09 f4       	brne	.+2      	; 0x1502 <vfprintf+0x1e0>
    1500:	4a 94       	dec	r4
    1502:	14 14       	cp	r1, r4
    1504:	74 f5       	brge	.+92     	; 0x1562 <vfprintf+0x240>
    1506:	28 e0       	ldi	r18, 0x08	; 8
    1508:	24 15       	cp	r18, r4
    150a:	78 f5       	brcc	.+94     	; 0x156a <vfprintf+0x248>
    150c:	88 e0       	ldi	r24, 0x08	; 8
    150e:	48 2e       	mov	r4, r24
    1510:	2c c0       	rjmp	.+88     	; 0x156a <vfprintf+0x248>
    1512:	96 fc       	sbrc	r9, 6
    1514:	2a c0       	rjmp	.+84     	; 0x156a <vfprintf+0x248>
    1516:	81 2f       	mov	r24, r17
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	8c 15       	cp	r24, r12
    151c:	9d 05       	cpc	r25, r13
    151e:	9c f0       	brlt	.+38     	; 0x1546 <vfprintf+0x224>
    1520:	3c ef       	ldi	r19, 0xFC	; 252
    1522:	c3 16       	cp	r12, r19
    1524:	3f ef       	ldi	r19, 0xFF	; 255
    1526:	d3 06       	cpc	r13, r19
    1528:	74 f0       	brlt	.+28     	; 0x1546 <vfprintf+0x224>
    152a:	89 2d       	mov	r24, r9
    152c:	80 68       	ori	r24, 0x80	; 128
    152e:	98 2e       	mov	r9, r24
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <vfprintf+0x224>
    1532:	e2 e0       	ldi	r30, 0x02	; 2
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	ec 0f       	add	r30, r28
    1538:	fd 1f       	adc	r31, r29
    153a:	e1 0f       	add	r30, r17
    153c:	f1 1d       	adc	r31, r1
    153e:	80 81       	ld	r24, Z
    1540:	80 33       	cpi	r24, 0x30	; 48
    1542:	19 f4       	brne	.+6      	; 0x154a <vfprintf+0x228>
    1544:	11 50       	subi	r17, 0x01	; 1
    1546:	11 11       	cpse	r17, r1
    1548:	f4 cf       	rjmp	.-24     	; 0x1532 <vfprintf+0x210>
    154a:	97 fe       	sbrs	r9, 7
    154c:	0e c0       	rjmp	.+28     	; 0x156a <vfprintf+0x248>
    154e:	44 24       	eor	r4, r4
    1550:	43 94       	inc	r4
    1552:	41 0e       	add	r4, r17
    1554:	81 2f       	mov	r24, r17
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	c8 16       	cp	r12, r24
    155a:	d9 06       	cpc	r13, r25
    155c:	2c f4       	brge	.+10     	; 0x1568 <vfprintf+0x246>
    155e:	1c 19       	sub	r17, r12
    1560:	04 c0       	rjmp	.+8      	; 0x156a <vfprintf+0x248>
    1562:	44 24       	eor	r4, r4
    1564:	43 94       	inc	r4
    1566:	01 c0       	rjmp	.+2      	; 0x156a <vfprintf+0x248>
    1568:	10 e0       	ldi	r17, 0x00	; 0
    156a:	97 fe       	sbrs	r9, 7
    156c:	06 c0       	rjmp	.+12     	; 0x157a <vfprintf+0x258>
    156e:	1c 14       	cp	r1, r12
    1570:	1d 04       	cpc	r1, r13
    1572:	34 f4       	brge	.+12     	; 0x1580 <vfprintf+0x25e>
    1574:	c6 01       	movw	r24, r12
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <vfprintf+0x262>
    157a:	85 e0       	ldi	r24, 0x05	; 5
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <vfprintf+0x262>
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	01 11       	cpse	r16, r1
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	11 23       	and	r17, r17
    158a:	31 f0       	breq	.+12     	; 0x1598 <vfprintf+0x276>
    158c:	21 2f       	mov	r18, r17
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	2f 5f       	subi	r18, 0xFF	; 255
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	82 0f       	add	r24, r18
    1596:	93 1f       	adc	r25, r19
    1598:	25 2d       	mov	r18, r5
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	82 17       	cp	r24, r18
    159e:	93 07       	cpc	r25, r19
    15a0:	14 f4       	brge	.+4      	; 0x15a6 <vfprintf+0x284>
    15a2:	58 1a       	sub	r5, r24
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <vfprintf+0x286>
    15a6:	51 2c       	mov	r5, r1
    15a8:	89 2d       	mov	r24, r9
    15aa:	89 70       	andi	r24, 0x09	; 9
    15ac:	41 f4       	brne	.+16     	; 0x15be <vfprintf+0x29c>
    15ae:	55 20       	and	r5, r5
    15b0:	31 f0       	breq	.+12     	; 0x15be <vfprintf+0x29c>
    15b2:	b7 01       	movw	r22, r14
    15b4:	80 e2       	ldi	r24, 0x20	; 32
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	91 d3       	rcall	.+1826   	; 0x1cdc <fputc>
    15ba:	5a 94       	dec	r5
    15bc:	f8 cf       	rjmp	.-16     	; 0x15ae <vfprintf+0x28c>
    15be:	00 23       	and	r16, r16
    15c0:	21 f0       	breq	.+8      	; 0x15ca <vfprintf+0x2a8>
    15c2:	b7 01       	movw	r22, r14
    15c4:	80 2f       	mov	r24, r16
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	89 d3       	rcall	.+1810   	; 0x1cdc <fputc>
    15ca:	93 fc       	sbrc	r9, 3
    15cc:	08 c0       	rjmp	.+16     	; 0x15de <vfprintf+0x2bc>
    15ce:	55 20       	and	r5, r5
    15d0:	31 f0       	breq	.+12     	; 0x15de <vfprintf+0x2bc>
    15d2:	b7 01       	movw	r22, r14
    15d4:	80 e3       	ldi	r24, 0x30	; 48
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	81 d3       	rcall	.+1794   	; 0x1cdc <fputc>
    15da:	5a 94       	dec	r5
    15dc:	f8 cf       	rjmp	.-16     	; 0x15ce <vfprintf+0x2ac>
    15de:	97 fe       	sbrs	r9, 7
    15e0:	4a c0       	rjmp	.+148    	; 0x1676 <vfprintf+0x354>
    15e2:	46 01       	movw	r8, r12
    15e4:	d7 fe       	sbrs	r13, 7
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <vfprintf+0x2ca>
    15e8:	81 2c       	mov	r8, r1
    15ea:	91 2c       	mov	r9, r1
    15ec:	c6 01       	movw	r24, r12
    15ee:	88 19       	sub	r24, r8
    15f0:	99 09       	sbc	r25, r9
    15f2:	f3 01       	movw	r30, r6
    15f4:	e8 0f       	add	r30, r24
    15f6:	f9 1f       	adc	r31, r25
    15f8:	ed 87       	std	Y+13, r30	; 0x0d
    15fa:	fe 87       	std	Y+14, r31	; 0x0e
    15fc:	96 01       	movw	r18, r12
    15fe:	24 19       	sub	r18, r4
    1600:	31 09       	sbc	r19, r1
    1602:	2f 87       	std	Y+15, r18	; 0x0f
    1604:	38 8b       	std	Y+16, r19	; 0x10
    1606:	01 2f       	mov	r16, r17
    1608:	10 e0       	ldi	r17, 0x00	; 0
    160a:	11 95       	neg	r17
    160c:	01 95       	neg	r16
    160e:	11 09       	sbc	r17, r1
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	83 16       	cp	r8, r19
    1614:	93 06       	cpc	r9, r19
    1616:	21 f4       	brne	.+8      	; 0x1620 <vfprintf+0x2fe>
    1618:	b7 01       	movw	r22, r14
    161a:	8e e2       	ldi	r24, 0x2E	; 46
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	5e d3       	rcall	.+1724   	; 0x1cdc <fputc>
    1620:	c8 14       	cp	r12, r8
    1622:	d9 04       	cpc	r13, r9
    1624:	4c f0       	brlt	.+18     	; 0x1638 <vfprintf+0x316>
    1626:	8f 85       	ldd	r24, Y+15	; 0x0f
    1628:	98 89       	ldd	r25, Y+16	; 0x10
    162a:	88 15       	cp	r24, r8
    162c:	99 05       	cpc	r25, r9
    162e:	24 f4       	brge	.+8      	; 0x1638 <vfprintf+0x316>
    1630:	ed 85       	ldd	r30, Y+13	; 0x0d
    1632:	fe 85       	ldd	r31, Y+14	; 0x0e
    1634:	81 81       	ldd	r24, Z+1	; 0x01
    1636:	01 c0       	rjmp	.+2      	; 0x163a <vfprintf+0x318>
    1638:	80 e3       	ldi	r24, 0x30	; 48
    163a:	f1 e0       	ldi	r31, 0x01	; 1
    163c:	8f 1a       	sub	r8, r31
    163e:	91 08       	sbc	r9, r1
    1640:	2d 85       	ldd	r18, Y+13	; 0x0d
    1642:	3e 85       	ldd	r19, Y+14	; 0x0e
    1644:	2f 5f       	subi	r18, 0xFF	; 255
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	2d 87       	std	Y+13, r18	; 0x0d
    164a:	3e 87       	std	Y+14, r19	; 0x0e
    164c:	80 16       	cp	r8, r16
    164e:	91 06       	cpc	r9, r17
    1650:	24 f0       	brlt	.+8      	; 0x165a <vfprintf+0x338>
    1652:	b7 01       	movw	r22, r14
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	42 d3       	rcall	.+1668   	; 0x1cdc <fputc>
    1658:	db cf       	rjmp	.-74     	; 0x1610 <vfprintf+0x2ee>
    165a:	c8 14       	cp	r12, r8
    165c:	d9 04       	cpc	r13, r9
    165e:	41 f4       	brne	.+16     	; 0x1670 <vfprintf+0x34e>
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	96 33       	cpi	r25, 0x36	; 54
    1664:	20 f4       	brcc	.+8      	; 0x166e <vfprintf+0x34c>
    1666:	95 33       	cpi	r25, 0x35	; 53
    1668:	19 f4       	brne	.+6      	; 0x1670 <vfprintf+0x34e>
    166a:	3c 85       	ldd	r19, Y+12	; 0x0c
    166c:	34 ff       	sbrs	r19, 4
    166e:	81 e3       	ldi	r24, 0x31	; 49
    1670:	b7 01       	movw	r22, r14
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	48 c0       	rjmp	.+144    	; 0x1706 <vfprintf+0x3e4>
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	81 33       	cpi	r24, 0x31	; 49
    167a:	19 f0       	breq	.+6      	; 0x1682 <vfprintf+0x360>
    167c:	9c 85       	ldd	r25, Y+12	; 0x0c
    167e:	9f 7e       	andi	r25, 0xEF	; 239
    1680:	9c 87       	std	Y+12, r25	; 0x0c
    1682:	b7 01       	movw	r22, r14
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	2a d3       	rcall	.+1620   	; 0x1cdc <fputc>
    1688:	11 11       	cpse	r17, r1
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <vfprintf+0x374>
    168c:	94 fc       	sbrc	r9, 4
    168e:	16 c0       	rjmp	.+44     	; 0x16bc <vfprintf+0x39a>
    1690:	85 e6       	ldi	r24, 0x65	; 101
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	15 c0       	rjmp	.+42     	; 0x16c0 <vfprintf+0x39e>
    1696:	b7 01       	movw	r22, r14
    1698:	8e e2       	ldi	r24, 0x2E	; 46
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	1f d3       	rcall	.+1598   	; 0x1cdc <fputc>
    169e:	1e 5f       	subi	r17, 0xFE	; 254
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	01 e0       	ldi	r16, 0x01	; 1
    16a4:	08 0f       	add	r16, r24
    16a6:	f3 01       	movw	r30, r6
    16a8:	e8 0f       	add	r30, r24
    16aa:	f1 1d       	adc	r31, r1
    16ac:	80 81       	ld	r24, Z
    16ae:	b7 01       	movw	r22, r14
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	14 d3       	rcall	.+1576   	; 0x1cdc <fputc>
    16b4:	80 2f       	mov	r24, r16
    16b6:	01 13       	cpse	r16, r17
    16b8:	f4 cf       	rjmp	.-24     	; 0x16a2 <vfprintf+0x380>
    16ba:	e8 cf       	rjmp	.-48     	; 0x168c <vfprintf+0x36a>
    16bc:	85 e4       	ldi	r24, 0x45	; 69
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	b7 01       	movw	r22, r14
    16c2:	0c d3       	rcall	.+1560   	; 0x1cdc <fputc>
    16c4:	d7 fc       	sbrc	r13, 7
    16c6:	06 c0       	rjmp	.+12     	; 0x16d4 <vfprintf+0x3b2>
    16c8:	c1 14       	cp	r12, r1
    16ca:	d1 04       	cpc	r13, r1
    16cc:	41 f4       	brne	.+16     	; 0x16de <vfprintf+0x3bc>
    16ce:	ec 85       	ldd	r30, Y+12	; 0x0c
    16d0:	e4 ff       	sbrs	r30, 4
    16d2:	05 c0       	rjmp	.+10     	; 0x16de <vfprintf+0x3bc>
    16d4:	d1 94       	neg	r13
    16d6:	c1 94       	neg	r12
    16d8:	d1 08       	sbc	r13, r1
    16da:	8d e2       	ldi	r24, 0x2D	; 45
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <vfprintf+0x3be>
    16de:	8b e2       	ldi	r24, 0x2B	; 43
    16e0:	b7 01       	movw	r22, r14
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	fb d2       	rcall	.+1526   	; 0x1cdc <fputc>
    16e6:	80 e3       	ldi	r24, 0x30	; 48
    16e8:	2a e0       	ldi	r18, 0x0A	; 10
    16ea:	c2 16       	cp	r12, r18
    16ec:	d1 04       	cpc	r13, r1
    16ee:	2c f0       	brlt	.+10     	; 0x16fa <vfprintf+0x3d8>
    16f0:	8f 5f       	subi	r24, 0xFF	; 255
    16f2:	fa e0       	ldi	r31, 0x0A	; 10
    16f4:	cf 1a       	sub	r12, r31
    16f6:	d1 08       	sbc	r13, r1
    16f8:	f7 cf       	rjmp	.-18     	; 0x16e8 <vfprintf+0x3c6>
    16fa:	b7 01       	movw	r22, r14
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	ee d2       	rcall	.+1500   	; 0x1cdc <fputc>
    1700:	b7 01       	movw	r22, r14
    1702:	c6 01       	movw	r24, r12
    1704:	c0 96       	adiw	r24, 0x30	; 48
    1706:	ea d2       	rcall	.+1492   	; 0x1cdc <fputc>
    1708:	49 c1       	rjmp	.+658    	; 0x199c <vfprintf+0x67a>
    170a:	83 36       	cpi	r24, 0x63	; 99
    170c:	31 f0       	breq	.+12     	; 0x171a <vfprintf+0x3f8>
    170e:	83 37       	cpi	r24, 0x73	; 115
    1710:	79 f0       	breq	.+30     	; 0x1730 <vfprintf+0x40e>
    1712:	83 35       	cpi	r24, 0x53	; 83
    1714:	09 f0       	breq	.+2      	; 0x1718 <vfprintf+0x3f6>
    1716:	52 c0       	rjmp	.+164    	; 0x17bc <vfprintf+0x49a>
    1718:	1f c0       	rjmp	.+62     	; 0x1758 <vfprintf+0x436>
    171a:	56 01       	movw	r10, r12
    171c:	32 e0       	ldi	r19, 0x02	; 2
    171e:	a3 0e       	add	r10, r19
    1720:	b1 1c       	adc	r11, r1
    1722:	f6 01       	movw	r30, r12
    1724:	80 81       	ld	r24, Z
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	01 e0       	ldi	r16, 0x01	; 1
    172a:	10 e0       	ldi	r17, 0x00	; 0
    172c:	63 01       	movw	r12, r6
    172e:	11 c0       	rjmp	.+34     	; 0x1752 <vfprintf+0x430>
    1730:	56 01       	movw	r10, r12
    1732:	f2 e0       	ldi	r31, 0x02	; 2
    1734:	af 0e       	add	r10, r31
    1736:	b1 1c       	adc	r11, r1
    1738:	f6 01       	movw	r30, r12
    173a:	c0 80       	ld	r12, Z
    173c:	d1 80       	ldd	r13, Z+1	; 0x01
    173e:	96 fe       	sbrs	r9, 6
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <vfprintf+0x426>
    1742:	61 2f       	mov	r22, r17
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <vfprintf+0x42a>
    1748:	6f ef       	ldi	r22, 0xFF	; 255
    174a:	7f ef       	ldi	r23, 0xFF	; 255
    174c:	c6 01       	movw	r24, r12
    174e:	71 d2       	rcall	.+1250   	; 0x1c32 <strnlen>
    1750:	8c 01       	movw	r16, r24
    1752:	f9 2d       	mov	r31, r9
    1754:	ff 77       	andi	r31, 0x7F	; 127
    1756:	13 c0       	rjmp	.+38     	; 0x177e <vfprintf+0x45c>
    1758:	56 01       	movw	r10, r12
    175a:	22 e0       	ldi	r18, 0x02	; 2
    175c:	a2 0e       	add	r10, r18
    175e:	b1 1c       	adc	r11, r1
    1760:	f6 01       	movw	r30, r12
    1762:	c0 80       	ld	r12, Z
    1764:	d1 80       	ldd	r13, Z+1	; 0x01
    1766:	96 fe       	sbrs	r9, 6
    1768:	03 c0       	rjmp	.+6      	; 0x1770 <vfprintf+0x44e>
    176a:	61 2f       	mov	r22, r17
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0x452>
    1770:	6f ef       	ldi	r22, 0xFF	; 255
    1772:	7f ef       	ldi	r23, 0xFF	; 255
    1774:	c6 01       	movw	r24, r12
    1776:	52 d2       	rcall	.+1188   	; 0x1c1c <strnlen_P>
    1778:	8c 01       	movw	r16, r24
    177a:	f9 2d       	mov	r31, r9
    177c:	f0 68       	ori	r31, 0x80	; 128
    177e:	9f 2e       	mov	r9, r31
    1780:	f3 fd       	sbrc	r31, 3
    1782:	18 c0       	rjmp	.+48     	; 0x17b4 <vfprintf+0x492>
    1784:	85 2d       	mov	r24, r5
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	08 17       	cp	r16, r24
    178a:	19 07       	cpc	r17, r25
    178c:	98 f4       	brcc	.+38     	; 0x17b4 <vfprintf+0x492>
    178e:	b7 01       	movw	r22, r14
    1790:	80 e2       	ldi	r24, 0x20	; 32
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a3 d2       	rcall	.+1350   	; 0x1cdc <fputc>
    1796:	5a 94       	dec	r5
    1798:	f5 cf       	rjmp	.-22     	; 0x1784 <vfprintf+0x462>
    179a:	f6 01       	movw	r30, r12
    179c:	97 fc       	sbrc	r9, 7
    179e:	85 91       	lpm	r24, Z+
    17a0:	97 fe       	sbrs	r9, 7
    17a2:	81 91       	ld	r24, Z+
    17a4:	6f 01       	movw	r12, r30
    17a6:	b7 01       	movw	r22, r14
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	98 d2       	rcall	.+1328   	; 0x1cdc <fputc>
    17ac:	51 10       	cpse	r5, r1
    17ae:	5a 94       	dec	r5
    17b0:	01 50       	subi	r16, 0x01	; 1
    17b2:	11 09       	sbc	r17, r1
    17b4:	01 15       	cp	r16, r1
    17b6:	11 05       	cpc	r17, r1
    17b8:	81 f7       	brne	.-32     	; 0x179a <vfprintf+0x478>
    17ba:	f0 c0       	rjmp	.+480    	; 0x199c <vfprintf+0x67a>
    17bc:	84 36       	cpi	r24, 0x64	; 100
    17be:	11 f0       	breq	.+4      	; 0x17c4 <vfprintf+0x4a2>
    17c0:	89 36       	cpi	r24, 0x69	; 105
    17c2:	59 f5       	brne	.+86     	; 0x181a <vfprintf+0x4f8>
    17c4:	56 01       	movw	r10, r12
    17c6:	97 fe       	sbrs	r9, 7
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <vfprintf+0x4ba>
    17ca:	24 e0       	ldi	r18, 0x04	; 4
    17cc:	a2 0e       	add	r10, r18
    17ce:	b1 1c       	adc	r11, r1
    17d0:	f6 01       	movw	r30, r12
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	0a c0       	rjmp	.+20     	; 0x17f0 <vfprintf+0x4ce>
    17dc:	f2 e0       	ldi	r31, 0x02	; 2
    17de:	af 0e       	add	r10, r31
    17e0:	b1 1c       	adc	r11, r1
    17e2:	f6 01       	movw	r30, r12
    17e4:	60 81       	ld	r22, Z
    17e6:	71 81       	ldd	r23, Z+1	; 0x01
    17e8:	07 2e       	mov	r0, r23
    17ea:	00 0c       	add	r0, r0
    17ec:	88 0b       	sbc	r24, r24
    17ee:	99 0b       	sbc	r25, r25
    17f0:	f9 2d       	mov	r31, r9
    17f2:	ff 76       	andi	r31, 0x6F	; 111
    17f4:	9f 2e       	mov	r9, r31
    17f6:	97 ff       	sbrs	r25, 7
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <vfprintf+0x4ea>
    17fa:	90 95       	com	r25
    17fc:	80 95       	com	r24
    17fe:	70 95       	com	r23
    1800:	61 95       	neg	r22
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	f0 68       	ori	r31, 0x80	; 128
    180a:	9f 2e       	mov	r9, r31
    180c:	2a e0       	ldi	r18, 0x0A	; 10
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	a3 01       	movw	r20, r6
    1812:	c6 d2       	rcall	.+1420   	; 0x1da0 <__ultoa_invert>
    1814:	c8 2e       	mov	r12, r24
    1816:	c6 18       	sub	r12, r6
    1818:	3e c0       	rjmp	.+124    	; 0x1896 <vfprintf+0x574>
    181a:	09 2d       	mov	r16, r9
    181c:	85 37       	cpi	r24, 0x75	; 117
    181e:	21 f4       	brne	.+8      	; 0x1828 <vfprintf+0x506>
    1820:	0f 7e       	andi	r16, 0xEF	; 239
    1822:	2a e0       	ldi	r18, 0x0A	; 10
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	1d c0       	rjmp	.+58     	; 0x1862 <vfprintf+0x540>
    1828:	09 7f       	andi	r16, 0xF9	; 249
    182a:	8f 36       	cpi	r24, 0x6F	; 111
    182c:	91 f0       	breq	.+36     	; 0x1852 <vfprintf+0x530>
    182e:	18 f4       	brcc	.+6      	; 0x1836 <vfprintf+0x514>
    1830:	88 35       	cpi	r24, 0x58	; 88
    1832:	59 f0       	breq	.+22     	; 0x184a <vfprintf+0x528>
    1834:	bc c0       	rjmp	.+376    	; 0x19ae <vfprintf+0x68c>
    1836:	80 37       	cpi	r24, 0x70	; 112
    1838:	19 f0       	breq	.+6      	; 0x1840 <vfprintf+0x51e>
    183a:	88 37       	cpi	r24, 0x78	; 120
    183c:	11 f0       	breq	.+4      	; 0x1842 <vfprintf+0x520>
    183e:	b7 c0       	rjmp	.+366    	; 0x19ae <vfprintf+0x68c>
    1840:	00 61       	ori	r16, 0x10	; 16
    1842:	04 ff       	sbrs	r16, 4
    1844:	09 c0       	rjmp	.+18     	; 0x1858 <vfprintf+0x536>
    1846:	04 60       	ori	r16, 0x04	; 4
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <vfprintf+0x536>
    184a:	94 fe       	sbrs	r9, 4
    184c:	08 c0       	rjmp	.+16     	; 0x185e <vfprintf+0x53c>
    184e:	06 60       	ori	r16, 0x06	; 6
    1850:	06 c0       	rjmp	.+12     	; 0x185e <vfprintf+0x53c>
    1852:	28 e0       	ldi	r18, 0x08	; 8
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	05 c0       	rjmp	.+10     	; 0x1862 <vfprintf+0x540>
    1858:	20 e1       	ldi	r18, 0x10	; 16
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <vfprintf+0x540>
    185e:	20 e1       	ldi	r18, 0x10	; 16
    1860:	32 e0       	ldi	r19, 0x02	; 2
    1862:	56 01       	movw	r10, r12
    1864:	07 ff       	sbrs	r16, 7
    1866:	09 c0       	rjmp	.+18     	; 0x187a <vfprintf+0x558>
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	a8 0e       	add	r10, r24
    186c:	b1 1c       	adc	r11, r1
    186e:	f6 01       	movw	r30, r12
    1870:	60 81       	ld	r22, Z
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	08 c0       	rjmp	.+16     	; 0x188a <vfprintf+0x568>
    187a:	f2 e0       	ldi	r31, 0x02	; 2
    187c:	af 0e       	add	r10, r31
    187e:	b1 1c       	adc	r11, r1
    1880:	f6 01       	movw	r30, r12
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a3 01       	movw	r20, r6
    188c:	89 d2       	rcall	.+1298   	; 0x1da0 <__ultoa_invert>
    188e:	c8 2e       	mov	r12, r24
    1890:	c6 18       	sub	r12, r6
    1892:	0f 77       	andi	r16, 0x7F	; 127
    1894:	90 2e       	mov	r9, r16
    1896:	96 fe       	sbrs	r9, 6
    1898:	0b c0       	rjmp	.+22     	; 0x18b0 <vfprintf+0x58e>
    189a:	09 2d       	mov	r16, r9
    189c:	0e 7f       	andi	r16, 0xFE	; 254
    189e:	c1 16       	cp	r12, r17
    18a0:	50 f4       	brcc	.+20     	; 0x18b6 <vfprintf+0x594>
    18a2:	94 fe       	sbrs	r9, 4
    18a4:	0a c0       	rjmp	.+20     	; 0x18ba <vfprintf+0x598>
    18a6:	92 fc       	sbrc	r9, 2
    18a8:	08 c0       	rjmp	.+16     	; 0x18ba <vfprintf+0x598>
    18aa:	09 2d       	mov	r16, r9
    18ac:	0e 7e       	andi	r16, 0xEE	; 238
    18ae:	05 c0       	rjmp	.+10     	; 0x18ba <vfprintf+0x598>
    18b0:	dc 2c       	mov	r13, r12
    18b2:	09 2d       	mov	r16, r9
    18b4:	03 c0       	rjmp	.+6      	; 0x18bc <vfprintf+0x59a>
    18b6:	dc 2c       	mov	r13, r12
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <vfprintf+0x59a>
    18ba:	d1 2e       	mov	r13, r17
    18bc:	04 ff       	sbrs	r16, 4
    18be:	0d c0       	rjmp	.+26     	; 0x18da <vfprintf+0x5b8>
    18c0:	fe 01       	movw	r30, r28
    18c2:	ec 0d       	add	r30, r12
    18c4:	f1 1d       	adc	r31, r1
    18c6:	80 81       	ld	r24, Z
    18c8:	80 33       	cpi	r24, 0x30	; 48
    18ca:	11 f4       	brne	.+4      	; 0x18d0 <vfprintf+0x5ae>
    18cc:	09 7e       	andi	r16, 0xE9	; 233
    18ce:	09 c0       	rjmp	.+18     	; 0x18e2 <vfprintf+0x5c0>
    18d0:	02 ff       	sbrs	r16, 2
    18d2:	06 c0       	rjmp	.+12     	; 0x18e0 <vfprintf+0x5be>
    18d4:	d3 94       	inc	r13
    18d6:	d3 94       	inc	r13
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <vfprintf+0x5c0>
    18da:	80 2f       	mov	r24, r16
    18dc:	86 78       	andi	r24, 0x86	; 134
    18de:	09 f0       	breq	.+2      	; 0x18e2 <vfprintf+0x5c0>
    18e0:	d3 94       	inc	r13
    18e2:	03 fd       	sbrc	r16, 3
    18e4:	10 c0       	rjmp	.+32     	; 0x1906 <vfprintf+0x5e4>
    18e6:	00 ff       	sbrs	r16, 0
    18e8:	06 c0       	rjmp	.+12     	; 0x18f6 <vfprintf+0x5d4>
    18ea:	1c 2d       	mov	r17, r12
    18ec:	d5 14       	cp	r13, r5
    18ee:	78 f4       	brcc	.+30     	; 0x190e <vfprintf+0x5ec>
    18f0:	15 0d       	add	r17, r5
    18f2:	1d 19       	sub	r17, r13
    18f4:	0c c0       	rjmp	.+24     	; 0x190e <vfprintf+0x5ec>
    18f6:	d5 14       	cp	r13, r5
    18f8:	50 f4       	brcc	.+20     	; 0x190e <vfprintf+0x5ec>
    18fa:	b7 01       	movw	r22, r14
    18fc:	80 e2       	ldi	r24, 0x20	; 32
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	ed d1       	rcall	.+986    	; 0x1cdc <fputc>
    1902:	d3 94       	inc	r13
    1904:	f8 cf       	rjmp	.-16     	; 0x18f6 <vfprintf+0x5d4>
    1906:	d5 14       	cp	r13, r5
    1908:	10 f4       	brcc	.+4      	; 0x190e <vfprintf+0x5ec>
    190a:	5d 18       	sub	r5, r13
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <vfprintf+0x5ee>
    190e:	51 2c       	mov	r5, r1
    1910:	04 ff       	sbrs	r16, 4
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <vfprintf+0x610>
    1914:	b7 01       	movw	r22, r14
    1916:	80 e3       	ldi	r24, 0x30	; 48
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	e0 d1       	rcall	.+960    	; 0x1cdc <fputc>
    191c:	02 ff       	sbrs	r16, 2
    191e:	16 c0       	rjmp	.+44     	; 0x194c <vfprintf+0x62a>
    1920:	01 fd       	sbrc	r16, 1
    1922:	03 c0       	rjmp	.+6      	; 0x192a <vfprintf+0x608>
    1924:	88 e7       	ldi	r24, 0x78	; 120
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x60c>
    192a:	88 e5       	ldi	r24, 0x58	; 88
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	b7 01       	movw	r22, r14
    1930:	0c c0       	rjmp	.+24     	; 0x194a <vfprintf+0x628>
    1932:	80 2f       	mov	r24, r16
    1934:	86 78       	andi	r24, 0x86	; 134
    1936:	51 f0       	breq	.+20     	; 0x194c <vfprintf+0x62a>
    1938:	01 ff       	sbrs	r16, 1
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <vfprintf+0x61e>
    193c:	8b e2       	ldi	r24, 0x2B	; 43
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <vfprintf+0x620>
    1940:	80 e2       	ldi	r24, 0x20	; 32
    1942:	07 fd       	sbrc	r16, 7
    1944:	8d e2       	ldi	r24, 0x2D	; 45
    1946:	b7 01       	movw	r22, r14
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	c8 d1       	rcall	.+912    	; 0x1cdc <fputc>
    194c:	c1 16       	cp	r12, r17
    194e:	30 f4       	brcc	.+12     	; 0x195c <vfprintf+0x63a>
    1950:	b7 01       	movw	r22, r14
    1952:	80 e3       	ldi	r24, 0x30	; 48
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	c2 d1       	rcall	.+900    	; 0x1cdc <fputc>
    1958:	11 50       	subi	r17, 0x01	; 1
    195a:	f8 cf       	rjmp	.-16     	; 0x194c <vfprintf+0x62a>
    195c:	ca 94       	dec	r12
    195e:	f3 01       	movw	r30, r6
    1960:	ec 0d       	add	r30, r12
    1962:	f1 1d       	adc	r31, r1
    1964:	80 81       	ld	r24, Z
    1966:	b7 01       	movw	r22, r14
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	b8 d1       	rcall	.+880    	; 0x1cdc <fputc>
    196c:	c1 10       	cpse	r12, r1
    196e:	f6 cf       	rjmp	.-20     	; 0x195c <vfprintf+0x63a>
    1970:	15 c0       	rjmp	.+42     	; 0x199c <vfprintf+0x67a>
    1972:	f4 e0       	ldi	r31, 0x04	; 4
    1974:	f5 15       	cp	r31, r5
    1976:	50 f5       	brcc	.+84     	; 0x19cc <vfprintf+0x6aa>
    1978:	84 e0       	ldi	r24, 0x04	; 4
    197a:	58 1a       	sub	r5, r24
    197c:	93 fe       	sbrs	r9, 3
    197e:	1e c0       	rjmp	.+60     	; 0x19bc <vfprintf+0x69a>
    1980:	01 11       	cpse	r16, r1
    1982:	25 c0       	rjmp	.+74     	; 0x19ce <vfprintf+0x6ac>
    1984:	2c 85       	ldd	r18, Y+12	; 0x0c
    1986:	23 ff       	sbrs	r18, 3
    1988:	27 c0       	rjmp	.+78     	; 0x19d8 <vfprintf+0x6b6>
    198a:	0c ef       	ldi	r16, 0xFC	; 252
    198c:	11 e0       	ldi	r17, 0x01	; 1
    198e:	39 2d       	mov	r19, r9
    1990:	30 71       	andi	r19, 0x10	; 16
    1992:	93 2e       	mov	r9, r19
    1994:	f8 01       	movw	r30, r16
    1996:	84 91       	lpm	r24, Z
    1998:	81 11       	cpse	r24, r1
    199a:	21 c0       	rjmp	.+66     	; 0x19de <vfprintf+0x6bc>
    199c:	55 20       	and	r5, r5
    199e:	09 f4       	brne	.+2      	; 0x19a2 <vfprintf+0x680>
    19a0:	fc cc       	rjmp	.-1544   	; 0x139a <vfprintf+0x78>
    19a2:	b7 01       	movw	r22, r14
    19a4:	80 e2       	ldi	r24, 0x20	; 32
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	99 d1       	rcall	.+818    	; 0x1cdc <fputc>
    19aa:	5a 94       	dec	r5
    19ac:	f7 cf       	rjmp	.-18     	; 0x199c <vfprintf+0x67a>
    19ae:	f7 01       	movw	r30, r14
    19b0:	86 81       	ldd	r24, Z+6	; 0x06
    19b2:	97 81       	ldd	r25, Z+7	; 0x07
    19b4:	23 c0       	rjmp	.+70     	; 0x19fc <vfprintf+0x6da>
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	9f ef       	ldi	r25, 0xFF	; 255
    19ba:	20 c0       	rjmp	.+64     	; 0x19fc <vfprintf+0x6da>
    19bc:	b7 01       	movw	r22, r14
    19be:	80 e2       	ldi	r24, 0x20	; 32
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	8c d1       	rcall	.+792    	; 0x1cdc <fputc>
    19c4:	5a 94       	dec	r5
    19c6:	51 10       	cpse	r5, r1
    19c8:	f9 cf       	rjmp	.-14     	; 0x19bc <vfprintf+0x69a>
    19ca:	da cf       	rjmp	.-76     	; 0x1980 <vfprintf+0x65e>
    19cc:	51 2c       	mov	r5, r1
    19ce:	b7 01       	movw	r22, r14
    19d0:	80 2f       	mov	r24, r16
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	83 d1       	rcall	.+774    	; 0x1cdc <fputc>
    19d6:	d6 cf       	rjmp	.-84     	; 0x1984 <vfprintf+0x662>
    19d8:	00 e0       	ldi	r16, 0x00	; 0
    19da:	12 e0       	ldi	r17, 0x02	; 2
    19dc:	d8 cf       	rjmp	.-80     	; 0x198e <vfprintf+0x66c>
    19de:	91 10       	cpse	r9, r1
    19e0:	80 52       	subi	r24, 0x20	; 32
    19e2:	b7 01       	movw	r22, r14
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	7a d1       	rcall	.+756    	; 0x1cdc <fputc>
    19e8:	0f 5f       	subi	r16, 0xFF	; 255
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	d3 cf       	rjmp	.-90     	; 0x1994 <vfprintf+0x672>
    19ee:	23 e0       	ldi	r18, 0x03	; 3
    19f0:	25 15       	cp	r18, r5
    19f2:	10 f4       	brcc	.+4      	; 0x19f8 <vfprintf+0x6d6>
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	c1 cf       	rjmp	.-126    	; 0x197a <vfprintf+0x658>
    19f8:	51 2c       	mov	r5, r1
    19fa:	c4 cf       	rjmp	.-120    	; 0x1984 <vfprintf+0x662>
    19fc:	60 96       	adiw	r28, 0x10	; 16
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	cf 90       	pop	r12
    1a12:	bf 90       	pop	r11
    1a14:	af 90       	pop	r10
    1a16:	9f 90       	pop	r9
    1a18:	8f 90       	pop	r8
    1a1a:	7f 90       	pop	r7
    1a1c:	6f 90       	pop	r6
    1a1e:	5f 90       	pop	r5
    1a20:	4f 90       	pop	r4
    1a22:	3f 90       	pop	r3
    1a24:	2f 90       	pop	r2
    1a26:	08 95       	ret

00001a28 <__udivmodsi4>:
    1a28:	a1 e2       	ldi	r26, 0x21	; 33
    1a2a:	1a 2e       	mov	r1, r26
    1a2c:	aa 1b       	sub	r26, r26
    1a2e:	bb 1b       	sub	r27, r27
    1a30:	fd 01       	movw	r30, r26
    1a32:	0d c0       	rjmp	.+26     	; 0x1a4e <__udivmodsi4_ep>

00001a34 <__udivmodsi4_loop>:
    1a34:	aa 1f       	adc	r26, r26
    1a36:	bb 1f       	adc	r27, r27
    1a38:	ee 1f       	adc	r30, r30
    1a3a:	ff 1f       	adc	r31, r31
    1a3c:	a2 17       	cp	r26, r18
    1a3e:	b3 07       	cpc	r27, r19
    1a40:	e4 07       	cpc	r30, r20
    1a42:	f5 07       	cpc	r31, r21
    1a44:	20 f0       	brcs	.+8      	; 0x1a4e <__udivmodsi4_ep>
    1a46:	a2 1b       	sub	r26, r18
    1a48:	b3 0b       	sbc	r27, r19
    1a4a:	e4 0b       	sbc	r30, r20
    1a4c:	f5 0b       	sbc	r31, r21

00001a4e <__udivmodsi4_ep>:
    1a4e:	66 1f       	adc	r22, r22
    1a50:	77 1f       	adc	r23, r23
    1a52:	88 1f       	adc	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	1a 94       	dec	r1
    1a58:	69 f7       	brne	.-38     	; 0x1a34 <__udivmodsi4_loop>
    1a5a:	60 95       	com	r22
    1a5c:	70 95       	com	r23
    1a5e:	80 95       	com	r24
    1a60:	90 95       	com	r25
    1a62:	9b 01       	movw	r18, r22
    1a64:	ac 01       	movw	r20, r24
    1a66:	bd 01       	movw	r22, r26
    1a68:	cf 01       	movw	r24, r30
    1a6a:	08 95       	ret

00001a6c <__ftoa_engine>:
    1a6c:	28 30       	cpi	r18, 0x08	; 8
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <__ftoa_engine+0x6>
    1a70:	27 e0       	ldi	r18, 0x07	; 7
    1a72:	33 27       	eor	r19, r19
    1a74:	da 01       	movw	r26, r20
    1a76:	99 0f       	add	r25, r25
    1a78:	31 1d       	adc	r19, r1
    1a7a:	87 fd       	sbrc	r24, 7
    1a7c:	91 60       	ori	r25, 0x01	; 1
    1a7e:	00 96       	adiw	r24, 0x00	; 0
    1a80:	61 05       	cpc	r22, r1
    1a82:	71 05       	cpc	r23, r1
    1a84:	39 f4       	brne	.+14     	; 0x1a94 <__ftoa_engine+0x28>
    1a86:	32 60       	ori	r19, 0x02	; 2
    1a88:	2e 5f       	subi	r18, 0xFE	; 254
    1a8a:	3d 93       	st	X+, r19
    1a8c:	30 e3       	ldi	r19, 0x30	; 48
    1a8e:	2a 95       	dec	r18
    1a90:	e1 f7       	brne	.-8      	; 0x1a8a <__ftoa_engine+0x1e>
    1a92:	08 95       	ret
    1a94:	9f 3f       	cpi	r25, 0xFF	; 255
    1a96:	30 f0       	brcs	.+12     	; 0x1aa4 <__ftoa_engine+0x38>
    1a98:	80 38       	cpi	r24, 0x80	; 128
    1a9a:	71 05       	cpc	r23, r1
    1a9c:	61 05       	cpc	r22, r1
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <__ftoa_engine+0x36>
    1aa0:	3c 5f       	subi	r19, 0xFC	; 252
    1aa2:	3c 5f       	subi	r19, 0xFC	; 252
    1aa4:	3d 93       	st	X+, r19
    1aa6:	91 30       	cpi	r25, 0x01	; 1
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <__ftoa_engine+0x40>
    1aaa:	80 68       	ori	r24, 0x80	; 128
    1aac:	91 1d       	adc	r25, r1
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	1f 93       	push	r17
    1ab4:	0f 93       	push	r16
    1ab6:	ff 92       	push	r15
    1ab8:	ef 92       	push	r14
    1aba:	19 2f       	mov	r17, r25
    1abc:	98 7f       	andi	r25, 0xF8	; 248
    1abe:	96 95       	lsr	r25
    1ac0:	e9 2f       	mov	r30, r25
    1ac2:	96 95       	lsr	r25
    1ac4:	96 95       	lsr	r25
    1ac6:	e9 0f       	add	r30, r25
    1ac8:	ff 27       	eor	r31, r31
    1aca:	e2 5a       	subi	r30, 0xA2	; 162
    1acc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ace:	99 27       	eor	r25, r25
    1ad0:	33 27       	eor	r19, r19
    1ad2:	ee 24       	eor	r14, r14
    1ad4:	ff 24       	eor	r15, r15
    1ad6:	a7 01       	movw	r20, r14
    1ad8:	e7 01       	movw	r28, r14
    1ada:	05 90       	lpm	r0, Z+
    1adc:	08 94       	sec
    1ade:	07 94       	ror	r0
    1ae0:	28 f4       	brcc	.+10     	; 0x1aec <__ftoa_engine+0x80>
    1ae2:	36 0f       	add	r19, r22
    1ae4:	e7 1e       	adc	r14, r23
    1ae6:	f8 1e       	adc	r15, r24
    1ae8:	49 1f       	adc	r20, r25
    1aea:	51 1d       	adc	r21, r1
    1aec:	66 0f       	add	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	88 1f       	adc	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	06 94       	lsr	r0
    1af6:	a1 f7       	brne	.-24     	; 0x1ae0 <__ftoa_engine+0x74>
    1af8:	05 90       	lpm	r0, Z+
    1afa:	07 94       	ror	r0
    1afc:	28 f4       	brcc	.+10     	; 0x1b08 <__ftoa_engine+0x9c>
    1afe:	e7 0e       	add	r14, r23
    1b00:	f8 1e       	adc	r15, r24
    1b02:	49 1f       	adc	r20, r25
    1b04:	56 1f       	adc	r21, r22
    1b06:	c1 1d       	adc	r28, r1
    1b08:	77 0f       	add	r23, r23
    1b0a:	88 1f       	adc	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	66 1f       	adc	r22, r22
    1b10:	06 94       	lsr	r0
    1b12:	a1 f7       	brne	.-24     	; 0x1afc <__ftoa_engine+0x90>
    1b14:	05 90       	lpm	r0, Z+
    1b16:	07 94       	ror	r0
    1b18:	28 f4       	brcc	.+10     	; 0x1b24 <__ftoa_engine+0xb8>
    1b1a:	f8 0e       	add	r15, r24
    1b1c:	49 1f       	adc	r20, r25
    1b1e:	56 1f       	adc	r21, r22
    1b20:	c7 1f       	adc	r28, r23
    1b22:	d1 1d       	adc	r29, r1
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	66 1f       	adc	r22, r22
    1b2a:	77 1f       	adc	r23, r23
    1b2c:	06 94       	lsr	r0
    1b2e:	a1 f7       	brne	.-24     	; 0x1b18 <__ftoa_engine+0xac>
    1b30:	05 90       	lpm	r0, Z+
    1b32:	07 94       	ror	r0
    1b34:	20 f4       	brcc	.+8      	; 0x1b3e <__ftoa_engine+0xd2>
    1b36:	49 0f       	add	r20, r25
    1b38:	56 1f       	adc	r21, r22
    1b3a:	c7 1f       	adc	r28, r23
    1b3c:	d8 1f       	adc	r29, r24
    1b3e:	99 0f       	add	r25, r25
    1b40:	66 1f       	adc	r22, r22
    1b42:	77 1f       	adc	r23, r23
    1b44:	88 1f       	adc	r24, r24
    1b46:	06 94       	lsr	r0
    1b48:	a9 f7       	brne	.-22     	; 0x1b34 <__ftoa_engine+0xc8>
    1b4a:	84 91       	lpm	r24, Z
    1b4c:	10 95       	com	r17
    1b4e:	17 70       	andi	r17, 0x07	; 7
    1b50:	41 f0       	breq	.+16     	; 0x1b62 <__ftoa_engine+0xf6>
    1b52:	d6 95       	lsr	r29
    1b54:	c7 95       	ror	r28
    1b56:	57 95       	ror	r21
    1b58:	47 95       	ror	r20
    1b5a:	f7 94       	ror	r15
    1b5c:	e7 94       	ror	r14
    1b5e:	1a 95       	dec	r17
    1b60:	c1 f7       	brne	.-16     	; 0x1b52 <__ftoa_engine+0xe6>
    1b62:	e4 e0       	ldi	r30, 0x04	; 4
    1b64:	f2 e0       	ldi	r31, 0x02	; 2
    1b66:	68 94       	set
    1b68:	15 90       	lpm	r1, Z+
    1b6a:	15 91       	lpm	r17, Z+
    1b6c:	35 91       	lpm	r19, Z+
    1b6e:	65 91       	lpm	r22, Z+
    1b70:	95 91       	lpm	r25, Z+
    1b72:	05 90       	lpm	r0, Z+
    1b74:	7f e2       	ldi	r23, 0x2F	; 47
    1b76:	73 95       	inc	r23
    1b78:	e1 18       	sub	r14, r1
    1b7a:	f1 0a       	sbc	r15, r17
    1b7c:	43 0b       	sbc	r20, r19
    1b7e:	56 0b       	sbc	r21, r22
    1b80:	c9 0b       	sbc	r28, r25
    1b82:	d0 09       	sbc	r29, r0
    1b84:	c0 f7       	brcc	.-16     	; 0x1b76 <__ftoa_engine+0x10a>
    1b86:	e1 0c       	add	r14, r1
    1b88:	f1 1e       	adc	r15, r17
    1b8a:	43 1f       	adc	r20, r19
    1b8c:	56 1f       	adc	r21, r22
    1b8e:	c9 1f       	adc	r28, r25
    1b90:	d0 1d       	adc	r29, r0
    1b92:	7e f4       	brtc	.+30     	; 0x1bb2 <__ftoa_engine+0x146>
    1b94:	70 33       	cpi	r23, 0x30	; 48
    1b96:	11 f4       	brne	.+4      	; 0x1b9c <__ftoa_engine+0x130>
    1b98:	8a 95       	dec	r24
    1b9a:	e6 cf       	rjmp	.-52     	; 0x1b68 <__ftoa_engine+0xfc>
    1b9c:	e8 94       	clt
    1b9e:	01 50       	subi	r16, 0x01	; 1
    1ba0:	30 f0       	brcs	.+12     	; 0x1bae <__ftoa_engine+0x142>
    1ba2:	08 0f       	add	r16, r24
    1ba4:	0a f4       	brpl	.+2      	; 0x1ba8 <__ftoa_engine+0x13c>
    1ba6:	00 27       	eor	r16, r16
    1ba8:	02 17       	cp	r16, r18
    1baa:	08 f4       	brcc	.+2      	; 0x1bae <__ftoa_engine+0x142>
    1bac:	20 2f       	mov	r18, r16
    1bae:	23 95       	inc	r18
    1bb0:	02 2f       	mov	r16, r18
    1bb2:	7a 33       	cpi	r23, 0x3A	; 58
    1bb4:	28 f0       	brcs	.+10     	; 0x1bc0 <__ftoa_engine+0x154>
    1bb6:	79 e3       	ldi	r23, 0x39	; 57
    1bb8:	7d 93       	st	X+, r23
    1bba:	2a 95       	dec	r18
    1bbc:	e9 f7       	brne	.-6      	; 0x1bb8 <__ftoa_engine+0x14c>
    1bbe:	10 c0       	rjmp	.+32     	; 0x1be0 <__ftoa_engine+0x174>
    1bc0:	7d 93       	st	X+, r23
    1bc2:	2a 95       	dec	r18
    1bc4:	89 f6       	brne	.-94     	; 0x1b68 <__ftoa_engine+0xfc>
    1bc6:	06 94       	lsr	r0
    1bc8:	97 95       	ror	r25
    1bca:	67 95       	ror	r22
    1bcc:	37 95       	ror	r19
    1bce:	17 95       	ror	r17
    1bd0:	17 94       	ror	r1
    1bd2:	e1 18       	sub	r14, r1
    1bd4:	f1 0a       	sbc	r15, r17
    1bd6:	43 0b       	sbc	r20, r19
    1bd8:	56 0b       	sbc	r21, r22
    1bda:	c9 0b       	sbc	r28, r25
    1bdc:	d0 09       	sbc	r29, r0
    1bde:	98 f0       	brcs	.+38     	; 0x1c06 <__ftoa_engine+0x19a>
    1be0:	23 95       	inc	r18
    1be2:	7e 91       	ld	r23, -X
    1be4:	73 95       	inc	r23
    1be6:	7a 33       	cpi	r23, 0x3A	; 58
    1be8:	08 f0       	brcs	.+2      	; 0x1bec <__ftoa_engine+0x180>
    1bea:	70 e3       	ldi	r23, 0x30	; 48
    1bec:	7c 93       	st	X, r23
    1bee:	20 13       	cpse	r18, r16
    1bf0:	b8 f7       	brcc	.-18     	; 0x1be0 <__ftoa_engine+0x174>
    1bf2:	7e 91       	ld	r23, -X
    1bf4:	70 61       	ori	r23, 0x10	; 16
    1bf6:	7d 93       	st	X+, r23
    1bf8:	30 f0       	brcs	.+12     	; 0x1c06 <__ftoa_engine+0x19a>
    1bfa:	83 95       	inc	r24
    1bfc:	71 e3       	ldi	r23, 0x31	; 49
    1bfe:	7d 93       	st	X+, r23
    1c00:	70 e3       	ldi	r23, 0x30	; 48
    1c02:	2a 95       	dec	r18
    1c04:	e1 f7       	brne	.-8      	; 0x1bfe <__ftoa_engine+0x192>
    1c06:	11 24       	eor	r1, r1
    1c08:	ef 90       	pop	r14
    1c0a:	ff 90       	pop	r15
    1c0c:	0f 91       	pop	r16
    1c0e:	1f 91       	pop	r17
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	99 27       	eor	r25, r25
    1c16:	87 fd       	sbrc	r24, 7
    1c18:	90 95       	com	r25
    1c1a:	08 95       	ret

00001c1c <strnlen_P>:
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	05 90       	lpm	r0, Z+
    1c20:	61 50       	subi	r22, 0x01	; 1
    1c22:	70 40       	sbci	r23, 0x00	; 0
    1c24:	01 10       	cpse	r0, r1
    1c26:	d8 f7       	brcc	.-10     	; 0x1c1e <strnlen_P+0x2>
    1c28:	80 95       	com	r24
    1c2a:	90 95       	com	r25
    1c2c:	8e 0f       	add	r24, r30
    1c2e:	9f 1f       	adc	r25, r31
    1c30:	08 95       	ret

00001c32 <strnlen>:
    1c32:	fc 01       	movw	r30, r24
    1c34:	61 50       	subi	r22, 0x01	; 1
    1c36:	70 40       	sbci	r23, 0x00	; 0
    1c38:	01 90       	ld	r0, Z+
    1c3a:	01 10       	cpse	r0, r1
    1c3c:	d8 f7       	brcc	.-10     	; 0x1c34 <strnlen+0x2>
    1c3e:	80 95       	com	r24
    1c40:	90 95       	com	r25
    1c42:	8e 0f       	add	r24, r30
    1c44:	9f 1f       	adc	r25, r31
    1c46:	08 95       	ret

00001c48 <fdevopen>:
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	31 f4       	brne	.+12     	; 0x1c60 <fdevopen+0x18>
    1c54:	61 15       	cp	r22, r1
    1c56:	71 05       	cpc	r23, r1
    1c58:	19 f4       	brne	.+6      	; 0x1c60 <fdevopen+0x18>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	39 c0       	rjmp	.+114    	; 0x1cd2 <fdevopen+0x8a>
    1c60:	8b 01       	movw	r16, r22
    1c62:	ec 01       	movw	r28, r24
    1c64:	6e e0       	ldi	r22, 0x0E	; 14
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	ba d3       	rcall	.+1908   	; 0x23e2 <calloc>
    1c6e:	fc 01       	movw	r30, r24
    1c70:	89 2b       	or	r24, r25
    1c72:	99 f3       	breq	.-26     	; 0x1c5a <fdevopen+0x12>
    1c74:	80 e8       	ldi	r24, 0x80	; 128
    1c76:	83 83       	std	Z+3, r24	; 0x03
    1c78:	01 15       	cp	r16, r1
    1c7a:	11 05       	cpc	r17, r1
    1c7c:	71 f0       	breq	.+28     	; 0x1c9a <fdevopen+0x52>
    1c7e:	02 87       	std	Z+10, r16	; 0x0a
    1c80:	13 87       	std	Z+11, r17	; 0x0b
    1c82:	81 e8       	ldi	r24, 0x81	; 129
    1c84:	83 83       	std	Z+3, r24	; 0x03
    1c86:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <__iob>
    1c8a:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <__iob+0x1>
    1c8e:	89 2b       	or	r24, r25
    1c90:	21 f4       	brne	.+8      	; 0x1c9a <fdevopen+0x52>
    1c92:	e0 93 26 20 	sts	0x2026, r30	; 0x802026 <__iob>
    1c96:	f0 93 27 20 	sts	0x2027, r31	; 0x802027 <__iob+0x1>
    1c9a:	20 97       	sbiw	r28, 0x00	; 0
    1c9c:	c9 f0       	breq	.+50     	; 0x1cd0 <fdevopen+0x88>
    1c9e:	c0 87       	std	Z+8, r28	; 0x08
    1ca0:	d1 87       	std	Z+9, r29	; 0x09
    1ca2:	83 81       	ldd	r24, Z+3	; 0x03
    1ca4:	82 60       	ori	r24, 0x02	; 2
    1ca6:	83 83       	std	Z+3, r24	; 0x03
    1ca8:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <__iob+0x2>
    1cac:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <__iob+0x3>
    1cb0:	89 2b       	or	r24, r25
    1cb2:	71 f4       	brne	.+28     	; 0x1cd0 <fdevopen+0x88>
    1cb4:	e0 93 28 20 	sts	0x2028, r30	; 0x802028 <__iob+0x2>
    1cb8:	f0 93 29 20 	sts	0x2029, r31	; 0x802029 <__iob+0x3>
    1cbc:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <__iob+0x4>
    1cc0:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <__iob+0x5>
    1cc4:	89 2b       	or	r24, r25
    1cc6:	21 f4       	brne	.+8      	; 0x1cd0 <fdevopen+0x88>
    1cc8:	e0 93 2a 20 	sts	0x202A, r30	; 0x80202a <__iob+0x4>
    1ccc:	f0 93 2b 20 	sts	0x202B, r31	; 0x80202b <__iob+0x5>
    1cd0:	cf 01       	movw	r24, r30
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <fputc>:
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	fb 01       	movw	r30, r22
    1ce6:	23 81       	ldd	r18, Z+3	; 0x03
    1ce8:	21 fd       	sbrc	r18, 1
    1cea:	03 c0       	rjmp	.+6      	; 0x1cf2 <fputc+0x16>
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	9f ef       	ldi	r25, 0xFF	; 255
    1cf0:	2c c0       	rjmp	.+88     	; 0x1d4a <fputc+0x6e>
    1cf2:	22 ff       	sbrs	r18, 2
    1cf4:	16 c0       	rjmp	.+44     	; 0x1d22 <fputc+0x46>
    1cf6:	46 81       	ldd	r20, Z+6	; 0x06
    1cf8:	57 81       	ldd	r21, Z+7	; 0x07
    1cfa:	24 81       	ldd	r18, Z+4	; 0x04
    1cfc:	35 81       	ldd	r19, Z+5	; 0x05
    1cfe:	42 17       	cp	r20, r18
    1d00:	53 07       	cpc	r21, r19
    1d02:	44 f4       	brge	.+16     	; 0x1d14 <fputc+0x38>
    1d04:	a0 81       	ld	r26, Z
    1d06:	b1 81       	ldd	r27, Z+1	; 0x01
    1d08:	9d 01       	movw	r18, r26
    1d0a:	2f 5f       	subi	r18, 0xFF	; 255
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	20 83       	st	Z, r18
    1d10:	31 83       	std	Z+1, r19	; 0x01
    1d12:	8c 93       	st	X, r24
    1d14:	26 81       	ldd	r18, Z+6	; 0x06
    1d16:	37 81       	ldd	r19, Z+7	; 0x07
    1d18:	2f 5f       	subi	r18, 0xFF	; 255
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	26 83       	std	Z+6, r18	; 0x06
    1d1e:	37 83       	std	Z+7, r19	; 0x07
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <fputc+0x6e>
    1d22:	8b 01       	movw	r16, r22
    1d24:	ec 01       	movw	r28, r24
    1d26:	fb 01       	movw	r30, r22
    1d28:	00 84       	ldd	r0, Z+8	; 0x08
    1d2a:	f1 85       	ldd	r31, Z+9	; 0x09
    1d2c:	e0 2d       	mov	r30, r0
    1d2e:	19 95       	eicall
    1d30:	89 2b       	or	r24, r25
    1d32:	e1 f6       	brne	.-72     	; 0x1cec <fputc+0x10>
    1d34:	d8 01       	movw	r26, r16
    1d36:	16 96       	adiw	r26, 0x06	; 6
    1d38:	8d 91       	ld	r24, X+
    1d3a:	9c 91       	ld	r25, X
    1d3c:	17 97       	sbiw	r26, 0x07	; 7
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	16 96       	adiw	r26, 0x06	; 6
    1d42:	8d 93       	st	X+, r24
    1d44:	9c 93       	st	X, r25
    1d46:	17 97       	sbiw	r26, 0x07	; 7
    1d48:	ce 01       	movw	r24, r28
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	08 95       	ret

00001d54 <printf>:
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	ae 01       	movw	r20, r28
    1d5e:	4a 5f       	subi	r20, 0xFA	; 250
    1d60:	5f 4f       	sbci	r21, 0xFF	; 255
    1d62:	fa 01       	movw	r30, r20
    1d64:	61 91       	ld	r22, Z+
    1d66:	71 91       	ld	r23, Z+
    1d68:	af 01       	movw	r20, r30
    1d6a:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <__iob+0x2>
    1d6e:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <__iob+0x3>
    1d72:	d7 da       	rcall	.-2642   	; 0x1322 <vfprintf>
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	08 95       	ret

00001d7a <scanf>:
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	ae 01       	movw	r20, r28
    1d84:	4a 5f       	subi	r20, 0xFA	; 250
    1d86:	5f 4f       	sbci	r21, 0xFF	; 255
    1d88:	fa 01       	movw	r30, r20
    1d8a:	61 91       	ld	r22, Z+
    1d8c:	71 91       	ld	r23, Z+
    1d8e:	af 01       	movw	r20, r30
    1d90:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <__iob>
    1d94:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <__iob+0x1>
    1d98:	0d d2       	rcall	.+1050   	; 0x21b4 <vfscanf>
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	08 95       	ret

00001da0 <__ultoa_invert>:
    1da0:	fa 01       	movw	r30, r20
    1da2:	aa 27       	eor	r26, r26
    1da4:	28 30       	cpi	r18, 0x08	; 8
    1da6:	51 f1       	breq	.+84     	; 0x1dfc <__ultoa_invert+0x5c>
    1da8:	20 31       	cpi	r18, 0x10	; 16
    1daa:	81 f1       	breq	.+96     	; 0x1e0c <__ultoa_invert+0x6c>
    1dac:	e8 94       	clt
    1dae:	6f 93       	push	r22
    1db0:	6e 7f       	andi	r22, 0xFE	; 254
    1db2:	6e 5f       	subi	r22, 0xFE	; 254
    1db4:	7f 4f       	sbci	r23, 0xFF	; 255
    1db6:	8f 4f       	sbci	r24, 0xFF	; 255
    1db8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dba:	af 4f       	sbci	r26, 0xFF	; 255
    1dbc:	b1 e0       	ldi	r27, 0x01	; 1
    1dbe:	3e d0       	rcall	.+124    	; 0x1e3c <__ultoa_invert+0x9c>
    1dc0:	b4 e0       	ldi	r27, 0x04	; 4
    1dc2:	3c d0       	rcall	.+120    	; 0x1e3c <__ultoa_invert+0x9c>
    1dc4:	67 0f       	add	r22, r23
    1dc6:	78 1f       	adc	r23, r24
    1dc8:	89 1f       	adc	r24, r25
    1dca:	9a 1f       	adc	r25, r26
    1dcc:	a1 1d       	adc	r26, r1
    1dce:	68 0f       	add	r22, r24
    1dd0:	79 1f       	adc	r23, r25
    1dd2:	8a 1f       	adc	r24, r26
    1dd4:	91 1d       	adc	r25, r1
    1dd6:	a1 1d       	adc	r26, r1
    1dd8:	6a 0f       	add	r22, r26
    1dda:	71 1d       	adc	r23, r1
    1ddc:	81 1d       	adc	r24, r1
    1dde:	91 1d       	adc	r25, r1
    1de0:	a1 1d       	adc	r26, r1
    1de2:	20 d0       	rcall	.+64     	; 0x1e24 <__ultoa_invert+0x84>
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <__ultoa_invert+0x48>
    1de6:	68 94       	set
    1de8:	3f 91       	pop	r19
    1dea:	2a e0       	ldi	r18, 0x0A	; 10
    1dec:	26 9f       	mul	r18, r22
    1dee:	11 24       	eor	r1, r1
    1df0:	30 19       	sub	r19, r0
    1df2:	30 5d       	subi	r19, 0xD0	; 208
    1df4:	31 93       	st	Z+, r19
    1df6:	de f6       	brtc	.-74     	; 0x1dae <__ultoa_invert+0xe>
    1df8:	cf 01       	movw	r24, r30
    1dfa:	08 95       	ret
    1dfc:	46 2f       	mov	r20, r22
    1dfe:	47 70       	andi	r20, 0x07	; 7
    1e00:	40 5d       	subi	r20, 0xD0	; 208
    1e02:	41 93       	st	Z+, r20
    1e04:	b3 e0       	ldi	r27, 0x03	; 3
    1e06:	0f d0       	rcall	.+30     	; 0x1e26 <__ultoa_invert+0x86>
    1e08:	c9 f7       	brne	.-14     	; 0x1dfc <__ultoa_invert+0x5c>
    1e0a:	f6 cf       	rjmp	.-20     	; 0x1df8 <__ultoa_invert+0x58>
    1e0c:	46 2f       	mov	r20, r22
    1e0e:	4f 70       	andi	r20, 0x0F	; 15
    1e10:	40 5d       	subi	r20, 0xD0	; 208
    1e12:	4a 33       	cpi	r20, 0x3A	; 58
    1e14:	18 f0       	brcs	.+6      	; 0x1e1c <__ultoa_invert+0x7c>
    1e16:	49 5d       	subi	r20, 0xD9	; 217
    1e18:	31 fd       	sbrc	r19, 1
    1e1a:	40 52       	subi	r20, 0x20	; 32
    1e1c:	41 93       	st	Z+, r20
    1e1e:	02 d0       	rcall	.+4      	; 0x1e24 <__ultoa_invert+0x84>
    1e20:	a9 f7       	brne	.-22     	; 0x1e0c <__ultoa_invert+0x6c>
    1e22:	ea cf       	rjmp	.-44     	; 0x1df8 <__ultoa_invert+0x58>
    1e24:	b4 e0       	ldi	r27, 0x04	; 4
    1e26:	a6 95       	lsr	r26
    1e28:	97 95       	ror	r25
    1e2a:	87 95       	ror	r24
    1e2c:	77 95       	ror	r23
    1e2e:	67 95       	ror	r22
    1e30:	ba 95       	dec	r27
    1e32:	c9 f7       	brne	.-14     	; 0x1e26 <__ultoa_invert+0x86>
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	61 05       	cpc	r22, r1
    1e38:	71 05       	cpc	r23, r1
    1e3a:	08 95       	ret
    1e3c:	9b 01       	movw	r18, r22
    1e3e:	ac 01       	movw	r20, r24
    1e40:	0a 2e       	mov	r0, r26
    1e42:	06 94       	lsr	r0
    1e44:	57 95       	ror	r21
    1e46:	47 95       	ror	r20
    1e48:	37 95       	ror	r19
    1e4a:	27 95       	ror	r18
    1e4c:	ba 95       	dec	r27
    1e4e:	c9 f7       	brne	.-14     	; 0x1e42 <__ultoa_invert+0xa2>
    1e50:	62 0f       	add	r22, r18
    1e52:	73 1f       	adc	r23, r19
    1e54:	84 1f       	adc	r24, r20
    1e56:	95 1f       	adc	r25, r21
    1e58:	a0 1d       	adc	r26, r0
    1e5a:	08 95       	ret

00001e5c <putval>:
    1e5c:	20 fd       	sbrc	r18, 0
    1e5e:	09 c0       	rjmp	.+18     	; 0x1e72 <putval+0x16>
    1e60:	fc 01       	movw	r30, r24
    1e62:	23 fd       	sbrc	r18, 3
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <putval+0x14>
    1e66:	22 ff       	sbrs	r18, 2
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <putval+0x12>
    1e6a:	73 83       	std	Z+3, r23	; 0x03
    1e6c:	62 83       	std	Z+2, r22	; 0x02
    1e6e:	51 83       	std	Z+1, r21	; 0x01
    1e70:	40 83       	st	Z, r20
    1e72:	08 95       	ret

00001e74 <mulacc>:
    1e74:	44 fd       	sbrc	r20, 4
    1e76:	17 c0       	rjmp	.+46     	; 0x1ea6 <mulacc+0x32>
    1e78:	46 fd       	sbrc	r20, 6
    1e7a:	17 c0       	rjmp	.+46     	; 0x1eaa <mulacc+0x36>
    1e7c:	ab 01       	movw	r20, r22
    1e7e:	bc 01       	movw	r22, r24
    1e80:	da 01       	movw	r26, r20
    1e82:	fb 01       	movw	r30, r22
    1e84:	aa 0f       	add	r26, r26
    1e86:	bb 1f       	adc	r27, r27
    1e88:	ee 1f       	adc	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	10 94       	com	r1
    1e8e:	d1 f7       	brne	.-12     	; 0x1e84 <mulacc+0x10>
    1e90:	4a 0f       	add	r20, r26
    1e92:	5b 1f       	adc	r21, r27
    1e94:	6e 1f       	adc	r22, r30
    1e96:	7f 1f       	adc	r23, r31
    1e98:	cb 01       	movw	r24, r22
    1e9a:	ba 01       	movw	r22, r20
    1e9c:	66 0f       	add	r22, r22
    1e9e:	77 1f       	adc	r23, r23
    1ea0:	88 1f       	adc	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	09 c0       	rjmp	.+18     	; 0x1eb8 <mulacc+0x44>
    1ea6:	33 e0       	ldi	r19, 0x03	; 3
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <mulacc+0x38>
    1eaa:	34 e0       	ldi	r19, 0x04	; 4
    1eac:	66 0f       	add	r22, r22
    1eae:	77 1f       	adc	r23, r23
    1eb0:	88 1f       	adc	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	31 50       	subi	r19, 0x01	; 1
    1eb6:	d1 f7       	brne	.-12     	; 0x1eac <mulacc+0x38>
    1eb8:	62 0f       	add	r22, r18
    1eba:	71 1d       	adc	r23, r1
    1ebc:	81 1d       	adc	r24, r1
    1ebe:	91 1d       	adc	r25, r1
    1ec0:	08 95       	ret

00001ec2 <skip_spaces>:
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	8c 01       	movw	r16, r24
    1ecc:	c8 01       	movw	r24, r16
    1ece:	de d3       	rcall	.+1980   	; 0x268c <fgetc>
    1ed0:	ec 01       	movw	r28, r24
    1ed2:	97 fd       	sbrc	r25, 7
    1ed4:	06 c0       	rjmp	.+12     	; 0x1ee2 <skip_spaces+0x20>
    1ed6:	c0 d3       	rcall	.+1920   	; 0x2658 <isspace>
    1ed8:	89 2b       	or	r24, r25
    1eda:	c1 f7       	brne	.-16     	; 0x1ecc <skip_spaces+0xa>
    1edc:	b8 01       	movw	r22, r16
    1ede:	ce 01       	movw	r24, r28
    1ee0:	13 d4       	rcall	.+2086   	; 0x2708 <ungetc>
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	08 95       	ret

00001eee <conv_int>:
    1eee:	8f 92       	push	r8
    1ef0:	9f 92       	push	r9
    1ef2:	af 92       	push	r10
    1ef4:	bf 92       	push	r11
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	8c 01       	movw	r16, r24
    1f04:	d6 2f       	mov	r29, r22
    1f06:	7a 01       	movw	r14, r20
    1f08:	b2 2e       	mov	r11, r18
    1f0a:	c0 d3       	rcall	.+1920   	; 0x268c <fgetc>
    1f0c:	9c 01       	movw	r18, r24
    1f0e:	33 27       	eor	r19, r19
    1f10:	2b 32       	cpi	r18, 0x2B	; 43
    1f12:	31 05       	cpc	r19, r1
    1f14:	31 f0       	breq	.+12     	; 0x1f22 <conv_int+0x34>
    1f16:	2d 32       	cpi	r18, 0x2D	; 45
    1f18:	31 05       	cpc	r19, r1
    1f1a:	59 f4       	brne	.+22     	; 0x1f32 <conv_int+0x44>
    1f1c:	8b 2d       	mov	r24, r11
    1f1e:	80 68       	ori	r24, 0x80	; 128
    1f20:	b8 2e       	mov	r11, r24
    1f22:	d1 50       	subi	r29, 0x01	; 1
    1f24:	11 f4       	brne	.+4      	; 0x1f2a <conv_int+0x3c>
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	61 c0       	rjmp	.+194    	; 0x1fec <conv_int+0xfe>
    1f2a:	c8 01       	movw	r24, r16
    1f2c:	af d3       	rcall	.+1886   	; 0x268c <fgetc>
    1f2e:	97 fd       	sbrc	r25, 7
    1f30:	fa cf       	rjmp	.-12     	; 0x1f26 <conv_int+0x38>
    1f32:	cb 2d       	mov	r28, r11
    1f34:	cd 7f       	andi	r28, 0xFD	; 253
    1f36:	2b 2d       	mov	r18, r11
    1f38:	20 73       	andi	r18, 0x30	; 48
    1f3a:	f9 f4       	brne	.+62     	; 0x1f7a <conv_int+0x8c>
    1f3c:	80 33       	cpi	r24, 0x30	; 48
    1f3e:	e9 f4       	brne	.+58     	; 0x1f7a <conv_int+0x8c>
    1f40:	aa 24       	eor	r10, r10
    1f42:	aa 94       	dec	r10
    1f44:	ad 0e       	add	r10, r29
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <conv_int+0x5c>
    1f48:	3e c0       	rjmp	.+124    	; 0x1fc6 <conv_int+0xd8>
    1f4a:	c8 01       	movw	r24, r16
    1f4c:	9f d3       	rcall	.+1854   	; 0x268c <fgetc>
    1f4e:	97 fd       	sbrc	r25, 7
    1f50:	3a c0       	rjmp	.+116    	; 0x1fc6 <conv_int+0xd8>
    1f52:	9c 01       	movw	r18, r24
    1f54:	2f 7d       	andi	r18, 0xDF	; 223
    1f56:	33 27       	eor	r19, r19
    1f58:	28 35       	cpi	r18, 0x58	; 88
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	41 f4       	brne	.+16     	; 0x1f6e <conv_int+0x80>
    1f5e:	c2 64       	ori	r28, 0x42	; 66
    1f60:	d2 50       	subi	r29, 0x02	; 2
    1f62:	89 f1       	breq	.+98     	; 0x1fc6 <conv_int+0xd8>
    1f64:	c8 01       	movw	r24, r16
    1f66:	92 d3       	rcall	.+1828   	; 0x268c <fgetc>
    1f68:	97 ff       	sbrs	r25, 7
    1f6a:	07 c0       	rjmp	.+14     	; 0x1f7a <conv_int+0x8c>
    1f6c:	2c c0       	rjmp	.+88     	; 0x1fc6 <conv_int+0xd8>
    1f6e:	b6 fe       	sbrs	r11, 6
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <conv_int+0x88>
    1f72:	c2 60       	ori	r28, 0x02	; 2
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <conv_int+0x8a>
    1f76:	c2 61       	ori	r28, 0x12	; 18
    1f78:	da 2d       	mov	r29, r10
    1f7a:	81 2c       	mov	r8, r1
    1f7c:	91 2c       	mov	r9, r1
    1f7e:	54 01       	movw	r10, r8
    1f80:	20 ed       	ldi	r18, 0xD0	; 208
    1f82:	28 0f       	add	r18, r24
    1f84:	28 30       	cpi	r18, 0x08	; 8
    1f86:	78 f0       	brcs	.+30     	; 0x1fa6 <conv_int+0xb8>
    1f88:	c4 ff       	sbrs	r28, 4
    1f8a:	03 c0       	rjmp	.+6      	; 0x1f92 <conv_int+0xa4>
    1f8c:	b8 01       	movw	r22, r16
    1f8e:	bc d3       	rcall	.+1912   	; 0x2708 <ungetc>
    1f90:	17 c0       	rjmp	.+46     	; 0x1fc0 <conv_int+0xd2>
    1f92:	2a 30       	cpi	r18, 0x0A	; 10
    1f94:	40 f0       	brcs	.+16     	; 0x1fa6 <conv_int+0xb8>
    1f96:	c6 ff       	sbrs	r28, 6
    1f98:	f9 cf       	rjmp	.-14     	; 0x1f8c <conv_int+0x9e>
    1f9a:	2f 7d       	andi	r18, 0xDF	; 223
    1f9c:	3f ee       	ldi	r19, 0xEF	; 239
    1f9e:	32 0f       	add	r19, r18
    1fa0:	36 30       	cpi	r19, 0x06	; 6
    1fa2:	a0 f7       	brcc	.-24     	; 0x1f8c <conv_int+0x9e>
    1fa4:	27 50       	subi	r18, 0x07	; 7
    1fa6:	4c 2f       	mov	r20, r28
    1fa8:	c5 01       	movw	r24, r10
    1faa:	b4 01       	movw	r22, r8
    1fac:	63 df       	rcall	.-314    	; 0x1e74 <mulacc>
    1fae:	4b 01       	movw	r8, r22
    1fb0:	5c 01       	movw	r10, r24
    1fb2:	c2 60       	ori	r28, 0x02	; 2
    1fb4:	d1 50       	subi	r29, 0x01	; 1
    1fb6:	51 f0       	breq	.+20     	; 0x1fcc <conv_int+0xde>
    1fb8:	c8 01       	movw	r24, r16
    1fba:	68 d3       	rcall	.+1744   	; 0x268c <fgetc>
    1fbc:	97 ff       	sbrs	r25, 7
    1fbe:	e0 cf       	rjmp	.-64     	; 0x1f80 <conv_int+0x92>
    1fc0:	c1 fd       	sbrc	r28, 1
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <conv_int+0xde>
    1fc4:	b0 cf       	rjmp	.-160    	; 0x1f26 <conv_int+0x38>
    1fc6:	81 2c       	mov	r8, r1
    1fc8:	91 2c       	mov	r9, r1
    1fca:	54 01       	movw	r10, r8
    1fcc:	c7 ff       	sbrs	r28, 7
    1fce:	08 c0       	rjmp	.+16     	; 0x1fe0 <conv_int+0xf2>
    1fd0:	b0 94       	com	r11
    1fd2:	a0 94       	com	r10
    1fd4:	90 94       	com	r9
    1fd6:	80 94       	com	r8
    1fd8:	81 1c       	adc	r8, r1
    1fda:	91 1c       	adc	r9, r1
    1fdc:	a1 1c       	adc	r10, r1
    1fde:	b1 1c       	adc	r11, r1
    1fe0:	2c 2f       	mov	r18, r28
    1fe2:	b5 01       	movw	r22, r10
    1fe4:	a4 01       	movw	r20, r8
    1fe6:	c7 01       	movw	r24, r14
    1fe8:	39 df       	rcall	.-398    	; 0x1e5c <putval>
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	bf 90       	pop	r11
    1ffa:	af 90       	pop	r10
    1ffc:	9f 90       	pop	r9
    1ffe:	8f 90       	pop	r8
    2000:	08 95       	ret

00002002 <conv_brk>:
    2002:	5f 92       	push	r5
    2004:	6f 92       	push	r6
    2006:	7f 92       	push	r7
    2008:	8f 92       	push	r8
    200a:	9f 92       	push	r9
    200c:	af 92       	push	r10
    200e:	bf 92       	push	r11
    2010:	cf 92       	push	r12
    2012:	df 92       	push	r13
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	a0 97       	sbiw	r28, 0x20	; 32
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	5c 01       	movw	r10, r24
    202c:	96 2e       	mov	r9, r22
    202e:	7a 01       	movw	r14, r20
    2030:	f9 01       	movw	r30, r18
    2032:	8e 01       	movw	r16, r28
    2034:	0f 5f       	subi	r16, 0xFF	; 255
    2036:	1f 4f       	sbci	r17, 0xFF	; 255
    2038:	68 01       	movw	r12, r16
    203a:	80 e2       	ldi	r24, 0x20	; 32
    203c:	d8 01       	movw	r26, r16
    203e:	1d 92       	st	X+, r1
    2040:	8a 95       	dec	r24
    2042:	e9 f7       	brne	.-6      	; 0x203e <conv_brk+0x3c>
    2044:	d5 01       	movw	r26, r10
    2046:	13 96       	adiw	r26, 0x03	; 3
    2048:	8c 90       	ld	r8, X
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	61 2c       	mov	r6, r1
    2050:	71 2c       	mov	r7, r1
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	83 fc       	sbrc	r8, 3
    205a:	25 91       	lpm	r18, Z+
    205c:	83 fe       	sbrs	r8, 3
    205e:	21 91       	ld	r18, Z+
    2060:	8f 01       	movw	r16, r30
    2062:	52 2e       	mov	r5, r18
    2064:	21 11       	cpse	r18, r1
    2066:	03 c0       	rjmp	.+6      	; 0x206e <conv_brk+0x6c>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	90 c0       	rjmp	.+288    	; 0x218e <conv_brk+0x18c>
    206e:	2e 35       	cpi	r18, 0x5E	; 94
    2070:	11 f4       	brne	.+4      	; 0x2076 <conv_brk+0x74>
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	51 f1       	breq	.+84     	; 0x20ca <conv_brk+0xc8>
    2076:	43 2f       	mov	r20, r19
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	48 17       	cp	r20, r24
    207c:	59 07       	cpc	r21, r25
    207e:	3c f4       	brge	.+14     	; 0x208e <conv_brk+0x8c>
    2080:	2d 35       	cpi	r18, 0x5D	; 93
    2082:	59 f1       	breq	.+86     	; 0x20da <conv_brk+0xd8>
    2084:	2d 32       	cpi	r18, 0x2D	; 45
    2086:	19 f4       	brne	.+6      	; 0x208e <conv_brk+0x8c>
    2088:	77 20       	and	r7, r7
    208a:	09 f1       	breq	.+66     	; 0x20ce <conv_brk+0xcc>
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <conv_brk+0x92>
    208e:	77 20       	and	r7, r7
    2090:	09 f4       	brne	.+2      	; 0x2094 <conv_brk+0x92>
    2092:	68 c0       	rjmp	.+208    	; 0x2164 <conv_brk+0x162>
    2094:	45 2d       	mov	r20, r5
    2096:	46 95       	lsr	r20
    2098:	46 95       	lsr	r20
    209a:	46 95       	lsr	r20
    209c:	d6 01       	movw	r26, r12
    209e:	a4 0f       	add	r26, r20
    20a0:	b1 1d       	adc	r27, r1
    20a2:	45 2d       	mov	r20, r5
    20a4:	47 70       	andi	r20, 0x07	; 7
    20a6:	8b 01       	movw	r16, r22
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <conv_brk+0xac>
    20aa:	00 0f       	add	r16, r16
    20ac:	11 1f       	adc	r17, r17
    20ae:	4a 95       	dec	r20
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <conv_brk+0xa8>
    20b2:	a8 01       	movw	r20, r16
    20b4:	5c 91       	ld	r21, X
    20b6:	45 2b       	or	r20, r21
    20b8:	4c 93       	st	X, r20
    20ba:	65 14       	cp	r6, r5
    20bc:	59 f0       	breq	.+22     	; 0x20d4 <conv_brk+0xd2>
    20be:	56 14       	cp	r5, r6
    20c0:	10 f4       	brcc	.+4      	; 0x20c6 <conv_brk+0xc4>
    20c2:	53 94       	inc	r5
    20c4:	e7 cf       	rjmp	.-50     	; 0x2094 <conv_brk+0x92>
    20c6:	5a 94       	dec	r5
    20c8:	e5 cf       	rjmp	.-54     	; 0x2094 <conv_brk+0x92>
    20ca:	31 e0       	ldi	r19, 0x01	; 1
    20cc:	04 c0       	rjmp	.+8      	; 0x20d6 <conv_brk+0xd4>
    20ce:	77 24       	eor	r7, r7
    20d0:	73 94       	inc	r7
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <conv_brk+0xd4>
    20d4:	71 2c       	mov	r7, r1
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	bf cf       	rjmp	.-130    	; 0x2058 <conv_brk+0x56>
    20da:	77 20       	and	r7, r7
    20dc:	19 f0       	breq	.+6      	; 0x20e4 <conv_brk+0xe2>
    20de:	8e 81       	ldd	r24, Y+6	; 0x06
    20e0:	80 62       	ori	r24, 0x20	; 32
    20e2:	8e 83       	std	Y+6, r24	; 0x06
    20e4:	31 11       	cpse	r19, r1
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <conv_brk+0xec>
    20e8:	88 24       	eor	r8, r8
    20ea:	83 94       	inc	r8
    20ec:	17 c0       	rjmp	.+46     	; 0x211c <conv_brk+0x11a>
    20ee:	f6 01       	movw	r30, r12
    20f0:	9e 01       	movw	r18, r28
    20f2:	2f 5d       	subi	r18, 0xDF	; 223
    20f4:	3f 4f       	sbci	r19, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	80 95       	com	r24
    20fa:	81 93       	st	Z+, r24
    20fc:	2e 17       	cp	r18, r30
    20fe:	3f 07       	cpc	r19, r31
    2100:	d1 f7       	brne	.-12     	; 0x20f6 <conv_brk+0xf4>
    2102:	f2 cf       	rjmp	.-28     	; 0x20e8 <conv_brk+0xe6>
    2104:	e1 14       	cp	r14, r1
    2106:	f1 04       	cpc	r15, r1
    2108:	29 f0       	breq	.+10     	; 0x2114 <conv_brk+0x112>
    210a:	d7 01       	movw	r26, r14
    210c:	8c 93       	st	X, r24
    210e:	f7 01       	movw	r30, r14
    2110:	31 96       	adiw	r30, 0x01	; 1
    2112:	7f 01       	movw	r14, r30
    2114:	9a 94       	dec	r9
    2116:	81 2c       	mov	r8, r1
    2118:	99 20       	and	r9, r9
    211a:	e9 f0       	breq	.+58     	; 0x2156 <conv_brk+0x154>
    211c:	c5 01       	movw	r24, r10
    211e:	b6 d2       	rcall	.+1388   	; 0x268c <fgetc>
    2120:	97 fd       	sbrc	r25, 7
    2122:	17 c0       	rjmp	.+46     	; 0x2152 <conv_brk+0x150>
    2124:	fc 01       	movw	r30, r24
    2126:	ff 27       	eor	r31, r31
    2128:	23 e0       	ldi	r18, 0x03	; 3
    212a:	f5 95       	asr	r31
    212c:	e7 95       	ror	r30
    212e:	2a 95       	dec	r18
    2130:	e1 f7       	brne	.-8      	; 0x212a <conv_brk+0x128>
    2132:	ec 0d       	add	r30, r12
    2134:	fd 1d       	adc	r31, r13
    2136:	20 81       	ld	r18, Z
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	ac 01       	movw	r20, r24
    213c:	47 70       	andi	r20, 0x07	; 7
    213e:	55 27       	eor	r21, r21
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <conv_brk+0x144>
    2142:	35 95       	asr	r19
    2144:	27 95       	ror	r18
    2146:	4a 95       	dec	r20
    2148:	e2 f7       	brpl	.-8      	; 0x2142 <conv_brk+0x140>
    214a:	20 fd       	sbrc	r18, 0
    214c:	db cf       	rjmp	.-74     	; 0x2104 <conv_brk+0x102>
    214e:	b5 01       	movw	r22, r10
    2150:	db d2       	rcall	.+1462   	; 0x2708 <ungetc>
    2152:	81 10       	cpse	r8, r1
    2154:	89 cf       	rjmp	.-238    	; 0x2068 <conv_brk+0x66>
    2156:	e1 14       	cp	r14, r1
    2158:	f1 04       	cpc	r15, r1
    215a:	11 f0       	breq	.+4      	; 0x2160 <conv_brk+0x15e>
    215c:	d7 01       	movw	r26, r14
    215e:	1c 92       	st	X, r1
    2160:	c8 01       	movw	r24, r16
    2162:	15 c0       	rjmp	.+42     	; 0x218e <conv_brk+0x18c>
    2164:	42 2f       	mov	r20, r18
    2166:	46 95       	lsr	r20
    2168:	46 95       	lsr	r20
    216a:	46 95       	lsr	r20
    216c:	d6 01       	movw	r26, r12
    216e:	a4 0f       	add	r26, r20
    2170:	b1 1d       	adc	r27, r1
    2172:	42 2f       	mov	r20, r18
    2174:	47 70       	andi	r20, 0x07	; 7
    2176:	8b 01       	movw	r16, r22
    2178:	02 c0       	rjmp	.+4      	; 0x217e <conv_brk+0x17c>
    217a:	00 0f       	add	r16, r16
    217c:	11 1f       	adc	r17, r17
    217e:	4a 95       	dec	r20
    2180:	e2 f7       	brpl	.-8      	; 0x217a <conv_brk+0x178>
    2182:	a8 01       	movw	r20, r16
    2184:	5c 91       	ld	r21, X
    2186:	45 2b       	or	r20, r21
    2188:	4c 93       	st	X, r20
    218a:	62 2e       	mov	r6, r18
    218c:	a4 cf       	rjmp	.-184    	; 0x20d6 <conv_brk+0xd4>
    218e:	a0 96       	adiw	r28, 0x20	; 32
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	df 90       	pop	r13
    21a2:	cf 90       	pop	r12
    21a4:	bf 90       	pop	r11
    21a6:	af 90       	pop	r10
    21a8:	9f 90       	pop	r9
    21aa:	8f 90       	pop	r8
    21ac:	7f 90       	pop	r7
    21ae:	6f 90       	pop	r6
    21b0:	5f 90       	pop	r5
    21b2:	08 95       	ret

000021b4 <vfscanf>:
    21b4:	5f 92       	push	r5
    21b6:	6f 92       	push	r6
    21b8:	7f 92       	push	r7
    21ba:	8f 92       	push	r8
    21bc:	9f 92       	push	r9
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	6c 01       	movw	r12, r24
    21d4:	eb 01       	movw	r28, r22
    21d6:	5a 01       	movw	r10, r20
    21d8:	fc 01       	movw	r30, r24
    21da:	16 82       	std	Z+6, r1	; 0x06
    21dc:	17 82       	std	Z+7, r1	; 0x07
    21de:	51 2c       	mov	r5, r1
    21e0:	f6 01       	movw	r30, r12
    21e2:	e3 80       	ldd	r14, Z+3	; 0x03
    21e4:	fe 01       	movw	r30, r28
    21e6:	e3 fc       	sbrc	r14, 3
    21e8:	85 91       	lpm	r24, Z+
    21ea:	e3 fe       	sbrs	r14, 3
    21ec:	81 91       	ld	r24, Z+
    21ee:	18 2f       	mov	r17, r24
    21f0:	ef 01       	movw	r28, r30
    21f2:	88 23       	and	r24, r24
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <vfscanf+0x44>
    21f6:	e0 c0       	rjmp	.+448    	; 0x23b8 <vfscanf+0x204>
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	2e d2       	rcall	.+1116   	; 0x2658 <isspace>
    21fc:	89 2b       	or	r24, r25
    21fe:	19 f0       	breq	.+6      	; 0x2206 <vfscanf+0x52>
    2200:	c6 01       	movw	r24, r12
    2202:	5f de       	rcall	.-834    	; 0x1ec2 <skip_spaces>
    2204:	ed cf       	rjmp	.-38     	; 0x21e0 <vfscanf+0x2c>
    2206:	15 32       	cpi	r17, 0x25	; 37
    2208:	41 f4       	brne	.+16     	; 0x221a <vfscanf+0x66>
    220a:	fe 01       	movw	r30, r28
    220c:	e3 fc       	sbrc	r14, 3
    220e:	15 91       	lpm	r17, Z+
    2210:	e3 fe       	sbrs	r14, 3
    2212:	11 91       	ld	r17, Z+
    2214:	ef 01       	movw	r28, r30
    2216:	15 32       	cpi	r17, 0x25	; 37
    2218:	71 f4       	brne	.+28     	; 0x2236 <vfscanf+0x82>
    221a:	c6 01       	movw	r24, r12
    221c:	37 d2       	rcall	.+1134   	; 0x268c <fgetc>
    221e:	97 fd       	sbrc	r25, 7
    2220:	c9 c0       	rjmp	.+402    	; 0x23b4 <vfscanf+0x200>
    2222:	41 2f       	mov	r20, r17
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	9c 01       	movw	r18, r24
    2228:	33 27       	eor	r19, r19
    222a:	24 17       	cp	r18, r20
    222c:	35 07       	cpc	r19, r21
    222e:	c1 f2       	breq	.-80     	; 0x21e0 <vfscanf+0x2c>
    2230:	b6 01       	movw	r22, r12
    2232:	6a d2       	rcall	.+1236   	; 0x2708 <ungetc>
    2234:	c1 c0       	rjmp	.+386    	; 0x23b8 <vfscanf+0x204>
    2236:	1a 32       	cpi	r17, 0x2A	; 42
    2238:	39 f4       	brne	.+14     	; 0x2248 <vfscanf+0x94>
    223a:	e3 fc       	sbrc	r14, 3
    223c:	15 91       	lpm	r17, Z+
    223e:	e3 fe       	sbrs	r14, 3
    2240:	11 91       	ld	r17, Z+
    2242:	ef 01       	movw	r28, r30
    2244:	01 e0       	ldi	r16, 0x01	; 1
    2246:	01 c0       	rjmp	.+2      	; 0x224a <vfscanf+0x96>
    2248:	00 e0       	ldi	r16, 0x00	; 0
    224a:	f1 2c       	mov	r15, r1
    224c:	20 ed       	ldi	r18, 0xD0	; 208
    224e:	21 0f       	add	r18, r17
    2250:	2a 30       	cpi	r18, 0x0A	; 10
    2252:	78 f4       	brcc	.+30     	; 0x2272 <vfscanf+0xbe>
    2254:	02 60       	ori	r16, 0x02	; 2
    2256:	6f 2d       	mov	r22, r15
    2258:	70 e0       	ldi	r23, 0x00	; 0
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	09 de       	rcall	.-1006   	; 0x1e74 <mulacc>
    2262:	f6 2e       	mov	r15, r22
    2264:	fe 01       	movw	r30, r28
    2266:	e3 fc       	sbrc	r14, 3
    2268:	15 91       	lpm	r17, Z+
    226a:	e3 fe       	sbrs	r14, 3
    226c:	11 91       	ld	r17, Z+
    226e:	ef 01       	movw	r28, r30
    2270:	ed cf       	rjmp	.-38     	; 0x224c <vfscanf+0x98>
    2272:	01 ff       	sbrs	r16, 1
    2274:	03 c0       	rjmp	.+6      	; 0x227c <vfscanf+0xc8>
    2276:	f1 10       	cpse	r15, r1
    2278:	03 c0       	rjmp	.+6      	; 0x2280 <vfscanf+0xcc>
    227a:	9e c0       	rjmp	.+316    	; 0x23b8 <vfscanf+0x204>
    227c:	ff 24       	eor	r15, r15
    227e:	fa 94       	dec	r15
    2280:	18 36       	cpi	r17, 0x68	; 104
    2282:	19 f0       	breq	.+6      	; 0x228a <vfscanf+0xd6>
    2284:	1c 36       	cpi	r17, 0x6C	; 108
    2286:	51 f0       	breq	.+20     	; 0x229c <vfscanf+0xe8>
    2288:	10 c0       	rjmp	.+32     	; 0x22aa <vfscanf+0xf6>
    228a:	fe 01       	movw	r30, r28
    228c:	e3 fc       	sbrc	r14, 3
    228e:	15 91       	lpm	r17, Z+
    2290:	e3 fe       	sbrs	r14, 3
    2292:	11 91       	ld	r17, Z+
    2294:	ef 01       	movw	r28, r30
    2296:	18 36       	cpi	r17, 0x68	; 104
    2298:	41 f4       	brne	.+16     	; 0x22aa <vfscanf+0xf6>
    229a:	08 60       	ori	r16, 0x08	; 8
    229c:	04 60       	ori	r16, 0x04	; 4
    229e:	fe 01       	movw	r30, r28
    22a0:	e3 fc       	sbrc	r14, 3
    22a2:	15 91       	lpm	r17, Z+
    22a4:	e3 fe       	sbrs	r14, 3
    22a6:	11 91       	ld	r17, Z+
    22a8:	ef 01       	movw	r28, r30
    22aa:	11 23       	and	r17, r17
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <vfscanf+0xfc>
    22ae:	84 c0       	rjmp	.+264    	; 0x23b8 <vfscanf+0x204>
    22b0:	61 2f       	mov	r22, r17
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	8e ef       	ldi	r24, 0xFE	; 254
    22b6:	92 e0       	ldi	r25, 0x02	; 2
    22b8:	d7 d1       	rcall	.+942    	; 0x2668 <strchr_P>
    22ba:	89 2b       	or	r24, r25
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <vfscanf+0x10c>
    22be:	7c c0       	rjmp	.+248    	; 0x23b8 <vfscanf+0x204>
    22c0:	00 fd       	sbrc	r16, 0
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <vfscanf+0x11e>
    22c4:	f5 01       	movw	r30, r10
    22c6:	80 80       	ld	r8, Z
    22c8:	91 80       	ldd	r9, Z+1	; 0x01
    22ca:	c5 01       	movw	r24, r10
    22cc:	02 96       	adiw	r24, 0x02	; 2
    22ce:	5c 01       	movw	r10, r24
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <vfscanf+0x122>
    22d2:	81 2c       	mov	r8, r1
    22d4:	91 2c       	mov	r9, r1
    22d6:	1e 36       	cpi	r17, 0x6E	; 110
    22d8:	49 f4       	brne	.+18     	; 0x22ec <vfscanf+0x138>
    22da:	f6 01       	movw	r30, r12
    22dc:	46 81       	ldd	r20, Z+6	; 0x06
    22de:	57 81       	ldd	r21, Z+7	; 0x07
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	20 2f       	mov	r18, r16
    22e6:	c4 01       	movw	r24, r8
    22e8:	b9 dd       	rcall	.-1166   	; 0x1e5c <putval>
    22ea:	7a cf       	rjmp	.-268    	; 0x21e0 <vfscanf+0x2c>
    22ec:	13 36       	cpi	r17, 0x63	; 99
    22ee:	a1 f4       	brne	.+40     	; 0x2318 <vfscanf+0x164>
    22f0:	01 fd       	sbrc	r16, 1
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <vfscanf+0x144>
    22f4:	ff 24       	eor	r15, r15
    22f6:	f3 94       	inc	r15
    22f8:	c6 01       	movw	r24, r12
    22fa:	c8 d1       	rcall	.+912    	; 0x268c <fgetc>
    22fc:	97 fd       	sbrc	r25, 7
    22fe:	5a c0       	rjmp	.+180    	; 0x23b4 <vfscanf+0x200>
    2300:	81 14       	cp	r8, r1
    2302:	91 04       	cpc	r9, r1
    2304:	29 f0       	breq	.+10     	; 0x2310 <vfscanf+0x15c>
    2306:	f4 01       	movw	r30, r8
    2308:	80 83       	st	Z, r24
    230a:	c4 01       	movw	r24, r8
    230c:	01 96       	adiw	r24, 0x01	; 1
    230e:	4c 01       	movw	r8, r24
    2310:	fa 94       	dec	r15
    2312:	f1 10       	cpse	r15, r1
    2314:	f1 cf       	rjmp	.-30     	; 0x22f8 <vfscanf+0x144>
    2316:	4a c0       	rjmp	.+148    	; 0x23ac <vfscanf+0x1f8>
    2318:	1b 35       	cpi	r17, 0x5B	; 91
    231a:	51 f4       	brne	.+20     	; 0x2330 <vfscanf+0x17c>
    231c:	9e 01       	movw	r18, r28
    231e:	a4 01       	movw	r20, r8
    2320:	6f 2d       	mov	r22, r15
    2322:	c6 01       	movw	r24, r12
    2324:	6e de       	rcall	.-804    	; 0x2002 <conv_brk>
    2326:	ec 01       	movw	r28, r24
    2328:	89 2b       	or	r24, r25
    232a:	09 f0       	breq	.+2      	; 0x232e <vfscanf+0x17a>
    232c:	3f c0       	rjmp	.+126    	; 0x23ac <vfscanf+0x1f8>
    232e:	39 c0       	rjmp	.+114    	; 0x23a2 <vfscanf+0x1ee>
    2330:	c6 01       	movw	r24, r12
    2332:	c7 dd       	rcall	.-1138   	; 0x1ec2 <skip_spaces>
    2334:	97 fd       	sbrc	r25, 7
    2336:	3e c0       	rjmp	.+124    	; 0x23b4 <vfscanf+0x200>
    2338:	1f 36       	cpi	r17, 0x6F	; 111
    233a:	49 f1       	breq	.+82     	; 0x238e <vfscanf+0x1da>
    233c:	28 f4       	brcc	.+10     	; 0x2348 <vfscanf+0x194>
    233e:	14 36       	cpi	r17, 0x64	; 100
    2340:	21 f1       	breq	.+72     	; 0x238a <vfscanf+0x1d6>
    2342:	19 36       	cpi	r17, 0x69	; 105
    2344:	39 f1       	breq	.+78     	; 0x2394 <vfscanf+0x1e0>
    2346:	25 c0       	rjmp	.+74     	; 0x2392 <vfscanf+0x1de>
    2348:	13 37       	cpi	r17, 0x73	; 115
    234a:	71 f0       	breq	.+28     	; 0x2368 <vfscanf+0x1b4>
    234c:	15 37       	cpi	r17, 0x75	; 117
    234e:	e9 f0       	breq	.+58     	; 0x238a <vfscanf+0x1d6>
    2350:	20 c0       	rjmp	.+64     	; 0x2392 <vfscanf+0x1de>
    2352:	81 14       	cp	r8, r1
    2354:	91 04       	cpc	r9, r1
    2356:	29 f0       	breq	.+10     	; 0x2362 <vfscanf+0x1ae>
    2358:	f4 01       	movw	r30, r8
    235a:	60 82       	st	Z, r6
    235c:	c4 01       	movw	r24, r8
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	4c 01       	movw	r8, r24
    2362:	fa 94       	dec	r15
    2364:	ff 20       	and	r15, r15
    2366:	59 f0       	breq	.+22     	; 0x237e <vfscanf+0x1ca>
    2368:	c6 01       	movw	r24, r12
    236a:	90 d1       	rcall	.+800    	; 0x268c <fgetc>
    236c:	3c 01       	movw	r6, r24
    236e:	97 fd       	sbrc	r25, 7
    2370:	06 c0       	rjmp	.+12     	; 0x237e <vfscanf+0x1ca>
    2372:	72 d1       	rcall	.+740    	; 0x2658 <isspace>
    2374:	89 2b       	or	r24, r25
    2376:	69 f3       	breq	.-38     	; 0x2352 <vfscanf+0x19e>
    2378:	b6 01       	movw	r22, r12
    237a:	c3 01       	movw	r24, r6
    237c:	c5 d1       	rcall	.+906    	; 0x2708 <ungetc>
    237e:	81 14       	cp	r8, r1
    2380:	91 04       	cpc	r9, r1
    2382:	a1 f0       	breq	.+40     	; 0x23ac <vfscanf+0x1f8>
    2384:	f4 01       	movw	r30, r8
    2386:	10 82       	st	Z, r1
    2388:	11 c0       	rjmp	.+34     	; 0x23ac <vfscanf+0x1f8>
    238a:	00 62       	ori	r16, 0x20	; 32
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <vfscanf+0x1e0>
    238e:	00 61       	ori	r16, 0x10	; 16
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <vfscanf+0x1e0>
    2392:	00 64       	ori	r16, 0x40	; 64
    2394:	20 2f       	mov	r18, r16
    2396:	a4 01       	movw	r20, r8
    2398:	6f 2d       	mov	r22, r15
    239a:	c6 01       	movw	r24, r12
    239c:	a8 dd       	rcall	.-1200   	; 0x1eee <conv_int>
    239e:	81 11       	cpse	r24, r1
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <vfscanf+0x1f8>
    23a2:	f6 01       	movw	r30, r12
    23a4:	83 81       	ldd	r24, Z+3	; 0x03
    23a6:	80 73       	andi	r24, 0x30	; 48
    23a8:	29 f4       	brne	.+10     	; 0x23b4 <vfscanf+0x200>
    23aa:	06 c0       	rjmp	.+12     	; 0x23b8 <vfscanf+0x204>
    23ac:	00 fd       	sbrc	r16, 0
    23ae:	18 cf       	rjmp	.-464    	; 0x21e0 <vfscanf+0x2c>
    23b0:	53 94       	inc	r5
    23b2:	16 cf       	rjmp	.-468    	; 0x21e0 <vfscanf+0x2c>
    23b4:	55 20       	and	r5, r5
    23b6:	19 f0       	breq	.+6      	; 0x23be <vfscanf+0x20a>
    23b8:	85 2d       	mov	r24, r5
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <vfscanf+0x20e>
    23be:	8f ef       	ldi	r24, 0xFF	; 255
    23c0:	9f ef       	ldi	r25, 0xFF	; 255
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	1f 91       	pop	r17
    23c8:	0f 91       	pop	r16
    23ca:	ff 90       	pop	r15
    23cc:	ef 90       	pop	r14
    23ce:	df 90       	pop	r13
    23d0:	cf 90       	pop	r12
    23d2:	bf 90       	pop	r11
    23d4:	af 90       	pop	r10
    23d6:	9f 90       	pop	r9
    23d8:	8f 90       	pop	r8
    23da:	7f 90       	pop	r7
    23dc:	6f 90       	pop	r6
    23de:	5f 90       	pop	r5
    23e0:	08 95       	ret

000023e2 <calloc>:
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	86 9f       	mul	r24, r22
    23ec:	80 01       	movw	r16, r0
    23ee:	87 9f       	mul	r24, r23
    23f0:	10 0d       	add	r17, r0
    23f2:	96 9f       	mul	r25, r22
    23f4:	10 0d       	add	r17, r0
    23f6:	11 24       	eor	r1, r1
    23f8:	c8 01       	movw	r24, r16
    23fa:	0d d0       	rcall	.+26     	; 0x2416 <malloc>
    23fc:	ec 01       	movw	r28, r24
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	21 f0       	breq	.+8      	; 0x240a <calloc+0x28>
    2402:	a8 01       	movw	r20, r16
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	3a d1       	rcall	.+628    	; 0x267e <memset>
    240a:	ce 01       	movw	r24, r28
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	08 95       	ret

00002416 <malloc>:
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	82 30       	cpi	r24, 0x02	; 2
    2420:	91 05       	cpc	r25, r1
    2422:	10 f4       	brcc	.+4      	; 0x2428 <malloc+0x12>
    2424:	82 e0       	ldi	r24, 0x02	; 2
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <__flp>
    242c:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <__flp+0x1>
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	a0 e0       	ldi	r26, 0x00	; 0
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	30 97       	sbiw	r30, 0x00	; 0
    243a:	19 f1       	breq	.+70     	; 0x2482 <malloc+0x6c>
    243c:	40 81       	ld	r20, Z
    243e:	51 81       	ldd	r21, Z+1	; 0x01
    2440:	02 81       	ldd	r16, Z+2	; 0x02
    2442:	13 81       	ldd	r17, Z+3	; 0x03
    2444:	48 17       	cp	r20, r24
    2446:	59 07       	cpc	r21, r25
    2448:	c8 f0       	brcs	.+50     	; 0x247c <malloc+0x66>
    244a:	84 17       	cp	r24, r20
    244c:	95 07       	cpc	r25, r21
    244e:	69 f4       	brne	.+26     	; 0x246a <malloc+0x54>
    2450:	10 97       	sbiw	r26, 0x00	; 0
    2452:	31 f0       	breq	.+12     	; 0x2460 <malloc+0x4a>
    2454:	12 96       	adiw	r26, 0x02	; 2
    2456:	0c 93       	st	X, r16
    2458:	12 97       	sbiw	r26, 0x02	; 2
    245a:	13 96       	adiw	r26, 0x03	; 3
    245c:	1c 93       	st	X, r17
    245e:	27 c0       	rjmp	.+78     	; 0x24ae <malloc+0x98>
    2460:	00 93 2e 20 	sts	0x202E, r16	; 0x80202e <__flp>
    2464:	10 93 2f 20 	sts	0x202F, r17	; 0x80202f <__flp+0x1>
    2468:	22 c0       	rjmp	.+68     	; 0x24ae <malloc+0x98>
    246a:	21 15       	cp	r18, r1
    246c:	31 05       	cpc	r19, r1
    246e:	19 f0       	breq	.+6      	; 0x2476 <malloc+0x60>
    2470:	42 17       	cp	r20, r18
    2472:	53 07       	cpc	r21, r19
    2474:	18 f4       	brcc	.+6      	; 0x247c <malloc+0x66>
    2476:	9a 01       	movw	r18, r20
    2478:	bd 01       	movw	r22, r26
    247a:	ef 01       	movw	r28, r30
    247c:	df 01       	movw	r26, r30
    247e:	f8 01       	movw	r30, r16
    2480:	db cf       	rjmp	.-74     	; 0x2438 <malloc+0x22>
    2482:	21 15       	cp	r18, r1
    2484:	31 05       	cpc	r19, r1
    2486:	f9 f0       	breq	.+62     	; 0x24c6 <malloc+0xb0>
    2488:	28 1b       	sub	r18, r24
    248a:	39 0b       	sbc	r19, r25
    248c:	24 30       	cpi	r18, 0x04	; 4
    248e:	31 05       	cpc	r19, r1
    2490:	80 f4       	brcc	.+32     	; 0x24b2 <malloc+0x9c>
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	9b 81       	ldd	r25, Y+3	; 0x03
    2496:	61 15       	cp	r22, r1
    2498:	71 05       	cpc	r23, r1
    249a:	21 f0       	breq	.+8      	; 0x24a4 <malloc+0x8e>
    249c:	fb 01       	movw	r30, r22
    249e:	82 83       	std	Z+2, r24	; 0x02
    24a0:	93 83       	std	Z+3, r25	; 0x03
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <malloc+0x96>
    24a4:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__flp>
    24a8:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__flp+0x1>
    24ac:	fe 01       	movw	r30, r28
    24ae:	32 96       	adiw	r30, 0x02	; 2
    24b0:	44 c0       	rjmp	.+136    	; 0x253a <malloc+0x124>
    24b2:	fe 01       	movw	r30, r28
    24b4:	e2 0f       	add	r30, r18
    24b6:	f3 1f       	adc	r31, r19
    24b8:	81 93       	st	Z+, r24
    24ba:	91 93       	st	Z+, r25
    24bc:	22 50       	subi	r18, 0x02	; 2
    24be:	31 09       	sbc	r19, r1
    24c0:	28 83       	st	Y, r18
    24c2:	39 83       	std	Y+1, r19	; 0x01
    24c4:	3a c0       	rjmp	.+116    	; 0x253a <malloc+0x124>
    24c6:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    24ca:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    24ce:	23 2b       	or	r18, r19
    24d0:	41 f4       	brne	.+16     	; 0x24e2 <malloc+0xcc>
    24d2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    24d6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    24da:	20 93 2c 20 	sts	0x202C, r18	; 0x80202c <__brkval>
    24de:	30 93 2d 20 	sts	0x202D, r19	; 0x80202d <__brkval+0x1>
    24e2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    24e6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    24ea:	21 15       	cp	r18, r1
    24ec:	31 05       	cpc	r19, r1
    24ee:	41 f4       	brne	.+16     	; 0x2500 <malloc+0xea>
    24f0:	2d b7       	in	r18, 0x3d	; 61
    24f2:	3e b7       	in	r19, 0x3e	; 62
    24f4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    24f8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    24fc:	24 1b       	sub	r18, r20
    24fe:	35 0b       	sbc	r19, r21
    2500:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <__brkval>
    2504:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <__brkval+0x1>
    2508:	e2 17       	cp	r30, r18
    250a:	f3 07       	cpc	r31, r19
    250c:	a0 f4       	brcc	.+40     	; 0x2536 <malloc+0x120>
    250e:	2e 1b       	sub	r18, r30
    2510:	3f 0b       	sbc	r19, r31
    2512:	28 17       	cp	r18, r24
    2514:	39 07       	cpc	r19, r25
    2516:	78 f0       	brcs	.+30     	; 0x2536 <malloc+0x120>
    2518:	ac 01       	movw	r20, r24
    251a:	4e 5f       	subi	r20, 0xFE	; 254
    251c:	5f 4f       	sbci	r21, 0xFF	; 255
    251e:	24 17       	cp	r18, r20
    2520:	35 07       	cpc	r19, r21
    2522:	48 f0       	brcs	.+18     	; 0x2536 <malloc+0x120>
    2524:	4e 0f       	add	r20, r30
    2526:	5f 1f       	adc	r21, r31
    2528:	40 93 2c 20 	sts	0x202C, r20	; 0x80202c <__brkval>
    252c:	50 93 2d 20 	sts	0x202D, r21	; 0x80202d <__brkval+0x1>
    2530:	81 93       	st	Z+, r24
    2532:	91 93       	st	Z+, r25
    2534:	02 c0       	rjmp	.+4      	; 0x253a <malloc+0x124>
    2536:	e0 e0       	ldi	r30, 0x00	; 0
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	cf 01       	movw	r24, r30
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	08 95       	ret

00002546 <free>:
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	09 f4       	brne	.+2      	; 0x2550 <free+0xa>
    254e:	81 c0       	rjmp	.+258    	; 0x2652 <free+0x10c>
    2550:	fc 01       	movw	r30, r24
    2552:	32 97       	sbiw	r30, 0x02	; 2
    2554:	12 82       	std	Z+2, r1	; 0x02
    2556:	13 82       	std	Z+3, r1	; 0x03
    2558:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <__flp>
    255c:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <__flp+0x1>
    2560:	10 97       	sbiw	r26, 0x00	; 0
    2562:	81 f4       	brne	.+32     	; 0x2584 <free+0x3e>
    2564:	20 81       	ld	r18, Z
    2566:	31 81       	ldd	r19, Z+1	; 0x01
    2568:	82 0f       	add	r24, r18
    256a:	93 1f       	adc	r25, r19
    256c:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    2570:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    2574:	28 17       	cp	r18, r24
    2576:	39 07       	cpc	r19, r25
    2578:	51 f5       	brne	.+84     	; 0x25ce <free+0x88>
    257a:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <__brkval>
    257e:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <__brkval+0x1>
    2582:	67 c0       	rjmp	.+206    	; 0x2652 <free+0x10c>
    2584:	ed 01       	movw	r28, r26
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	ce 17       	cp	r28, r30
    258c:	df 07       	cpc	r29, r31
    258e:	40 f4       	brcc	.+16     	; 0x25a0 <free+0x5a>
    2590:	4a 81       	ldd	r20, Y+2	; 0x02
    2592:	5b 81       	ldd	r21, Y+3	; 0x03
    2594:	9e 01       	movw	r18, r28
    2596:	41 15       	cp	r20, r1
    2598:	51 05       	cpc	r21, r1
    259a:	f1 f0       	breq	.+60     	; 0x25d8 <free+0x92>
    259c:	ea 01       	movw	r28, r20
    259e:	f5 cf       	rjmp	.-22     	; 0x258a <free+0x44>
    25a0:	c2 83       	std	Z+2, r28	; 0x02
    25a2:	d3 83       	std	Z+3, r29	; 0x03
    25a4:	40 81       	ld	r20, Z
    25a6:	51 81       	ldd	r21, Z+1	; 0x01
    25a8:	84 0f       	add	r24, r20
    25aa:	95 1f       	adc	r25, r21
    25ac:	c8 17       	cp	r28, r24
    25ae:	d9 07       	cpc	r29, r25
    25b0:	59 f4       	brne	.+22     	; 0x25c8 <free+0x82>
    25b2:	88 81       	ld	r24, Y
    25b4:	99 81       	ldd	r25, Y+1	; 0x01
    25b6:	84 0f       	add	r24, r20
    25b8:	95 1f       	adc	r25, r21
    25ba:	02 96       	adiw	r24, 0x02	; 2
    25bc:	80 83       	st	Z, r24
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	9b 81       	ldd	r25, Y+3	; 0x03
    25c4:	82 83       	std	Z+2, r24	; 0x02
    25c6:	93 83       	std	Z+3, r25	; 0x03
    25c8:	21 15       	cp	r18, r1
    25ca:	31 05       	cpc	r19, r1
    25cc:	29 f4       	brne	.+10     	; 0x25d8 <free+0x92>
    25ce:	e0 93 2e 20 	sts	0x202E, r30	; 0x80202e <__flp>
    25d2:	f0 93 2f 20 	sts	0x202F, r31	; 0x80202f <__flp+0x1>
    25d6:	3d c0       	rjmp	.+122    	; 0x2652 <free+0x10c>
    25d8:	e9 01       	movw	r28, r18
    25da:	ea 83       	std	Y+2, r30	; 0x02
    25dc:	fb 83       	std	Y+3, r31	; 0x03
    25de:	49 91       	ld	r20, Y+
    25e0:	59 91       	ld	r21, Y+
    25e2:	c4 0f       	add	r28, r20
    25e4:	d5 1f       	adc	r29, r21
    25e6:	ec 17       	cp	r30, r28
    25e8:	fd 07       	cpc	r31, r29
    25ea:	61 f4       	brne	.+24     	; 0x2604 <free+0xbe>
    25ec:	80 81       	ld	r24, Z
    25ee:	91 81       	ldd	r25, Z+1	; 0x01
    25f0:	84 0f       	add	r24, r20
    25f2:	95 1f       	adc	r25, r21
    25f4:	02 96       	adiw	r24, 0x02	; 2
    25f6:	e9 01       	movw	r28, r18
    25f8:	88 83       	st	Y, r24
    25fa:	99 83       	std	Y+1, r25	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	8a 83       	std	Y+2, r24	; 0x02
    2602:	9b 83       	std	Y+3, r25	; 0x03
    2604:	e0 e0       	ldi	r30, 0x00	; 0
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	12 96       	adiw	r26, 0x02	; 2
    260a:	8d 91       	ld	r24, X+
    260c:	9c 91       	ld	r25, X
    260e:	13 97       	sbiw	r26, 0x03	; 3
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	19 f0       	breq	.+6      	; 0x261a <free+0xd4>
    2614:	fd 01       	movw	r30, r26
    2616:	dc 01       	movw	r26, r24
    2618:	f7 cf       	rjmp	.-18     	; 0x2608 <free+0xc2>
    261a:	8d 91       	ld	r24, X+
    261c:	9c 91       	ld	r25, X
    261e:	11 97       	sbiw	r26, 0x01	; 1
    2620:	9d 01       	movw	r18, r26
    2622:	2e 5f       	subi	r18, 0xFE	; 254
    2624:	3f 4f       	sbci	r19, 0xFF	; 255
    2626:	82 0f       	add	r24, r18
    2628:	93 1f       	adc	r25, r19
    262a:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    262e:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    2632:	28 17       	cp	r18, r24
    2634:	39 07       	cpc	r19, r25
    2636:	69 f4       	brne	.+26     	; 0x2652 <free+0x10c>
    2638:	30 97       	sbiw	r30, 0x00	; 0
    263a:	29 f4       	brne	.+10     	; 0x2646 <free+0x100>
    263c:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <__flp>
    2640:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <__flp+0x1>
    2644:	02 c0       	rjmp	.+4      	; 0x264a <free+0x104>
    2646:	12 82       	std	Z+2, r1	; 0x02
    2648:	13 82       	std	Z+3, r1	; 0x03
    264a:	a0 93 2c 20 	sts	0x202C, r26	; 0x80202c <__brkval>
    264e:	b0 93 2d 20 	sts	0x202D, r27	; 0x80202d <__brkval+0x1>
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <isspace>:
    2658:	91 11       	cpse	r25, r1
    265a:	6f c0       	rjmp	.+222    	; 0x273a <__ctype_isfalse>
    265c:	80 32       	cpi	r24, 0x20	; 32
    265e:	19 f0       	breq	.+6      	; 0x2666 <isspace+0xe>
    2660:	89 50       	subi	r24, 0x09	; 9
    2662:	85 50       	subi	r24, 0x05	; 5
    2664:	d0 f7       	brcc	.-12     	; 0x265a <isspace+0x2>
    2666:	08 95       	ret

00002668 <strchr_P>:
    2668:	fc 01       	movw	r30, r24
    266a:	05 90       	lpm	r0, Z+
    266c:	06 16       	cp	r0, r22
    266e:	21 f0       	breq	.+8      	; 0x2678 <strchr_P+0x10>
    2670:	00 20       	and	r0, r0
    2672:	d9 f7       	brne	.-10     	; 0x266a <strchr_P+0x2>
    2674:	c0 01       	movw	r24, r0
    2676:	08 95       	ret
    2678:	31 97       	sbiw	r30, 0x01	; 1
    267a:	cf 01       	movw	r24, r30
    267c:	08 95       	ret

0000267e <memset>:
    267e:	dc 01       	movw	r26, r24
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <memset+0x6>
    2682:	6d 93       	st	X+, r22
    2684:	41 50       	subi	r20, 0x01	; 1
    2686:	50 40       	sbci	r21, 0x00	; 0
    2688:	e0 f7       	brcc	.-8      	; 0x2682 <memset+0x4>
    268a:	08 95       	ret

0000268c <fgetc>:
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	ec 01       	movw	r28, r24
    2692:	2b 81       	ldd	r18, Y+3	; 0x03
    2694:	20 ff       	sbrs	r18, 0
    2696:	33 c0       	rjmp	.+102    	; 0x26fe <fgetc+0x72>
    2698:	26 ff       	sbrs	r18, 6
    269a:	0a c0       	rjmp	.+20     	; 0x26b0 <fgetc+0x24>
    269c:	2f 7b       	andi	r18, 0xBF	; 191
    269e:	2b 83       	std	Y+3, r18	; 0x03
    26a0:	8e 81       	ldd	r24, Y+6	; 0x06
    26a2:	9f 81       	ldd	r25, Y+7	; 0x07
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	8e 83       	std	Y+6, r24	; 0x06
    26a8:	9f 83       	std	Y+7, r25	; 0x07
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	29 c0       	rjmp	.+82     	; 0x2702 <fgetc+0x76>
    26b0:	22 ff       	sbrs	r18, 2
    26b2:	0f c0       	rjmp	.+30     	; 0x26d2 <fgetc+0x46>
    26b4:	e8 81       	ld	r30, Y
    26b6:	f9 81       	ldd	r31, Y+1	; 0x01
    26b8:	80 81       	ld	r24, Z
    26ba:	08 2e       	mov	r0, r24
    26bc:	00 0c       	add	r0, r0
    26be:	99 0b       	sbc	r25, r25
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	19 f4       	brne	.+6      	; 0x26ca <fgetc+0x3e>
    26c4:	20 62       	ori	r18, 0x20	; 32
    26c6:	2b 83       	std	Y+3, r18	; 0x03
    26c8:	1a c0       	rjmp	.+52     	; 0x26fe <fgetc+0x72>
    26ca:	31 96       	adiw	r30, 0x01	; 1
    26cc:	e8 83       	st	Y, r30
    26ce:	f9 83       	std	Y+1, r31	; 0x01
    26d0:	0e c0       	rjmp	.+28     	; 0x26ee <fgetc+0x62>
    26d2:	ea 85       	ldd	r30, Y+10	; 0x0a
    26d4:	fb 85       	ldd	r31, Y+11	; 0x0b
    26d6:	19 95       	eicall
    26d8:	97 ff       	sbrs	r25, 7
    26da:	09 c0       	rjmp	.+18     	; 0x26ee <fgetc+0x62>
    26dc:	2b 81       	ldd	r18, Y+3	; 0x03
    26de:	01 96       	adiw	r24, 0x01	; 1
    26e0:	11 f0       	breq	.+4      	; 0x26e6 <fgetc+0x5a>
    26e2:	80 e2       	ldi	r24, 0x20	; 32
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <fgetc+0x5c>
    26e6:	80 e1       	ldi	r24, 0x10	; 16
    26e8:	82 2b       	or	r24, r18
    26ea:	8b 83       	std	Y+3, r24	; 0x03
    26ec:	08 c0       	rjmp	.+16     	; 0x26fe <fgetc+0x72>
    26ee:	2e 81       	ldd	r18, Y+6	; 0x06
    26f0:	3f 81       	ldd	r19, Y+7	; 0x07
    26f2:	2f 5f       	subi	r18, 0xFF	; 255
    26f4:	3f 4f       	sbci	r19, 0xFF	; 255
    26f6:	2e 83       	std	Y+6, r18	; 0x06
    26f8:	3f 83       	std	Y+7, r19	; 0x07
    26fa:	99 27       	eor	r25, r25
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <fgetc+0x76>
    26fe:	8f ef       	ldi	r24, 0xFF	; 255
    2700:	9f ef       	ldi	r25, 0xFF	; 255
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	08 95       	ret

00002708 <ungetc>:
    2708:	fb 01       	movw	r30, r22
    270a:	23 81       	ldd	r18, Z+3	; 0x03
    270c:	20 ff       	sbrs	r18, 0
    270e:	12 c0       	rjmp	.+36     	; 0x2734 <ungetc+0x2c>
    2710:	26 fd       	sbrc	r18, 6
    2712:	10 c0       	rjmp	.+32     	; 0x2734 <ungetc+0x2c>
    2714:	8f 3f       	cpi	r24, 0xFF	; 255
    2716:	3f ef       	ldi	r19, 0xFF	; 255
    2718:	93 07       	cpc	r25, r19
    271a:	61 f0       	breq	.+24     	; 0x2734 <ungetc+0x2c>
    271c:	82 83       	std	Z+2, r24	; 0x02
    271e:	2f 7d       	andi	r18, 0xDF	; 223
    2720:	20 64       	ori	r18, 0x40	; 64
    2722:	23 83       	std	Z+3, r18	; 0x03
    2724:	26 81       	ldd	r18, Z+6	; 0x06
    2726:	37 81       	ldd	r19, Z+7	; 0x07
    2728:	21 50       	subi	r18, 0x01	; 1
    272a:	31 09       	sbc	r19, r1
    272c:	26 83       	std	Z+6, r18	; 0x06
    272e:	37 83       	std	Z+7, r19	; 0x07
    2730:	99 27       	eor	r25, r25
    2732:	08 95       	ret
    2734:	8f ef       	ldi	r24, 0xFF	; 255
    2736:	9f ef       	ldi	r25, 0xFF	; 255
    2738:	08 95       	ret

0000273a <__ctype_isfalse>:
    273a:	99 27       	eor	r25, r25
    273c:	88 27       	eor	r24, r24

0000273e <__ctype_istrue>:
    273e:	08 95       	ret

00002740 <_exit>:
    2740:	f8 94       	cli

00002742 <__stop_program>:
    2742:	ff cf       	rjmp	.-2      	; 0x2742 <__stop_program>
