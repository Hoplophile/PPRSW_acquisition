
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000123e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  0000123e  000012d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00802010  00802010  000012e2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007276  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b0c  00000000  00000000  00008702  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000253f  00000000  00000000  0000c20e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  0000e750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d971  00000000  00000000  0000e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012de  00000000  00000000  0003c359  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0003d637  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009d94  00000000  00000000  0003d727  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	03 c1       	rjmp	.+518    	; 0x208 <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	1e c1       	rjmp	.+572    	; 0x246 <__bad_interrupt>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c1       	rjmp	.+532    	; 0x246 <__bad_interrupt>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fa c0       	rjmp	.+500    	; 0x246 <__bad_interrupt>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ea c0       	rjmp	.+468    	; 0x246 <__bad_interrupt>
      72:	00 00       	nop
      74:	e8 c0       	rjmp	.+464    	; 0x246 <__bad_interrupt>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c4 c0       	rjmp	.+392    	; 0x246 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	84 c0       	rjmp	.+264    	; 0x246 <__bad_interrupt>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	78 c0       	rjmp	.+240    	; 0x246 <__bad_interrupt>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	72 c0       	rjmp	.+228    	; 0x246 <__bad_interrupt>
     162:	00 00       	nop
     164:	70 c0       	rjmp	.+224    	; 0x246 <__bad_interrupt>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	63 64       	ori	r22, 0x43	; 67
     1fe:	69 6e       	ori	r22, 0xE9	; 233
     200:	6f 70       	andi	r22, 0x0F	; 15
     202:	73 75       	andi	r23, 0x53	; 83
     204:	78 58       	subi	r23, 0x88	; 136
     206:	5b 00       	.word	0x005b	; ????

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	cd bf       	out	0x3d, r28	; 61
     210:	df e5       	ldi	r29, 0x5F	; 95
     212:	de bf       	out	0x3e, r29	; 62
     214:	00 e0       	ldi	r16, 0x00	; 0
     216:	0c bf       	out	0x3c, r16	; 60

00000218 <__do_copy_data>:
     218:	10 e2       	ldi	r17, 0x20	; 32
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e2       	ldi	r27, 0x20	; 32
     21e:	ee e3       	ldi	r30, 0x3E	; 62
     220:	f2 e1       	ldi	r31, 0x12	; 18
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0b bf       	out	0x3b, r16	; 59
     226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
     228:	07 90       	elpm	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	a0 31       	cpi	r26, 0x10	; 16
     22e:	b1 07       	cpc	r27, r17
     230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>

00000232 <__do_clear_bss>:
     232:	20 e2       	ldi	r18, 0x20	; 32
     234:	a0 e1       	ldi	r26, 0x10	; 16
     236:	b0 e2       	ldi	r27, 0x20	; 32
     238:	01 c0       	rjmp	.+2      	; 0x23c <.do_clear_bss_start>

0000023a <.do_clear_bss_loop>:
     23a:	1d 92       	st	X+, r1

0000023c <.do_clear_bss_start>:
     23c:	a0 32       	cpi	r26, 0x20	; 32
     23e:	b2 07       	cpc	r27, r18
     240:	e1 f7       	brne	.-8      	; 0x23a <.do_clear_bss_loop>
     242:	7b d2       	rcall	.+1270   	; 0x73a <main>
     244:	fa c7       	rjmp	.+4084   	; 0x123a <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	1f 92       	push	r1
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     252:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <stdio_base>
     256:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <stdio_base+0x1>
     25a:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <__data_end>
     25e:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <__data_end+0x1>
     262:	be 01       	movw	r22, r28
     264:	6f 5f       	subi	r22, 0xFF	; 255
     266:	7f 4f       	sbci	r23, 0xFF	; 255
     268:	19 95       	eicall
	return c;
     26a:	89 81       	ldd	r24, Y+1	; 0x01
}
     26c:	08 2e       	mov	r0, r24
     26e:	00 0c       	add	r0, r0
     270:	99 0b       	sbc	r25, r25
     272:	0f 90       	pop	r0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     27a:	fc 01       	movw	r30, r24
     27c:	91 81       	ldd	r25, Z+1	; 0x01
     27e:	95 ff       	sbrs	r25, 5
     280:	fd cf       	rjmp	.-6      	; 0x27c <usart_putchar+0x2>
     282:	60 83       	st	Z, r22
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	08 95       	ret

0000028a <usart_getchar>:
     28a:	fc 01       	movw	r30, r24
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	99 23       	and	r25, r25
     290:	ec f7       	brge	.-6      	; 0x28c <usart_getchar+0x2>
     292:	80 81       	ld	r24, Z
     294:	08 95       	ret

00000296 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     296:	4f 92       	push	r4
     298:	5f 92       	push	r5
     29a:	6f 92       	push	r6
     29c:	7f 92       	push	r7
     29e:	8f 92       	push	r8
     2a0:	9f 92       	push	r9
     2a2:	af 92       	push	r10
     2a4:	bf 92       	push	r11
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	7c 01       	movw	r14, r24
     2b2:	4a 01       	movw	r8, r20
     2b4:	5b 01       	movw	r10, r22
     2b6:	28 01       	movw	r4, r16
     2b8:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2ba:	fc 01       	movw	r30, r24
     2bc:	84 81       	ldd	r24, Z+4	; 0x04
     2be:	82 ff       	sbrs	r24, 2
     2c0:	16 c0       	rjmp	.+44     	; 0x2ee <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     2c2:	d9 01       	movw	r26, r18
     2c4:	c8 01       	movw	r24, r16
     2c6:	68 94       	set
     2c8:	12 f8       	bld	r1, 2
     2ca:	b6 95       	lsr	r27
     2cc:	a7 95       	ror	r26
     2ce:	97 95       	ror	r25
     2d0:	87 95       	ror	r24
     2d2:	16 94       	lsr	r1
     2d4:	d1 f7       	brne	.-12     	; 0x2ca <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     2d6:	b9 01       	movw	r22, r18
     2d8:	a8 01       	movw	r20, r16
     2da:	03 2e       	mov	r0, r19
     2dc:	36 e1       	ldi	r19, 0x16	; 22
     2de:	76 95       	lsr	r23
     2e0:	67 95       	ror	r22
     2e2:	57 95       	ror	r21
     2e4:	47 95       	ror	r20
     2e6:	3a 95       	dec	r19
     2e8:	d1 f7       	brne	.-12     	; 0x2de <usart_set_baudrate+0x48>
     2ea:	30 2d       	mov	r19, r0
     2ec:	15 c0       	rjmp	.+42     	; 0x318 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     2ee:	d9 01       	movw	r26, r18
     2f0:	c8 01       	movw	r24, r16
     2f2:	68 94       	set
     2f4:	13 f8       	bld	r1, 3
     2f6:	b6 95       	lsr	r27
     2f8:	a7 95       	ror	r26
     2fa:	97 95       	ror	r25
     2fc:	87 95       	ror	r24
     2fe:	16 94       	lsr	r1
     300:	d1 f7       	brne	.-12     	; 0x2f6 <usart_set_baudrate+0x60>
		min_rate /= 2;
     302:	b9 01       	movw	r22, r18
     304:	a8 01       	movw	r20, r16
     306:	03 2e       	mov	r0, r19
     308:	37 e1       	ldi	r19, 0x17	; 23
     30a:	76 95       	lsr	r23
     30c:	67 95       	ror	r22
     30e:	57 95       	ror	r21
     310:	47 95       	ror	r20
     312:	3a 95       	dec	r19
     314:	d1 f7       	brne	.-12     	; 0x30a <usart_set_baudrate+0x74>
     316:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     318:	88 15       	cp	r24, r8
     31a:	99 05       	cpc	r25, r9
     31c:	aa 05       	cpc	r26, r10
     31e:	bb 05       	cpc	r27, r11
     320:	08 f4       	brcc	.+2      	; 0x324 <usart_set_baudrate+0x8e>
     322:	a2 c0       	rjmp	.+324    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     324:	84 16       	cp	r8, r20
     326:	95 06       	cpc	r9, r21
     328:	a6 06       	cpc	r10, r22
     32a:	b7 06       	cpc	r11, r23
     32c:	08 f4       	brcc	.+2      	; 0x330 <usart_set_baudrate+0x9a>
     32e:	9e c0       	rjmp	.+316    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     330:	f7 01       	movw	r30, r14
     332:	84 81       	ldd	r24, Z+4	; 0x04
     334:	82 fd       	sbrc	r24, 2
     336:	04 c0       	rjmp	.+8      	; 0x340 <usart_set_baudrate+0xaa>
		baud *= 2;
     338:	88 0c       	add	r8, r8
     33a:	99 1c       	adc	r9, r9
     33c:	aa 1c       	adc	r10, r10
     33e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     340:	c3 01       	movw	r24, r6
     342:	b2 01       	movw	r22, r4
     344:	a5 01       	movw	r20, r10
     346:	94 01       	movw	r18, r8
     348:	46 d2       	rcall	.+1164   	; 0x7d6 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     34a:	2f 3f       	cpi	r18, 0xFF	; 255
     34c:	31 05       	cpc	r19, r1
     34e:	41 05       	cpc	r20, r1
     350:	51 05       	cpc	r21, r1
     352:	08 f4       	brcc	.+2      	; 0x356 <usart_set_baudrate+0xc0>
     354:	8d c0       	rjmp	.+282    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	c9 ef       	ldi	r28, 0xF9	; 249
     360:	05 c0       	rjmp	.+10     	; 0x36c <usart_set_baudrate+0xd6>
     362:	28 17       	cp	r18, r24
     364:	39 07       	cpc	r19, r25
     366:	4a 07       	cpc	r20, r26
     368:	5b 07       	cpc	r21, r27
     36a:	58 f0       	brcs	.+22     	; 0x382 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	aa 1f       	adc	r26, r26
     372:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     374:	cd 3f       	cpi	r28, 0xFD	; 253
     376:	0c f4       	brge	.+2      	; 0x37a <usart_set_baudrate+0xe4>
			limit |= 1;
     378:	81 60       	ori	r24, 0x01	; 1
     37a:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     37c:	c7 30       	cpi	r28, 0x07	; 7
     37e:	89 f7       	brne	.-30     	; 0x362 <usart_set_baudrate+0xcc>
     380:	4d c0       	rjmp	.+154    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     382:	cc 23       	and	r28, r28
     384:	0c f0       	brlt	.+2      	; 0x388 <usart_set_baudrate+0xf2>
     386:	4a c0       	rjmp	.+148    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     388:	d5 01       	movw	r26, r10
     38a:	c4 01       	movw	r24, r8
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	aa 1f       	adc	r26, r26
     392:	bb 1f       	adc	r27, r27
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	aa 1f       	adc	r26, r26
     39a:	bb 1f       	adc	r27, r27
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	aa 1f       	adc	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	48 1a       	sub	r4, r24
     3a6:	59 0a       	sbc	r5, r25
     3a8:	6a 0a       	sbc	r6, r26
     3aa:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     3ac:	ce 3f       	cpi	r28, 0xFE	; 254
     3ae:	ec f4       	brge	.+58     	; 0x3ea <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     3b0:	8d ef       	ldi	r24, 0xFD	; 253
     3b2:	9f ef       	ldi	r25, 0xFF	; 255
     3b4:	8c 1b       	sub	r24, r28
     3b6:	91 09       	sbc	r25, r1
     3b8:	c7 fd       	sbrc	r28, 7
     3ba:	93 95       	inc	r25
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <usart_set_baudrate+0x130>
     3be:	44 0c       	add	r4, r4
     3c0:	55 1c       	adc	r5, r5
     3c2:	66 1c       	adc	r6, r6
     3c4:	77 1c       	adc	r7, r7
     3c6:	8a 95       	dec	r24
     3c8:	d2 f7       	brpl	.-12     	; 0x3be <usart_set_baudrate+0x128>
     3ca:	d5 01       	movw	r26, r10
     3cc:	c4 01       	movw	r24, r8
     3ce:	b6 95       	lsr	r27
     3d0:	a7 95       	ror	r26
     3d2:	97 95       	ror	r25
     3d4:	87 95       	ror	r24
     3d6:	bc 01       	movw	r22, r24
     3d8:	cd 01       	movw	r24, r26
     3da:	64 0d       	add	r22, r4
     3dc:	75 1d       	adc	r23, r5
     3de:	86 1d       	adc	r24, r6
     3e0:	97 1d       	adc	r25, r7
     3e2:	a5 01       	movw	r20, r10
     3e4:	94 01       	movw	r18, r8
     3e6:	f7 d1       	rcall	.+1006   	; 0x7d6 <__udivmodsi4>
     3e8:	35 c0       	rjmp	.+106    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		} else {
			baud <<= exp + 3;
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	8c 0f       	add	r24, r28
     3ee:	a5 01       	movw	r20, r10
     3f0:	94 01       	movw	r18, r8
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <usart_set_baudrate+0x166>
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	44 1f       	adc	r20, r20
     3fa:	55 1f       	adc	r21, r21
     3fc:	8a 95       	dec	r24
     3fe:	d2 f7       	brpl	.-12     	; 0x3f4 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     400:	da 01       	movw	r26, r20
     402:	c9 01       	movw	r24, r18
     404:	b6 95       	lsr	r27
     406:	a7 95       	ror	r26
     408:	97 95       	ror	r25
     40a:	87 95       	ror	r24
     40c:	bc 01       	movw	r22, r24
     40e:	cd 01       	movw	r24, r26
     410:	64 0d       	add	r22, r4
     412:	75 1d       	adc	r23, r5
     414:	86 1d       	adc	r24, r6
     416:	97 1d       	adc	r25, r7
     418:	de d1       	rcall	.+956    	; 0x7d6 <__udivmodsi4>
     41a:	1c c0       	rjmp	.+56     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	8c 0f       	add	r24, r28
     420:	a5 01       	movw	r20, r10
     422:	94 01       	movw	r18, r8
     424:	04 c0       	rjmp	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	44 1f       	adc	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	8a 95       	dec	r24
     430:	d2 f7       	brpl	.-12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		div = (cpu_hz + baud / 2) / baud - 1;
     432:	da 01       	movw	r26, r20
     434:	c9 01       	movw	r24, r18
     436:	b6 95       	lsr	r27
     438:	a7 95       	ror	r26
     43a:	97 95       	ror	r25
     43c:	87 95       	ror	r24
     43e:	bc 01       	movw	r22, r24
     440:	cd 01       	movw	r24, r26
     442:	64 0d       	add	r22, r4
     444:	75 1d       	adc	r23, r5
     446:	86 1d       	adc	r24, r6
     448:	97 1d       	adc	r25, r7
     44a:	c5 d1       	rcall	.+906    	; 0x7d6 <__udivmodsi4>
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	31 09       	sbc	r19, r1
     450:	41 09       	sbc	r20, r1
     452:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     454:	83 2f       	mov	r24, r19
     456:	8f 70       	andi	r24, 0x0F	; 15
     458:	c2 95       	swap	r28
     45a:	c0 7f       	andi	r28, 0xF0	; 240
     45c:	c8 2b       	or	r28, r24
     45e:	f7 01       	movw	r30, r14
     460:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     462:	26 83       	std	Z+6, r18	; 0x06

	return true;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	18 c0       	rjmp	.+48     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	16 c0       	rjmp	.+44     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	14 c0       	rjmp	.+40     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     470:	d5 01       	movw	r26, r10
     472:	c4 01       	movw	r24, r8
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	aa 1f       	adc	r26, r26
     47a:	bb 1f       	adc	r27, r27
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	aa 1f       	adc	r26, r26
     482:	bb 1f       	adc	r27, r27
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	aa 1f       	adc	r26, r26
     48a:	bb 1f       	adc	r27, r27
     48c:	48 1a       	sub	r4, r24
     48e:	59 0a       	sbc	r5, r25
     490:	6a 0a       	sbc	r6, r26
     492:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     494:	c9 ef       	ldi	r28, 0xF9	; 249
     496:	8c cf       	rjmp	.-232    	; 0x3b0 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	bf 90       	pop	r11
     4a4:	af 90       	pop	r10
     4a6:	9f 90       	pop	r9
     4a8:	8f 90       	pop	r8
     4aa:	7f 90       	pop	r7
     4ac:	6f 90       	pop	r6
     4ae:	5f 90       	pop	r5
     4b0:	4f 90       	pop	r4
     4b2:	08 95       	ret

000004b4 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ec 01       	movw	r28, r24
     4be:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <usart_init_rs232+0x12>
     4c4:	e6 c0       	rjmp	.+460    	; 0x692 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     4c6:	80 3c       	cpi	r24, 0xC0	; 192
     4c8:	91 05       	cpc	r25, r1
     4ca:	21 f4       	brne	.+8      	; 0x4d4 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     4cc:	60 e1       	ldi	r22, 0x10	; 16
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	14 d1       	rcall	.+552    	; 0x6fa <sysclk_enable_module>
     4d2:	df c0       	rjmp	.+446    	; 0x692 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     4d4:	c0 38       	cpi	r28, 0x80	; 128
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	d8 07       	cpc	r29, r24
     4da:	21 f4       	brne	.+8      	; 0x4e4 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     4dc:	62 e0       	ldi	r22, 0x02	; 2
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0c d1       	rcall	.+536    	; 0x6fa <sysclk_enable_module>
     4e2:	d7 c0       	rjmp	.+430    	; 0x692 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     4e4:	c1 15       	cp	r28, r1
     4e6:	e1 e0       	ldi	r30, 0x01	; 1
     4e8:	de 07       	cpc	r29, r30
     4ea:	21 f4       	brne	.+8      	; 0x4f4 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	04 d1       	rcall	.+520    	; 0x6fa <sysclk_enable_module>
     4f2:	cf c0       	rjmp	.+414    	; 0x692 <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     4f4:	c0 38       	cpi	r28, 0x80	; 128
     4f6:	f3 e0       	ldi	r31, 0x03	; 3
     4f8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     4fa:	21 f4       	brne	.+8      	; 0x504 <usart_init_rs232+0x50>
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	fc d0       	rcall	.+504    	; 0x6fa <sysclk_enable_module>
     502:	c7 c0       	rjmp	.+398    	; 0x692 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     504:	c0 39       	cpi	r28, 0x90	; 144
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     50a:	21 f4       	brne	.+8      	; 0x514 <usart_init_rs232+0x60>
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	f4 d0       	rcall	.+488    	; 0x6fa <sysclk_enable_module>
     512:	bf c0       	rjmp	.+382    	; 0x692 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     514:	c1 15       	cp	r28, r1
     516:	e2 e0       	ldi	r30, 0x02	; 2
     518:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     51a:	21 f4       	brne	.+8      	; 0x524 <usart_init_rs232+0x70>
     51c:	62 e0       	ldi	r22, 0x02	; 2
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	ec d0       	rcall	.+472    	; 0x6fa <sysclk_enable_module>
     522:	b7 c0       	rjmp	.+366    	; 0x692 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     524:	c0 34       	cpi	r28, 0x40	; 64
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     52a:	21 f4       	brne	.+8      	; 0x534 <usart_init_rs232+0x80>
     52c:	62 e0       	ldi	r22, 0x02	; 2
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	e4 d0       	rcall	.+456    	; 0x6fa <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     532:	af c0       	rjmp	.+350    	; 0x692 <usart_init_rs232+0x1de>
     534:	c0 32       	cpi	r28, 0x20	; 32
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     53a:	21 f4       	brne	.+8      	; 0x544 <usart_init_rs232+0x90>
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	dc d0       	rcall	.+440    	; 0x6fa <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     542:	a7 c0       	rjmp	.+334    	; 0x692 <usart_init_rs232+0x1de>
     544:	c1 15       	cp	r28, r1
     546:	e8 e0       	ldi	r30, 0x08	; 8
     548:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     54a:	21 f4       	brne	.+8      	; 0x554 <usart_init_rs232+0xa0>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	d4 d0       	rcall	.+424    	; 0x6fa <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     552:	9f c0       	rjmp	.+318    	; 0x692 <usart_init_rs232+0x1de>
     554:	c1 15       	cp	r28, r1
     556:	f9 e0       	ldi	r31, 0x09	; 9
     558:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     55a:	21 f4       	brne	.+8      	; 0x564 <usart_init_rs232+0xb0>
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	84 e0       	ldi	r24, 0x04	; 4
     560:	cc d0       	rcall	.+408    	; 0x6fa <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     562:	97 c0       	rjmp	.+302    	; 0x692 <usart_init_rs232+0x1de>
     564:	c1 15       	cp	r28, r1
     566:	8a e0       	ldi	r24, 0x0A	; 10
     568:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     56a:	21 f4       	brne	.+8      	; 0x574 <usart_init_rs232+0xc0>
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	85 e0       	ldi	r24, 0x05	; 5
     570:	c4 d0       	rcall	.+392    	; 0x6fa <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     572:	8f c0       	rjmp	.+286    	; 0x692 <usart_init_rs232+0x1de>
     574:	c1 15       	cp	r28, r1
     576:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     578:	de 07       	cpc	r29, r30
     57a:	21 f4       	brne	.+8      	; 0x584 <usart_init_rs232+0xd0>
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	86 e0       	ldi	r24, 0x06	; 6
     580:	bc d0       	rcall	.+376    	; 0x6fa <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     582:	87 c0       	rjmp	.+270    	; 0x692 <usart_init_rs232+0x1de>
     584:	c0 34       	cpi	r28, 0x40	; 64
     586:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     588:	df 07       	cpc	r29, r31
     58a:	21 f4       	brne	.+8      	; 0x594 <usart_init_rs232+0xe0>
     58c:	62 e0       	ldi	r22, 0x02	; 2
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	b4 d0       	rcall	.+360    	; 0x6fa <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     592:	7f c0       	rjmp	.+254    	; 0x692 <usart_init_rs232+0x1de>
     594:	c0 34       	cpi	r28, 0x40	; 64
     596:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     598:	d8 07       	cpc	r29, r24
     59a:	21 f4       	brne	.+8      	; 0x5a4 <usart_init_rs232+0xf0>
     59c:	62 e0       	ldi	r22, 0x02	; 2
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	ac d0       	rcall	.+344    	; 0x6fa <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     5a2:	77 c0       	rjmp	.+238    	; 0x692 <usart_init_rs232+0x1de>
     5a4:	c0 34       	cpi	r28, 0x40	; 64
     5a6:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     5a8:	de 07       	cpc	r29, r30
     5aa:	21 f4       	brne	.+8      	; 0x5b4 <usart_init_rs232+0x100>
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     5b0:	a4 d0       	rcall	.+328    	; 0x6fa <sysclk_enable_module>
     5b2:	6f c0       	rjmp	.+222    	; 0x692 <usart_init_rs232+0x1de>
     5b4:	c0 39       	cpi	r28, 0x90	; 144
     5b6:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     5b8:	df 07       	cpc	r29, r31
     5ba:	21 f4       	brne	.+8      	; 0x5c4 <usart_init_rs232+0x110>
     5bc:	64 e0       	ldi	r22, 0x04	; 4
     5be:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     5c0:	9c d0       	rcall	.+312    	; 0x6fa <sysclk_enable_module>
     5c2:	67 c0       	rjmp	.+206    	; 0x692 <usart_init_rs232+0x1de>
     5c4:	c0 39       	cpi	r28, 0x90	; 144
     5c6:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     5c8:	d8 07       	cpc	r29, r24
     5ca:	21 f4       	brne	.+8      	; 0x5d4 <usart_init_rs232+0x120>
     5cc:	64 e0       	ldi	r22, 0x04	; 4
     5ce:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     5d0:	94 d0       	rcall	.+296    	; 0x6fa <sysclk_enable_module>
     5d2:	5f c0       	rjmp	.+190    	; 0x692 <usart_init_rs232+0x1de>
     5d4:	c0 39       	cpi	r28, 0x90	; 144
     5d6:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     5d8:	de 07       	cpc	r29, r30
     5da:	21 f4       	brne	.+8      	; 0x5e4 <usart_init_rs232+0x130>
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     5e0:	8c d0       	rcall	.+280    	; 0x6fa <sysclk_enable_module>
     5e2:	57 c0       	rjmp	.+174    	; 0x692 <usart_init_rs232+0x1de>
     5e4:	c0 39       	cpi	r28, 0x90	; 144
     5e6:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     5e8:	df 07       	cpc	r29, r31
     5ea:	21 f4       	brne	.+8      	; 0x5f4 <usart_init_rs232+0x140>
     5ec:	64 e0       	ldi	r22, 0x04	; 4
     5ee:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     5f0:	84 d0       	rcall	.+264    	; 0x6fa <sysclk_enable_module>
     5f2:	4f c0       	rjmp	.+158    	; 0x692 <usart_init_rs232+0x1de>
     5f4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     5f6:	88 e0       	ldi	r24, 0x08	; 8
     5f8:	d8 07       	cpc	r29, r24
     5fa:	21 f4       	brne	.+8      	; 0x604 <usart_init_rs232+0x150>
     5fc:	68 e0       	ldi	r22, 0x08	; 8
     5fe:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     600:	7c d0       	rcall	.+248    	; 0x6fa <sysclk_enable_module>
     602:	47 c0       	rjmp	.+142    	; 0x692 <usart_init_rs232+0x1de>
     604:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     606:	e9 e0       	ldi	r30, 0x09	; 9
     608:	de 07       	cpc	r29, r30
     60a:	21 f4       	brne	.+8      	; 0x614 <usart_init_rs232+0x160>
     60c:	68 e0       	ldi	r22, 0x08	; 8
     60e:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     610:	74 d0       	rcall	.+232    	; 0x6fa <sysclk_enable_module>
     612:	3f c0       	rjmp	.+126    	; 0x692 <usart_init_rs232+0x1de>
     614:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     616:	f8 e0       	ldi	r31, 0x08	; 8
     618:	df 07       	cpc	r29, r31
     61a:	21 f4       	brne	.+8      	; 0x624 <usart_init_rs232+0x170>
     61c:	60 e1       	ldi	r22, 0x10	; 16
     61e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     620:	6c d0       	rcall	.+216    	; 0x6fa <sysclk_enable_module>
     622:	37 c0       	rjmp	.+110    	; 0x692 <usart_init_rs232+0x1de>
     624:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     626:	89 e0       	ldi	r24, 0x09	; 9
     628:	d8 07       	cpc	r29, r24
     62a:	21 f4       	brne	.+8      	; 0x634 <usart_init_rs232+0x180>
     62c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     62e:	84 e0       	ldi	r24, 0x04	; 4
     630:	64 d0       	rcall	.+200    	; 0x6fa <sysclk_enable_module>
     632:	2f c0       	rjmp	.+94     	; 0x692 <usart_init_rs232+0x1de>
     634:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     636:	ea e0       	ldi	r30, 0x0A	; 10
     638:	de 07       	cpc	r29, r30
     63a:	21 f4       	brne	.+8      	; 0x644 <usart_init_rs232+0x190>
     63c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	5c d0       	rcall	.+184    	; 0x6fa <sysclk_enable_module>
     642:	27 c0       	rjmp	.+78     	; 0x692 <usart_init_rs232+0x1de>
     644:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     646:	fb e0       	ldi	r31, 0x0B	; 11
     648:	df 07       	cpc	r29, r31
     64a:	21 f4       	brne	.+8      	; 0x654 <usart_init_rs232+0x1a0>
     64c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     64e:	86 e0       	ldi	r24, 0x06	; 6
     650:	54 d0       	rcall	.+168    	; 0x6fa <sysclk_enable_module>
     652:	1f c0       	rjmp	.+62     	; 0x692 <usart_init_rs232+0x1de>
     654:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     656:	88 e0       	ldi	r24, 0x08	; 8
     658:	d8 07       	cpc	r29, r24
     65a:	21 f4       	brne	.+8      	; 0x664 <usart_init_rs232+0x1b0>
     65c:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	4c d0       	rcall	.+152    	; 0x6fa <sysclk_enable_module>
     662:	17 c0       	rjmp	.+46     	; 0x692 <usart_init_rs232+0x1de>
     664:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     666:	e9 e0       	ldi	r30, 0x09	; 9
     668:	de 07       	cpc	r29, r30
     66a:	21 f4       	brne	.+8      	; 0x674 <usart_init_rs232+0x1c0>
     66c:	60 e2       	ldi	r22, 0x20	; 32
     66e:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     670:	44 d0       	rcall	.+136    	; 0x6fa <sysclk_enable_module>
     672:	0f c0       	rjmp	.+30     	; 0x692 <usart_init_rs232+0x1de>
     674:	c0 38       	cpi	r28, 0x80	; 128
     676:	f4 e0       	ldi	r31, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     678:	df 07       	cpc	r29, r31
     67a:	21 f4       	brne	.+8      	; 0x684 <usart_init_rs232+0x1d0>
     67c:	60 e4       	ldi	r22, 0x40	; 64
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	3c d0       	rcall	.+120    	; 0x6fa <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     682:	07 c0       	rjmp	.+14     	; 0x692 <usart_init_rs232+0x1de>
     684:	c0 3a       	cpi	r28, 0xA0	; 160
     686:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     688:	d8 07       	cpc	r29, r24
     68a:	19 f4       	brne	.+6      	; 0x692 <usart_init_rs232+0x1de>
     68c:	60 e4       	ldi	r22, 0x40	; 64
     68e:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     690:	34 d0       	rcall	.+104    	; 0x6fa <sysclk_enable_module>
     692:	8d 81       	ldd	r24, Y+5	; 0x05
     694:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     696:	8d 83       	std	Y+5, r24	; 0x05
     698:	f8 01       	movw	r30, r16
     69a:	95 81       	ldd	r25, Z+5	; 0x05
     69c:	84 81       	ldd	r24, Z+4	; 0x04
     69e:	89 2b       	or	r24, r25
     6a0:	96 81       	ldd	r25, Z+6	; 0x06
     6a2:	91 11       	cpse	r25, r1
     6a4:	98 e0       	ldi	r25, 0x08	; 8
     6a6:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     6a8:	8d 83       	std	Y+5, r24	; 0x05
     6aa:	f8 01       	movw	r30, r16
     6ac:	40 81       	ld	r20, Z
     6ae:	51 81       	ldd	r21, Z+1	; 0x01
     6b0:	62 81       	ldd	r22, Z+2	; 0x02
     6b2:	73 81       	ldd	r23, Z+3	; 0x03
     6b4:	00 e8       	ldi	r16, 0x80	; 128
     6b6:	14 e8       	ldi	r17, 0x84	; 132
     6b8:	2e e1       	ldi	r18, 0x1E	; 30
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	ce 01       	movw	r24, r28
     6be:	eb dd       	rcall	.-1066   	; 0x296 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     6c0:	9c 81       	ldd	r25, Y+4	; 0x04
     6c2:	98 60       	ori	r25, 0x08	; 8
     6c4:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     6c6:	9c 81       	ldd	r25, Y+4	; 0x04
     6c8:	90 61       	ori	r25, 0x10	; 16
     6ca:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	08 95       	ret

000006d6 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     6d6:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     6d8:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <stdio_base>
     6dc:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <stdio_base+0x1>
     6e0:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <ptr_put>
     6e4:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <ptr_put+0x1>
     6e8:	19 95       	eicall
     6ea:	99 23       	and	r25, r25
     6ec:	1c f0       	brlt	.+6      	; 0x6f4 <_write+0x1e>
		return -1;
	}
	return 1;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     6f4:	8f ef       	ldi	r24, 0xFF	; 255
     6f6:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     6f8:	08 95       	ret

000006fa <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	1f 92       	push	r1
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     704:	9f b7       	in	r25, 0x3f	; 63
     706:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     708:	f8 94       	cli
	return flags;
     70a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     70c:	e8 2f       	mov	r30, r24
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	e0 59       	subi	r30, 0x90	; 144
     712:	ff 4f       	sbci	r31, 0xFF	; 255
     714:	60 95       	com	r22
     716:	80 81       	ld	r24, Z
     718:	68 23       	and	r22, r24
     71a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     71c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     71e:	0f 90       	pop	r0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     72c:	ae dd       	rcall	.-1188   	; 0x28a <usart_getchar>
     72e:	88 83       	st	Y, r24
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     736:	a1 cd       	rjmp	.-1214   	; 0x27a <usart_putchar>
}
     738:	08 95       	ret

0000073a <main>:
#include <asf.h>

#define UART_TXPIN IOPORT_CREATE_PIN(PORTE, 3)

int main (void) {
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	27 97       	sbiw	r28, 0x07	; 7
     744:	cd bf       	out	0x3d, r28	; 61
     746:	de bf       	out	0x3e, r29	; 62
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     748:	80 ea       	ldi	r24, 0xA0	; 160
     74a:	9a e0       	ldi	r25, 0x0A	; 10
     74c:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <stdio_base>
     750:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     754:	8b e9       	ldi	r24, 0x9B	; 155
     756:	93 e0       	ldi	r25, 0x03	; 3
     758:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <ptr_put>
     75c:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     760:	83 e9       	ldi	r24, 0x93	; 147
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <__data_end>
     768:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     76c:	e6 e0       	ldi	r30, 0x06	; 6
     76e:	f0 e2       	ldi	r31, 0x20	; 32
     770:	84 81       	ldd	r24, Z+4	; 0x04
     772:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     774:	85 81       	ldd	r24, Z+5	; 0x05
     776:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     778:	86 81       	ldd	r24, Z+6	; 0x06
     77a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     77c:	80 81       	ld	r24, Z
     77e:	91 81       	ldd	r25, Z+1	; 0x01
     780:	a2 81       	ldd	r26, Z+2	; 0x02
     782:	b3 81       	ldd	r27, Z+3	; 0x03
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	9a 83       	std	Y+2, r25	; 0x02
     788:	ab 83       	std	Y+3, r26	; 0x03
     78a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     78c:	60 e1       	ldi	r22, 0x10	; 16
     78e:	85 e0       	ldi	r24, 0x05	; 5
     790:	b4 df       	rcall	.-152    	; 0x6fa <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     792:	be 01       	movw	r22, r28
     794:	6f 5f       	subi	r22, 0xFF	; 255
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	80 ea       	ldi	r24, 0xA0	; 160
     79a:	9a e0       	ldi	r25, 0x0A	; 10
     79c:	8b de       	rcall	.-746    	; 0x4b4 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     79e:	64 e2       	ldi	r22, 0x24	; 36
     7a0:	71 e0       	ldi	r23, 0x01	; 1
     7a2:	8b e6       	ldi	r24, 0x6B	; 107
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	39 d0       	rcall	.+114    	; 0x81a <fdevopen>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     7a8:	88 e0       	ldi	r24, 0x08	; 8
     7aa:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	stdio_serial_init(&USARTE0, &USART_SERIAL_OPTIONS);
	ioport_set_pin_dir(UART_TXPIN, IOPORT_DIR_OUTPUT);
	
	while(1) {
		char ch;
		scanf("%c",&ch);
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	7c 01       	movw	r14, r24
     7b4:	0d e0       	ldi	r16, 0x0D	; 13
     7b6:	10 e2       	ldi	r17, 0x20	; 32
     7b8:	ff 92       	push	r15
     7ba:	ef 92       	push	r14
     7bc:	1f 93       	push	r17
     7be:	0f 93       	push	r16
     7c0:	7b d0       	rcall	.+246    	; 0x8b8 <scanf>
		printf("%c",ch);
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	08 2e       	mov	r0, r24
     7c6:	00 0c       	add	r0, r0
     7c8:	99 0b       	sbc	r25, r25
     7ca:	71 d0       	rcall	.+226    	; 0x8ae <putchar>
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	f1 cf       	rjmp	.-30     	; 0x7b8 <main+0x7e>

000007d6 <__udivmodsi4>:
     7d6:	a1 e2       	ldi	r26, 0x21	; 33
     7d8:	1a 2e       	mov	r1, r26
     7da:	aa 1b       	sub	r26, r26
     7dc:	bb 1b       	sub	r27, r27
     7de:	fd 01       	movw	r30, r26
     7e0:	0d c0       	rjmp	.+26     	; 0x7fc <__udivmodsi4_ep>

000007e2 <__udivmodsi4_loop>:
     7e2:	aa 1f       	adc	r26, r26
     7e4:	bb 1f       	adc	r27, r27
     7e6:	ee 1f       	adc	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	a2 17       	cp	r26, r18
     7ec:	b3 07       	cpc	r27, r19
     7ee:	e4 07       	cpc	r30, r20
     7f0:	f5 07       	cpc	r31, r21
     7f2:	20 f0       	brcs	.+8      	; 0x7fc <__udivmodsi4_ep>
     7f4:	a2 1b       	sub	r26, r18
     7f6:	b3 0b       	sbc	r27, r19
     7f8:	e4 0b       	sbc	r30, r20
     7fa:	f5 0b       	sbc	r31, r21

000007fc <__udivmodsi4_ep>:
     7fc:	66 1f       	adc	r22, r22
     7fe:	77 1f       	adc	r23, r23
     800:	88 1f       	adc	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	1a 94       	dec	r1
     806:	69 f7       	brne	.-38     	; 0x7e2 <__udivmodsi4_loop>
     808:	60 95       	com	r22
     80a:	70 95       	com	r23
     80c:	80 95       	com	r24
     80e:	90 95       	com	r25
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	bd 01       	movw	r22, r26
     816:	cf 01       	movw	r24, r30
     818:	08 95       	ret

0000081a <fdevopen>:
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	00 97       	sbiw	r24, 0x00	; 0
     824:	31 f4       	brne	.+12     	; 0x832 <fdevopen+0x18>
     826:	61 15       	cp	r22, r1
     828:	71 05       	cpc	r23, r1
     82a:	19 f4       	brne	.+6      	; 0x832 <fdevopen+0x18>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	39 c0       	rjmp	.+114    	; 0x8a4 <fdevopen+0x8a>
     832:	8b 01       	movw	r16, r22
     834:	ec 01       	movw	r28, r24
     836:	6e e0       	ldi	r22, 0x0E	; 14
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	12 d3       	rcall	.+1572   	; 0xe64 <calloc>
     840:	fc 01       	movw	r30, r24
     842:	89 2b       	or	r24, r25
     844:	99 f3       	breq	.-26     	; 0x82c <fdevopen+0x12>
     846:	80 e8       	ldi	r24, 0x80	; 128
     848:	83 83       	std	Z+3, r24	; 0x03
     84a:	01 15       	cp	r16, r1
     84c:	11 05       	cpc	r17, r1
     84e:	71 f0       	breq	.+28     	; 0x86c <fdevopen+0x52>
     850:	02 87       	std	Z+10, r16	; 0x0a
     852:	13 87       	std	Z+11, r17	; 0x0b
     854:	81 e8       	ldi	r24, 0x81	; 129
     856:	83 83       	std	Z+3, r24	; 0x03
     858:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <__iob>
     85c:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <__iob+0x1>
     860:	89 2b       	or	r24, r25
     862:	21 f4       	brne	.+8      	; 0x86c <fdevopen+0x52>
     864:	e0 93 16 20 	sts	0x2016, r30	; 0x802016 <__iob>
     868:	f0 93 17 20 	sts	0x2017, r31	; 0x802017 <__iob+0x1>
     86c:	20 97       	sbiw	r28, 0x00	; 0
     86e:	c9 f0       	breq	.+50     	; 0x8a2 <fdevopen+0x88>
     870:	c0 87       	std	Z+8, r28	; 0x08
     872:	d1 87       	std	Z+9, r29	; 0x09
     874:	83 81       	ldd	r24, Z+3	; 0x03
     876:	82 60       	ori	r24, 0x02	; 2
     878:	83 83       	std	Z+3, r24	; 0x03
     87a:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <__iob+0x2>
     87e:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <__iob+0x3>
     882:	89 2b       	or	r24, r25
     884:	71 f4       	brne	.+28     	; 0x8a2 <fdevopen+0x88>
     886:	e0 93 18 20 	sts	0x2018, r30	; 0x802018 <__iob+0x2>
     88a:	f0 93 19 20 	sts	0x2019, r31	; 0x802019 <__iob+0x3>
     88e:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <__iob+0x4>
     892:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <__iob+0x5>
     896:	89 2b       	or	r24, r25
     898:	21 f4       	brne	.+8      	; 0x8a2 <fdevopen+0x88>
     89a:	e0 93 1a 20 	sts	0x201A, r30	; 0x80201a <__iob+0x4>
     89e:	f0 93 1b 20 	sts	0x201B, r31	; 0x80201b <__iob+0x5>
     8a2:	cf 01       	movw	r24, r30
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	08 95       	ret

000008ae <putchar>:
     8ae:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <__iob+0x2>
     8b2:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <__iob+0x3>
     8b6:	69 c4       	rjmp	.+2258   	; 0x118a <fputc>

000008b8 <scanf>:
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	ae 01       	movw	r20, r28
     8c2:	4a 5f       	subi	r20, 0xFA	; 250
     8c4:	5f 4f       	sbci	r21, 0xFF	; 255
     8c6:	fa 01       	movw	r30, r20
     8c8:	61 91       	ld	r22, Z+
     8ca:	71 91       	ld	r23, Z+
     8cc:	af 01       	movw	r20, r30
     8ce:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <__iob>
     8d2:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <__iob+0x1>
     8d6:	af d1       	rcall	.+862    	; 0xc36 <vfscanf>
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <putval>:
     8de:	20 fd       	sbrc	r18, 0
     8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <putval+0x16>
     8e2:	fc 01       	movw	r30, r24
     8e4:	23 fd       	sbrc	r18, 3
     8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <putval+0x14>
     8e8:	22 ff       	sbrs	r18, 2
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <putval+0x12>
     8ec:	73 83       	std	Z+3, r23	; 0x03
     8ee:	62 83       	std	Z+2, r22	; 0x02
     8f0:	51 83       	std	Z+1, r21	; 0x01
     8f2:	40 83       	st	Z, r20
     8f4:	08 95       	ret

000008f6 <mulacc>:
     8f6:	44 fd       	sbrc	r20, 4
     8f8:	17 c0       	rjmp	.+46     	; 0x928 <mulacc+0x32>
     8fa:	46 fd       	sbrc	r20, 6
     8fc:	17 c0       	rjmp	.+46     	; 0x92c <mulacc+0x36>
     8fe:	ab 01       	movw	r20, r22
     900:	bc 01       	movw	r22, r24
     902:	da 01       	movw	r26, r20
     904:	fb 01       	movw	r30, r22
     906:	aa 0f       	add	r26, r26
     908:	bb 1f       	adc	r27, r27
     90a:	ee 1f       	adc	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	10 94       	com	r1
     910:	d1 f7       	brne	.-12     	; 0x906 <mulacc+0x10>
     912:	4a 0f       	add	r20, r26
     914:	5b 1f       	adc	r21, r27
     916:	6e 1f       	adc	r22, r30
     918:	7f 1f       	adc	r23, r31
     91a:	cb 01       	movw	r24, r22
     91c:	ba 01       	movw	r22, r20
     91e:	66 0f       	add	r22, r22
     920:	77 1f       	adc	r23, r23
     922:	88 1f       	adc	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	09 c0       	rjmp	.+18     	; 0x93a <mulacc+0x44>
     928:	33 e0       	ldi	r19, 0x03	; 3
     92a:	01 c0       	rjmp	.+2      	; 0x92e <mulacc+0x38>
     92c:	34 e0       	ldi	r19, 0x04	; 4
     92e:	66 0f       	add	r22, r22
     930:	77 1f       	adc	r23, r23
     932:	88 1f       	adc	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	31 50       	subi	r19, 0x01	; 1
     938:	d1 f7       	brne	.-12     	; 0x92e <mulacc+0x38>
     93a:	62 0f       	add	r22, r18
     93c:	71 1d       	adc	r23, r1
     93e:	81 1d       	adc	r24, r1
     940:	91 1d       	adc	r25, r1
     942:	08 95       	ret

00000944 <skip_spaces>:
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	8c 01       	movw	r16, r24
     94e:	c8 01       	movw	r24, r16
     950:	de d3       	rcall	.+1980   	; 0x110e <fgetc>
     952:	ec 01       	movw	r28, r24
     954:	97 fd       	sbrc	r25, 7
     956:	06 c0       	rjmp	.+12     	; 0x964 <skip_spaces+0x20>
     958:	c0 d3       	rcall	.+1920   	; 0x10da <isspace>
     95a:	89 2b       	or	r24, r25
     95c:	c1 f7       	brne	.-16     	; 0x94e <skip_spaces+0xa>
     95e:	b8 01       	movw	r22, r16
     960:	ce 01       	movw	r24, r28
     962:	4f d4       	rcall	.+2206   	; 0x1202 <ungetc>
     964:	ce 01       	movw	r24, r28
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	08 95       	ret

00000970 <conv_int>:
     970:	8f 92       	push	r8
     972:	9f 92       	push	r9
     974:	af 92       	push	r10
     976:	bf 92       	push	r11
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	8c 01       	movw	r16, r24
     986:	d6 2f       	mov	r29, r22
     988:	7a 01       	movw	r14, r20
     98a:	b2 2e       	mov	r11, r18
     98c:	c0 d3       	rcall	.+1920   	; 0x110e <fgetc>
     98e:	9c 01       	movw	r18, r24
     990:	33 27       	eor	r19, r19
     992:	2b 32       	cpi	r18, 0x2B	; 43
     994:	31 05       	cpc	r19, r1
     996:	31 f0       	breq	.+12     	; 0x9a4 <conv_int+0x34>
     998:	2d 32       	cpi	r18, 0x2D	; 45
     99a:	31 05       	cpc	r19, r1
     99c:	59 f4       	brne	.+22     	; 0x9b4 <conv_int+0x44>
     99e:	8b 2d       	mov	r24, r11
     9a0:	80 68       	ori	r24, 0x80	; 128
     9a2:	b8 2e       	mov	r11, r24
     9a4:	d1 50       	subi	r29, 0x01	; 1
     9a6:	11 f4       	brne	.+4      	; 0x9ac <conv_int+0x3c>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	61 c0       	rjmp	.+194    	; 0xa6e <conv_int+0xfe>
     9ac:	c8 01       	movw	r24, r16
     9ae:	af d3       	rcall	.+1886   	; 0x110e <fgetc>
     9b0:	97 fd       	sbrc	r25, 7
     9b2:	fa cf       	rjmp	.-12     	; 0x9a8 <conv_int+0x38>
     9b4:	cb 2d       	mov	r28, r11
     9b6:	cd 7f       	andi	r28, 0xFD	; 253
     9b8:	2b 2d       	mov	r18, r11
     9ba:	20 73       	andi	r18, 0x30	; 48
     9bc:	f9 f4       	brne	.+62     	; 0x9fc <conv_int+0x8c>
     9be:	80 33       	cpi	r24, 0x30	; 48
     9c0:	e9 f4       	brne	.+58     	; 0x9fc <conv_int+0x8c>
     9c2:	aa 24       	eor	r10, r10
     9c4:	aa 94       	dec	r10
     9c6:	ad 0e       	add	r10, r29
     9c8:	09 f4       	brne	.+2      	; 0x9cc <conv_int+0x5c>
     9ca:	3e c0       	rjmp	.+124    	; 0xa48 <conv_int+0xd8>
     9cc:	c8 01       	movw	r24, r16
     9ce:	9f d3       	rcall	.+1854   	; 0x110e <fgetc>
     9d0:	97 fd       	sbrc	r25, 7
     9d2:	3a c0       	rjmp	.+116    	; 0xa48 <conv_int+0xd8>
     9d4:	9c 01       	movw	r18, r24
     9d6:	2f 7d       	andi	r18, 0xDF	; 223
     9d8:	33 27       	eor	r19, r19
     9da:	28 35       	cpi	r18, 0x58	; 88
     9dc:	31 05       	cpc	r19, r1
     9de:	41 f4       	brne	.+16     	; 0x9f0 <conv_int+0x80>
     9e0:	c2 64       	ori	r28, 0x42	; 66
     9e2:	d2 50       	subi	r29, 0x02	; 2
     9e4:	89 f1       	breq	.+98     	; 0xa48 <conv_int+0xd8>
     9e6:	c8 01       	movw	r24, r16
     9e8:	92 d3       	rcall	.+1828   	; 0x110e <fgetc>
     9ea:	97 ff       	sbrs	r25, 7
     9ec:	07 c0       	rjmp	.+14     	; 0x9fc <conv_int+0x8c>
     9ee:	2c c0       	rjmp	.+88     	; 0xa48 <conv_int+0xd8>
     9f0:	b6 fe       	sbrs	r11, 6
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <conv_int+0x88>
     9f4:	c2 60       	ori	r28, 0x02	; 2
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <conv_int+0x8a>
     9f8:	c2 61       	ori	r28, 0x12	; 18
     9fa:	da 2d       	mov	r29, r10
     9fc:	81 2c       	mov	r8, r1
     9fe:	91 2c       	mov	r9, r1
     a00:	54 01       	movw	r10, r8
     a02:	20 ed       	ldi	r18, 0xD0	; 208
     a04:	28 0f       	add	r18, r24
     a06:	28 30       	cpi	r18, 0x08	; 8
     a08:	78 f0       	brcs	.+30     	; 0xa28 <conv_int+0xb8>
     a0a:	c4 ff       	sbrs	r28, 4
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <conv_int+0xa4>
     a0e:	b8 01       	movw	r22, r16
     a10:	f8 d3       	rcall	.+2032   	; 0x1202 <ungetc>
     a12:	17 c0       	rjmp	.+46     	; 0xa42 <conv_int+0xd2>
     a14:	2a 30       	cpi	r18, 0x0A	; 10
     a16:	40 f0       	brcs	.+16     	; 0xa28 <conv_int+0xb8>
     a18:	c6 ff       	sbrs	r28, 6
     a1a:	f9 cf       	rjmp	.-14     	; 0xa0e <conv_int+0x9e>
     a1c:	2f 7d       	andi	r18, 0xDF	; 223
     a1e:	3f ee       	ldi	r19, 0xEF	; 239
     a20:	32 0f       	add	r19, r18
     a22:	36 30       	cpi	r19, 0x06	; 6
     a24:	a0 f7       	brcc	.-24     	; 0xa0e <conv_int+0x9e>
     a26:	27 50       	subi	r18, 0x07	; 7
     a28:	4c 2f       	mov	r20, r28
     a2a:	c5 01       	movw	r24, r10
     a2c:	b4 01       	movw	r22, r8
     a2e:	63 df       	rcall	.-314    	; 0x8f6 <mulacc>
     a30:	4b 01       	movw	r8, r22
     a32:	5c 01       	movw	r10, r24
     a34:	c2 60       	ori	r28, 0x02	; 2
     a36:	d1 50       	subi	r29, 0x01	; 1
     a38:	51 f0       	breq	.+20     	; 0xa4e <conv_int+0xde>
     a3a:	c8 01       	movw	r24, r16
     a3c:	68 d3       	rcall	.+1744   	; 0x110e <fgetc>
     a3e:	97 ff       	sbrs	r25, 7
     a40:	e0 cf       	rjmp	.-64     	; 0xa02 <conv_int+0x92>
     a42:	c1 fd       	sbrc	r28, 1
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <conv_int+0xde>
     a46:	b0 cf       	rjmp	.-160    	; 0x9a8 <conv_int+0x38>
     a48:	81 2c       	mov	r8, r1
     a4a:	91 2c       	mov	r9, r1
     a4c:	54 01       	movw	r10, r8
     a4e:	c7 ff       	sbrs	r28, 7
     a50:	08 c0       	rjmp	.+16     	; 0xa62 <conv_int+0xf2>
     a52:	b0 94       	com	r11
     a54:	a0 94       	com	r10
     a56:	90 94       	com	r9
     a58:	80 94       	com	r8
     a5a:	81 1c       	adc	r8, r1
     a5c:	91 1c       	adc	r9, r1
     a5e:	a1 1c       	adc	r10, r1
     a60:	b1 1c       	adc	r11, r1
     a62:	2c 2f       	mov	r18, r28
     a64:	b5 01       	movw	r22, r10
     a66:	a4 01       	movw	r20, r8
     a68:	c7 01       	movw	r24, r14
     a6a:	39 df       	rcall	.-398    	; 0x8de <putval>
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	bf 90       	pop	r11
     a7c:	af 90       	pop	r10
     a7e:	9f 90       	pop	r9
     a80:	8f 90       	pop	r8
     a82:	08 95       	ret

00000a84 <conv_brk>:
     a84:	5f 92       	push	r5
     a86:	6f 92       	push	r6
     a88:	7f 92       	push	r7
     a8a:	8f 92       	push	r8
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	a0 97       	sbiw	r28, 0x20	; 32
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	5c 01       	movw	r10, r24
     aae:	96 2e       	mov	r9, r22
     ab0:	7a 01       	movw	r14, r20
     ab2:	f9 01       	movw	r30, r18
     ab4:	8e 01       	movw	r16, r28
     ab6:	0f 5f       	subi	r16, 0xFF	; 255
     ab8:	1f 4f       	sbci	r17, 0xFF	; 255
     aba:	68 01       	movw	r12, r16
     abc:	80 e2       	ldi	r24, 0x20	; 32
     abe:	d8 01       	movw	r26, r16
     ac0:	1d 92       	st	X+, r1
     ac2:	8a 95       	dec	r24
     ac4:	e9 f7       	brne	.-6      	; 0xac0 <conv_brk+0x3c>
     ac6:	d5 01       	movw	r26, r10
     ac8:	13 96       	adiw	r26, 0x03	; 3
     aca:	8c 90       	ld	r8, X
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	61 2c       	mov	r6, r1
     ad2:	71 2c       	mov	r7, r1
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	83 fc       	sbrc	r8, 3
     adc:	25 91       	lpm	r18, Z+
     ade:	83 fe       	sbrs	r8, 3
     ae0:	21 91       	ld	r18, Z+
     ae2:	8f 01       	movw	r16, r30
     ae4:	52 2e       	mov	r5, r18
     ae6:	21 11       	cpse	r18, r1
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <conv_brk+0x6c>
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	90 c0       	rjmp	.+288    	; 0xc10 <conv_brk+0x18c>
     af0:	2e 35       	cpi	r18, 0x5E	; 94
     af2:	11 f4       	brne	.+4      	; 0xaf8 <conv_brk+0x74>
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	51 f1       	breq	.+84     	; 0xb4c <conv_brk+0xc8>
     af8:	43 2f       	mov	r20, r19
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	48 17       	cp	r20, r24
     afe:	59 07       	cpc	r21, r25
     b00:	3c f4       	brge	.+14     	; 0xb10 <conv_brk+0x8c>
     b02:	2d 35       	cpi	r18, 0x5D	; 93
     b04:	59 f1       	breq	.+86     	; 0xb5c <conv_brk+0xd8>
     b06:	2d 32       	cpi	r18, 0x2D	; 45
     b08:	19 f4       	brne	.+6      	; 0xb10 <conv_brk+0x8c>
     b0a:	77 20       	and	r7, r7
     b0c:	09 f1       	breq	.+66     	; 0xb50 <conv_brk+0xcc>
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <conv_brk+0x92>
     b10:	77 20       	and	r7, r7
     b12:	09 f4       	brne	.+2      	; 0xb16 <conv_brk+0x92>
     b14:	68 c0       	rjmp	.+208    	; 0xbe6 <conv_brk+0x162>
     b16:	45 2d       	mov	r20, r5
     b18:	46 95       	lsr	r20
     b1a:	46 95       	lsr	r20
     b1c:	46 95       	lsr	r20
     b1e:	d6 01       	movw	r26, r12
     b20:	a4 0f       	add	r26, r20
     b22:	b1 1d       	adc	r27, r1
     b24:	45 2d       	mov	r20, r5
     b26:	47 70       	andi	r20, 0x07	; 7
     b28:	8b 01       	movw	r16, r22
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <conv_brk+0xac>
     b2c:	00 0f       	add	r16, r16
     b2e:	11 1f       	adc	r17, r17
     b30:	4a 95       	dec	r20
     b32:	e2 f7       	brpl	.-8      	; 0xb2c <conv_brk+0xa8>
     b34:	a8 01       	movw	r20, r16
     b36:	5c 91       	ld	r21, X
     b38:	45 2b       	or	r20, r21
     b3a:	4c 93       	st	X, r20
     b3c:	65 14       	cp	r6, r5
     b3e:	59 f0       	breq	.+22     	; 0xb56 <conv_brk+0xd2>
     b40:	56 14       	cp	r5, r6
     b42:	10 f4       	brcc	.+4      	; 0xb48 <conv_brk+0xc4>
     b44:	53 94       	inc	r5
     b46:	e7 cf       	rjmp	.-50     	; 0xb16 <conv_brk+0x92>
     b48:	5a 94       	dec	r5
     b4a:	e5 cf       	rjmp	.-54     	; 0xb16 <conv_brk+0x92>
     b4c:	31 e0       	ldi	r19, 0x01	; 1
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <conv_brk+0xd4>
     b50:	77 24       	eor	r7, r7
     b52:	73 94       	inc	r7
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <conv_brk+0xd4>
     b56:	71 2c       	mov	r7, r1
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	bf cf       	rjmp	.-130    	; 0xada <conv_brk+0x56>
     b5c:	77 20       	and	r7, r7
     b5e:	19 f0       	breq	.+6      	; 0xb66 <conv_brk+0xe2>
     b60:	8e 81       	ldd	r24, Y+6	; 0x06
     b62:	80 62       	ori	r24, 0x20	; 32
     b64:	8e 83       	std	Y+6, r24	; 0x06
     b66:	31 11       	cpse	r19, r1
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <conv_brk+0xec>
     b6a:	88 24       	eor	r8, r8
     b6c:	83 94       	inc	r8
     b6e:	17 c0       	rjmp	.+46     	; 0xb9e <conv_brk+0x11a>
     b70:	f6 01       	movw	r30, r12
     b72:	9e 01       	movw	r18, r28
     b74:	2f 5d       	subi	r18, 0xDF	; 223
     b76:	3f 4f       	sbci	r19, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	80 95       	com	r24
     b7c:	81 93       	st	Z+, r24
     b7e:	2e 17       	cp	r18, r30
     b80:	3f 07       	cpc	r19, r31
     b82:	d1 f7       	brne	.-12     	; 0xb78 <conv_brk+0xf4>
     b84:	f2 cf       	rjmp	.-28     	; 0xb6a <conv_brk+0xe6>
     b86:	e1 14       	cp	r14, r1
     b88:	f1 04       	cpc	r15, r1
     b8a:	29 f0       	breq	.+10     	; 0xb96 <conv_brk+0x112>
     b8c:	d7 01       	movw	r26, r14
     b8e:	8c 93       	st	X, r24
     b90:	f7 01       	movw	r30, r14
     b92:	31 96       	adiw	r30, 0x01	; 1
     b94:	7f 01       	movw	r14, r30
     b96:	9a 94       	dec	r9
     b98:	81 2c       	mov	r8, r1
     b9a:	99 20       	and	r9, r9
     b9c:	e9 f0       	breq	.+58     	; 0xbd8 <conv_brk+0x154>
     b9e:	c5 01       	movw	r24, r10
     ba0:	b6 d2       	rcall	.+1388   	; 0x110e <fgetc>
     ba2:	97 fd       	sbrc	r25, 7
     ba4:	17 c0       	rjmp	.+46     	; 0xbd4 <conv_brk+0x150>
     ba6:	fc 01       	movw	r30, r24
     ba8:	ff 27       	eor	r31, r31
     baa:	23 e0       	ldi	r18, 0x03	; 3
     bac:	f5 95       	asr	r31
     bae:	e7 95       	ror	r30
     bb0:	2a 95       	dec	r18
     bb2:	e1 f7       	brne	.-8      	; 0xbac <conv_brk+0x128>
     bb4:	ec 0d       	add	r30, r12
     bb6:	fd 1d       	adc	r31, r13
     bb8:	20 81       	ld	r18, Z
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	ac 01       	movw	r20, r24
     bbe:	47 70       	andi	r20, 0x07	; 7
     bc0:	55 27       	eor	r21, r21
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <conv_brk+0x144>
     bc4:	35 95       	asr	r19
     bc6:	27 95       	ror	r18
     bc8:	4a 95       	dec	r20
     bca:	e2 f7       	brpl	.-8      	; 0xbc4 <conv_brk+0x140>
     bcc:	20 fd       	sbrc	r18, 0
     bce:	db cf       	rjmp	.-74     	; 0xb86 <conv_brk+0x102>
     bd0:	b5 01       	movw	r22, r10
     bd2:	17 d3       	rcall	.+1582   	; 0x1202 <ungetc>
     bd4:	81 10       	cpse	r8, r1
     bd6:	89 cf       	rjmp	.-238    	; 0xaea <conv_brk+0x66>
     bd8:	e1 14       	cp	r14, r1
     bda:	f1 04       	cpc	r15, r1
     bdc:	11 f0       	breq	.+4      	; 0xbe2 <conv_brk+0x15e>
     bde:	d7 01       	movw	r26, r14
     be0:	1c 92       	st	X, r1
     be2:	c8 01       	movw	r24, r16
     be4:	15 c0       	rjmp	.+42     	; 0xc10 <conv_brk+0x18c>
     be6:	42 2f       	mov	r20, r18
     be8:	46 95       	lsr	r20
     bea:	46 95       	lsr	r20
     bec:	46 95       	lsr	r20
     bee:	d6 01       	movw	r26, r12
     bf0:	a4 0f       	add	r26, r20
     bf2:	b1 1d       	adc	r27, r1
     bf4:	42 2f       	mov	r20, r18
     bf6:	47 70       	andi	r20, 0x07	; 7
     bf8:	8b 01       	movw	r16, r22
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <conv_brk+0x17c>
     bfc:	00 0f       	add	r16, r16
     bfe:	11 1f       	adc	r17, r17
     c00:	4a 95       	dec	r20
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <conv_brk+0x178>
     c04:	a8 01       	movw	r20, r16
     c06:	5c 91       	ld	r21, X
     c08:	45 2b       	or	r20, r21
     c0a:	4c 93       	st	X, r20
     c0c:	62 2e       	mov	r6, r18
     c0e:	a4 cf       	rjmp	.-184    	; 0xb58 <conv_brk+0xd4>
     c10:	a0 96       	adiw	r28, 0x20	; 32
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	df 90       	pop	r13
     c24:	cf 90       	pop	r12
     c26:	bf 90       	pop	r11
     c28:	af 90       	pop	r10
     c2a:	9f 90       	pop	r9
     c2c:	8f 90       	pop	r8
     c2e:	7f 90       	pop	r7
     c30:	6f 90       	pop	r6
     c32:	5f 90       	pop	r5
     c34:	08 95       	ret

00000c36 <vfscanf>:
     c36:	5f 92       	push	r5
     c38:	6f 92       	push	r6
     c3a:	7f 92       	push	r7
     c3c:	8f 92       	push	r8
     c3e:	9f 92       	push	r9
     c40:	af 92       	push	r10
     c42:	bf 92       	push	r11
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	6c 01       	movw	r12, r24
     c56:	eb 01       	movw	r28, r22
     c58:	5a 01       	movw	r10, r20
     c5a:	fc 01       	movw	r30, r24
     c5c:	16 82       	std	Z+6, r1	; 0x06
     c5e:	17 82       	std	Z+7, r1	; 0x07
     c60:	51 2c       	mov	r5, r1
     c62:	f6 01       	movw	r30, r12
     c64:	e3 80       	ldd	r14, Z+3	; 0x03
     c66:	fe 01       	movw	r30, r28
     c68:	e3 fc       	sbrc	r14, 3
     c6a:	85 91       	lpm	r24, Z+
     c6c:	e3 fe       	sbrs	r14, 3
     c6e:	81 91       	ld	r24, Z+
     c70:	18 2f       	mov	r17, r24
     c72:	ef 01       	movw	r28, r30
     c74:	88 23       	and	r24, r24
     c76:	09 f4       	brne	.+2      	; 0xc7a <vfscanf+0x44>
     c78:	e0 c0       	rjmp	.+448    	; 0xe3a <vfscanf+0x204>
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	2e d2       	rcall	.+1116   	; 0x10da <isspace>
     c7e:	89 2b       	or	r24, r25
     c80:	19 f0       	breq	.+6      	; 0xc88 <vfscanf+0x52>
     c82:	c6 01       	movw	r24, r12
     c84:	5f de       	rcall	.-834    	; 0x944 <skip_spaces>
     c86:	ed cf       	rjmp	.-38     	; 0xc62 <vfscanf+0x2c>
     c88:	15 32       	cpi	r17, 0x25	; 37
     c8a:	41 f4       	brne	.+16     	; 0xc9c <vfscanf+0x66>
     c8c:	fe 01       	movw	r30, r28
     c8e:	e3 fc       	sbrc	r14, 3
     c90:	15 91       	lpm	r17, Z+
     c92:	e3 fe       	sbrs	r14, 3
     c94:	11 91       	ld	r17, Z+
     c96:	ef 01       	movw	r28, r30
     c98:	15 32       	cpi	r17, 0x25	; 37
     c9a:	71 f4       	brne	.+28     	; 0xcb8 <vfscanf+0x82>
     c9c:	c6 01       	movw	r24, r12
     c9e:	37 d2       	rcall	.+1134   	; 0x110e <fgetc>
     ca0:	97 fd       	sbrc	r25, 7
     ca2:	c9 c0       	rjmp	.+402    	; 0xe36 <vfscanf+0x200>
     ca4:	41 2f       	mov	r20, r17
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	9c 01       	movw	r18, r24
     caa:	33 27       	eor	r19, r19
     cac:	24 17       	cp	r18, r20
     cae:	35 07       	cpc	r19, r21
     cb0:	c1 f2       	breq	.-80     	; 0xc62 <vfscanf+0x2c>
     cb2:	b6 01       	movw	r22, r12
     cb4:	a6 d2       	rcall	.+1356   	; 0x1202 <ungetc>
     cb6:	c1 c0       	rjmp	.+386    	; 0xe3a <vfscanf+0x204>
     cb8:	1a 32       	cpi	r17, 0x2A	; 42
     cba:	39 f4       	brne	.+14     	; 0xcca <vfscanf+0x94>
     cbc:	e3 fc       	sbrc	r14, 3
     cbe:	15 91       	lpm	r17, Z+
     cc0:	e3 fe       	sbrs	r14, 3
     cc2:	11 91       	ld	r17, Z+
     cc4:	ef 01       	movw	r28, r30
     cc6:	01 e0       	ldi	r16, 0x01	; 1
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <vfscanf+0x96>
     cca:	00 e0       	ldi	r16, 0x00	; 0
     ccc:	f1 2c       	mov	r15, r1
     cce:	20 ed       	ldi	r18, 0xD0	; 208
     cd0:	21 0f       	add	r18, r17
     cd2:	2a 30       	cpi	r18, 0x0A	; 10
     cd4:	78 f4       	brcc	.+30     	; 0xcf4 <vfscanf+0xbe>
     cd6:	02 60       	ori	r16, 0x02	; 2
     cd8:	6f 2d       	mov	r22, r15
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	40 e2       	ldi	r20, 0x20	; 32
     ce2:	09 de       	rcall	.-1006   	; 0x8f6 <mulacc>
     ce4:	f6 2e       	mov	r15, r22
     ce6:	fe 01       	movw	r30, r28
     ce8:	e3 fc       	sbrc	r14, 3
     cea:	15 91       	lpm	r17, Z+
     cec:	e3 fe       	sbrs	r14, 3
     cee:	11 91       	ld	r17, Z+
     cf0:	ef 01       	movw	r28, r30
     cf2:	ed cf       	rjmp	.-38     	; 0xcce <vfscanf+0x98>
     cf4:	01 ff       	sbrs	r16, 1
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <vfscanf+0xc8>
     cf8:	f1 10       	cpse	r15, r1
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <vfscanf+0xcc>
     cfc:	9e c0       	rjmp	.+316    	; 0xe3a <vfscanf+0x204>
     cfe:	ff 24       	eor	r15, r15
     d00:	fa 94       	dec	r15
     d02:	18 36       	cpi	r17, 0x68	; 104
     d04:	19 f0       	breq	.+6      	; 0xd0c <vfscanf+0xd6>
     d06:	1c 36       	cpi	r17, 0x6C	; 108
     d08:	51 f0       	breq	.+20     	; 0xd1e <vfscanf+0xe8>
     d0a:	10 c0       	rjmp	.+32     	; 0xd2c <vfscanf+0xf6>
     d0c:	fe 01       	movw	r30, r28
     d0e:	e3 fc       	sbrc	r14, 3
     d10:	15 91       	lpm	r17, Z+
     d12:	e3 fe       	sbrs	r14, 3
     d14:	11 91       	ld	r17, Z+
     d16:	ef 01       	movw	r28, r30
     d18:	18 36       	cpi	r17, 0x68	; 104
     d1a:	41 f4       	brne	.+16     	; 0xd2c <vfscanf+0xf6>
     d1c:	08 60       	ori	r16, 0x08	; 8
     d1e:	04 60       	ori	r16, 0x04	; 4
     d20:	fe 01       	movw	r30, r28
     d22:	e3 fc       	sbrc	r14, 3
     d24:	15 91       	lpm	r17, Z+
     d26:	e3 fe       	sbrs	r14, 3
     d28:	11 91       	ld	r17, Z+
     d2a:	ef 01       	movw	r28, r30
     d2c:	11 23       	and	r17, r17
     d2e:	09 f4       	brne	.+2      	; 0xd32 <vfscanf+0xfc>
     d30:	84 c0       	rjmp	.+264    	; 0xe3a <vfscanf+0x204>
     d32:	61 2f       	mov	r22, r17
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	8c ef       	ldi	r24, 0xFC	; 252
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	d7 d1       	rcall	.+942    	; 0x10ea <strchr_P>
     d3c:	89 2b       	or	r24, r25
     d3e:	09 f4       	brne	.+2      	; 0xd42 <vfscanf+0x10c>
     d40:	7c c0       	rjmp	.+248    	; 0xe3a <vfscanf+0x204>
     d42:	00 fd       	sbrc	r16, 0
     d44:	07 c0       	rjmp	.+14     	; 0xd54 <vfscanf+0x11e>
     d46:	f5 01       	movw	r30, r10
     d48:	80 80       	ld	r8, Z
     d4a:	91 80       	ldd	r9, Z+1	; 0x01
     d4c:	c5 01       	movw	r24, r10
     d4e:	02 96       	adiw	r24, 0x02	; 2
     d50:	5c 01       	movw	r10, r24
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <vfscanf+0x122>
     d54:	81 2c       	mov	r8, r1
     d56:	91 2c       	mov	r9, r1
     d58:	1e 36       	cpi	r17, 0x6E	; 110
     d5a:	49 f4       	brne	.+18     	; 0xd6e <vfscanf+0x138>
     d5c:	f6 01       	movw	r30, r12
     d5e:	46 81       	ldd	r20, Z+6	; 0x06
     d60:	57 81       	ldd	r21, Z+7	; 0x07
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	20 2f       	mov	r18, r16
     d68:	c4 01       	movw	r24, r8
     d6a:	b9 dd       	rcall	.-1166   	; 0x8de <putval>
     d6c:	7a cf       	rjmp	.-268    	; 0xc62 <vfscanf+0x2c>
     d6e:	13 36       	cpi	r17, 0x63	; 99
     d70:	a1 f4       	brne	.+40     	; 0xd9a <vfscanf+0x164>
     d72:	01 fd       	sbrc	r16, 1
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <vfscanf+0x144>
     d76:	ff 24       	eor	r15, r15
     d78:	f3 94       	inc	r15
     d7a:	c6 01       	movw	r24, r12
     d7c:	c8 d1       	rcall	.+912    	; 0x110e <fgetc>
     d7e:	97 fd       	sbrc	r25, 7
     d80:	5a c0       	rjmp	.+180    	; 0xe36 <vfscanf+0x200>
     d82:	81 14       	cp	r8, r1
     d84:	91 04       	cpc	r9, r1
     d86:	29 f0       	breq	.+10     	; 0xd92 <vfscanf+0x15c>
     d88:	f4 01       	movw	r30, r8
     d8a:	80 83       	st	Z, r24
     d8c:	c4 01       	movw	r24, r8
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	4c 01       	movw	r8, r24
     d92:	fa 94       	dec	r15
     d94:	f1 10       	cpse	r15, r1
     d96:	f1 cf       	rjmp	.-30     	; 0xd7a <vfscanf+0x144>
     d98:	4a c0       	rjmp	.+148    	; 0xe2e <vfscanf+0x1f8>
     d9a:	1b 35       	cpi	r17, 0x5B	; 91
     d9c:	51 f4       	brne	.+20     	; 0xdb2 <vfscanf+0x17c>
     d9e:	9e 01       	movw	r18, r28
     da0:	a4 01       	movw	r20, r8
     da2:	6f 2d       	mov	r22, r15
     da4:	c6 01       	movw	r24, r12
     da6:	6e de       	rcall	.-804    	; 0xa84 <conv_brk>
     da8:	ec 01       	movw	r28, r24
     daa:	89 2b       	or	r24, r25
     dac:	09 f0       	breq	.+2      	; 0xdb0 <vfscanf+0x17a>
     dae:	3f c0       	rjmp	.+126    	; 0xe2e <vfscanf+0x1f8>
     db0:	39 c0       	rjmp	.+114    	; 0xe24 <vfscanf+0x1ee>
     db2:	c6 01       	movw	r24, r12
     db4:	c7 dd       	rcall	.-1138   	; 0x944 <skip_spaces>
     db6:	97 fd       	sbrc	r25, 7
     db8:	3e c0       	rjmp	.+124    	; 0xe36 <vfscanf+0x200>
     dba:	1f 36       	cpi	r17, 0x6F	; 111
     dbc:	49 f1       	breq	.+82     	; 0xe10 <vfscanf+0x1da>
     dbe:	28 f4       	brcc	.+10     	; 0xdca <vfscanf+0x194>
     dc0:	14 36       	cpi	r17, 0x64	; 100
     dc2:	21 f1       	breq	.+72     	; 0xe0c <vfscanf+0x1d6>
     dc4:	19 36       	cpi	r17, 0x69	; 105
     dc6:	39 f1       	breq	.+78     	; 0xe16 <vfscanf+0x1e0>
     dc8:	25 c0       	rjmp	.+74     	; 0xe14 <vfscanf+0x1de>
     dca:	13 37       	cpi	r17, 0x73	; 115
     dcc:	71 f0       	breq	.+28     	; 0xdea <vfscanf+0x1b4>
     dce:	15 37       	cpi	r17, 0x75	; 117
     dd0:	e9 f0       	breq	.+58     	; 0xe0c <vfscanf+0x1d6>
     dd2:	20 c0       	rjmp	.+64     	; 0xe14 <vfscanf+0x1de>
     dd4:	81 14       	cp	r8, r1
     dd6:	91 04       	cpc	r9, r1
     dd8:	29 f0       	breq	.+10     	; 0xde4 <vfscanf+0x1ae>
     dda:	f4 01       	movw	r30, r8
     ddc:	60 82       	st	Z, r6
     dde:	c4 01       	movw	r24, r8
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	4c 01       	movw	r8, r24
     de4:	fa 94       	dec	r15
     de6:	ff 20       	and	r15, r15
     de8:	59 f0       	breq	.+22     	; 0xe00 <vfscanf+0x1ca>
     dea:	c6 01       	movw	r24, r12
     dec:	90 d1       	rcall	.+800    	; 0x110e <fgetc>
     dee:	3c 01       	movw	r6, r24
     df0:	97 fd       	sbrc	r25, 7
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <vfscanf+0x1ca>
     df4:	72 d1       	rcall	.+740    	; 0x10da <isspace>
     df6:	89 2b       	or	r24, r25
     df8:	69 f3       	breq	.-38     	; 0xdd4 <vfscanf+0x19e>
     dfa:	b6 01       	movw	r22, r12
     dfc:	c3 01       	movw	r24, r6
     dfe:	01 d2       	rcall	.+1026   	; 0x1202 <ungetc>
     e00:	81 14       	cp	r8, r1
     e02:	91 04       	cpc	r9, r1
     e04:	a1 f0       	breq	.+40     	; 0xe2e <vfscanf+0x1f8>
     e06:	f4 01       	movw	r30, r8
     e08:	10 82       	st	Z, r1
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <vfscanf+0x1f8>
     e0c:	00 62       	ori	r16, 0x20	; 32
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <vfscanf+0x1e0>
     e10:	00 61       	ori	r16, 0x10	; 16
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <vfscanf+0x1e0>
     e14:	00 64       	ori	r16, 0x40	; 64
     e16:	20 2f       	mov	r18, r16
     e18:	a4 01       	movw	r20, r8
     e1a:	6f 2d       	mov	r22, r15
     e1c:	c6 01       	movw	r24, r12
     e1e:	a8 dd       	rcall	.-1200   	; 0x970 <conv_int>
     e20:	81 11       	cpse	r24, r1
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <vfscanf+0x1f8>
     e24:	f6 01       	movw	r30, r12
     e26:	83 81       	ldd	r24, Z+3	; 0x03
     e28:	80 73       	andi	r24, 0x30	; 48
     e2a:	29 f4       	brne	.+10     	; 0xe36 <vfscanf+0x200>
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <vfscanf+0x204>
     e2e:	00 fd       	sbrc	r16, 0
     e30:	18 cf       	rjmp	.-464    	; 0xc62 <vfscanf+0x2c>
     e32:	53 94       	inc	r5
     e34:	16 cf       	rjmp	.-468    	; 0xc62 <vfscanf+0x2c>
     e36:	55 20       	and	r5, r5
     e38:	19 f0       	breq	.+6      	; 0xe40 <vfscanf+0x20a>
     e3a:	85 2d       	mov	r24, r5
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <vfscanf+0x20e>
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	bf 90       	pop	r11
     e56:	af 90       	pop	r10
     e58:	9f 90       	pop	r9
     e5a:	8f 90       	pop	r8
     e5c:	7f 90       	pop	r7
     e5e:	6f 90       	pop	r6
     e60:	5f 90       	pop	r5
     e62:	08 95       	ret

00000e64 <calloc>:
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	86 9f       	mul	r24, r22
     e6e:	80 01       	movw	r16, r0
     e70:	87 9f       	mul	r24, r23
     e72:	10 0d       	add	r17, r0
     e74:	96 9f       	mul	r25, r22
     e76:	10 0d       	add	r17, r0
     e78:	11 24       	eor	r1, r1
     e7a:	c8 01       	movw	r24, r16
     e7c:	0d d0       	rcall	.+26     	; 0xe98 <malloc>
     e7e:	ec 01       	movw	r28, r24
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	21 f0       	breq	.+8      	; 0xe8c <calloc+0x28>
     e84:	a8 01       	movw	r20, r16
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	3a d1       	rcall	.+628    	; 0x1100 <memset>
     e8c:	ce 01       	movw	r24, r28
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret

00000e98 <malloc>:
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	91 05       	cpc	r25, r1
     ea4:	10 f4       	brcc	.+4      	; 0xeaa <malloc+0x12>
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <__flp>
     eae:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <__flp+0x1>
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	a0 e0       	ldi	r26, 0x00	; 0
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	30 97       	sbiw	r30, 0x00	; 0
     ebc:	19 f1       	breq	.+70     	; 0xf04 <malloc+0x6c>
     ebe:	40 81       	ld	r20, Z
     ec0:	51 81       	ldd	r21, Z+1	; 0x01
     ec2:	02 81       	ldd	r16, Z+2	; 0x02
     ec4:	13 81       	ldd	r17, Z+3	; 0x03
     ec6:	48 17       	cp	r20, r24
     ec8:	59 07       	cpc	r21, r25
     eca:	c8 f0       	brcs	.+50     	; 0xefe <malloc+0x66>
     ecc:	84 17       	cp	r24, r20
     ece:	95 07       	cpc	r25, r21
     ed0:	69 f4       	brne	.+26     	; 0xeec <malloc+0x54>
     ed2:	10 97       	sbiw	r26, 0x00	; 0
     ed4:	31 f0       	breq	.+12     	; 0xee2 <malloc+0x4a>
     ed6:	12 96       	adiw	r26, 0x02	; 2
     ed8:	0c 93       	st	X, r16
     eda:	12 97       	sbiw	r26, 0x02	; 2
     edc:	13 96       	adiw	r26, 0x03	; 3
     ede:	1c 93       	st	X, r17
     ee0:	27 c0       	rjmp	.+78     	; 0xf30 <malloc+0x98>
     ee2:	00 93 1e 20 	sts	0x201E, r16	; 0x80201e <__flp>
     ee6:	10 93 1f 20 	sts	0x201F, r17	; 0x80201f <__flp+0x1>
     eea:	22 c0       	rjmp	.+68     	; 0xf30 <malloc+0x98>
     eec:	21 15       	cp	r18, r1
     eee:	31 05       	cpc	r19, r1
     ef0:	19 f0       	breq	.+6      	; 0xef8 <malloc+0x60>
     ef2:	42 17       	cp	r20, r18
     ef4:	53 07       	cpc	r21, r19
     ef6:	18 f4       	brcc	.+6      	; 0xefe <malloc+0x66>
     ef8:	9a 01       	movw	r18, r20
     efa:	bd 01       	movw	r22, r26
     efc:	ef 01       	movw	r28, r30
     efe:	df 01       	movw	r26, r30
     f00:	f8 01       	movw	r30, r16
     f02:	db cf       	rjmp	.-74     	; 0xeba <malloc+0x22>
     f04:	21 15       	cp	r18, r1
     f06:	31 05       	cpc	r19, r1
     f08:	f9 f0       	breq	.+62     	; 0xf48 <malloc+0xb0>
     f0a:	28 1b       	sub	r18, r24
     f0c:	39 0b       	sbc	r19, r25
     f0e:	24 30       	cpi	r18, 0x04	; 4
     f10:	31 05       	cpc	r19, r1
     f12:	80 f4       	brcc	.+32     	; 0xf34 <malloc+0x9c>
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	9b 81       	ldd	r25, Y+3	; 0x03
     f18:	61 15       	cp	r22, r1
     f1a:	71 05       	cpc	r23, r1
     f1c:	21 f0       	breq	.+8      	; 0xf26 <malloc+0x8e>
     f1e:	fb 01       	movw	r30, r22
     f20:	82 83       	std	Z+2, r24	; 0x02
     f22:	93 83       	std	Z+3, r25	; 0x03
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <malloc+0x96>
     f26:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <__flp>
     f2a:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <__flp+0x1>
     f2e:	fe 01       	movw	r30, r28
     f30:	32 96       	adiw	r30, 0x02	; 2
     f32:	44 c0       	rjmp	.+136    	; 0xfbc <malloc+0x124>
     f34:	fe 01       	movw	r30, r28
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	81 93       	st	Z+, r24
     f3c:	91 93       	st	Z+, r25
     f3e:	22 50       	subi	r18, 0x02	; 2
     f40:	31 09       	sbc	r19, r1
     f42:	28 83       	st	Y, r18
     f44:	39 83       	std	Y+1, r19	; 0x01
     f46:	3a c0       	rjmp	.+116    	; 0xfbc <malloc+0x124>
     f48:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <__brkval>
     f4c:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <__brkval+0x1>
     f50:	23 2b       	or	r18, r19
     f52:	41 f4       	brne	.+16     	; 0xf64 <malloc+0xcc>
     f54:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
     f58:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
     f5c:	20 93 1c 20 	sts	0x201C, r18	; 0x80201c <__brkval>
     f60:	30 93 1d 20 	sts	0x201D, r19	; 0x80201d <__brkval+0x1>
     f64:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     f68:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
     f6c:	21 15       	cp	r18, r1
     f6e:	31 05       	cpc	r19, r1
     f70:	41 f4       	brne	.+16     	; 0xf82 <malloc+0xea>
     f72:	2d b7       	in	r18, 0x3d	; 61
     f74:	3e b7       	in	r19, 0x3e	; 62
     f76:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
     f7a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
     f7e:	24 1b       	sub	r18, r20
     f80:	35 0b       	sbc	r19, r21
     f82:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <__brkval>
     f86:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <__brkval+0x1>
     f8a:	e2 17       	cp	r30, r18
     f8c:	f3 07       	cpc	r31, r19
     f8e:	a0 f4       	brcc	.+40     	; 0xfb8 <malloc+0x120>
     f90:	2e 1b       	sub	r18, r30
     f92:	3f 0b       	sbc	r19, r31
     f94:	28 17       	cp	r18, r24
     f96:	39 07       	cpc	r19, r25
     f98:	78 f0       	brcs	.+30     	; 0xfb8 <malloc+0x120>
     f9a:	ac 01       	movw	r20, r24
     f9c:	4e 5f       	subi	r20, 0xFE	; 254
     f9e:	5f 4f       	sbci	r21, 0xFF	; 255
     fa0:	24 17       	cp	r18, r20
     fa2:	35 07       	cpc	r19, r21
     fa4:	48 f0       	brcs	.+18     	; 0xfb8 <malloc+0x120>
     fa6:	4e 0f       	add	r20, r30
     fa8:	5f 1f       	adc	r21, r31
     faa:	40 93 1c 20 	sts	0x201C, r20	; 0x80201c <__brkval>
     fae:	50 93 1d 20 	sts	0x201D, r21	; 0x80201d <__brkval+0x1>
     fb2:	81 93       	st	Z+, r24
     fb4:	91 93       	st	Z+, r25
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <malloc+0x124>
     fb8:	e0 e0       	ldi	r30, 0x00	; 0
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	cf 01       	movw	r24, r30
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	08 95       	ret

00000fc8 <free>:
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	09 f4       	brne	.+2      	; 0xfd2 <free+0xa>
     fd0:	81 c0       	rjmp	.+258    	; 0x10d4 <free+0x10c>
     fd2:	fc 01       	movw	r30, r24
     fd4:	32 97       	sbiw	r30, 0x02	; 2
     fd6:	12 82       	std	Z+2, r1	; 0x02
     fd8:	13 82       	std	Z+3, r1	; 0x03
     fda:	a0 91 1e 20 	lds	r26, 0x201E	; 0x80201e <__flp>
     fde:	b0 91 1f 20 	lds	r27, 0x201F	; 0x80201f <__flp+0x1>
     fe2:	10 97       	sbiw	r26, 0x00	; 0
     fe4:	81 f4       	brne	.+32     	; 0x1006 <free+0x3e>
     fe6:	20 81       	ld	r18, Z
     fe8:	31 81       	ldd	r19, Z+1	; 0x01
     fea:	82 0f       	add	r24, r18
     fec:	93 1f       	adc	r25, r19
     fee:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <__brkval>
     ff2:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <__brkval+0x1>
     ff6:	28 17       	cp	r18, r24
     ff8:	39 07       	cpc	r19, r25
     ffa:	51 f5       	brne	.+84     	; 0x1050 <free+0x88>
     ffc:	e0 93 1c 20 	sts	0x201C, r30	; 0x80201c <__brkval>
    1000:	f0 93 1d 20 	sts	0x201D, r31	; 0x80201d <__brkval+0x1>
    1004:	67 c0       	rjmp	.+206    	; 0x10d4 <free+0x10c>
    1006:	ed 01       	movw	r28, r26
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	ce 17       	cp	r28, r30
    100e:	df 07       	cpc	r29, r31
    1010:	40 f4       	brcc	.+16     	; 0x1022 <free+0x5a>
    1012:	4a 81       	ldd	r20, Y+2	; 0x02
    1014:	5b 81       	ldd	r21, Y+3	; 0x03
    1016:	9e 01       	movw	r18, r28
    1018:	41 15       	cp	r20, r1
    101a:	51 05       	cpc	r21, r1
    101c:	f1 f0       	breq	.+60     	; 0x105a <free+0x92>
    101e:	ea 01       	movw	r28, r20
    1020:	f5 cf       	rjmp	.-22     	; 0x100c <free+0x44>
    1022:	c2 83       	std	Z+2, r28	; 0x02
    1024:	d3 83       	std	Z+3, r29	; 0x03
    1026:	40 81       	ld	r20, Z
    1028:	51 81       	ldd	r21, Z+1	; 0x01
    102a:	84 0f       	add	r24, r20
    102c:	95 1f       	adc	r25, r21
    102e:	c8 17       	cp	r28, r24
    1030:	d9 07       	cpc	r29, r25
    1032:	59 f4       	brne	.+22     	; 0x104a <free+0x82>
    1034:	88 81       	ld	r24, Y
    1036:	99 81       	ldd	r25, Y+1	; 0x01
    1038:	84 0f       	add	r24, r20
    103a:	95 1f       	adc	r25, r21
    103c:	02 96       	adiw	r24, 0x02	; 2
    103e:	80 83       	st	Z, r24
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	82 83       	std	Z+2, r24	; 0x02
    1048:	93 83       	std	Z+3, r25	; 0x03
    104a:	21 15       	cp	r18, r1
    104c:	31 05       	cpc	r19, r1
    104e:	29 f4       	brne	.+10     	; 0x105a <free+0x92>
    1050:	e0 93 1e 20 	sts	0x201E, r30	; 0x80201e <__flp>
    1054:	f0 93 1f 20 	sts	0x201F, r31	; 0x80201f <__flp+0x1>
    1058:	3d c0       	rjmp	.+122    	; 0x10d4 <free+0x10c>
    105a:	e9 01       	movw	r28, r18
    105c:	ea 83       	std	Y+2, r30	; 0x02
    105e:	fb 83       	std	Y+3, r31	; 0x03
    1060:	49 91       	ld	r20, Y+
    1062:	59 91       	ld	r21, Y+
    1064:	c4 0f       	add	r28, r20
    1066:	d5 1f       	adc	r29, r21
    1068:	ec 17       	cp	r30, r28
    106a:	fd 07       	cpc	r31, r29
    106c:	61 f4       	brne	.+24     	; 0x1086 <free+0xbe>
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	84 0f       	add	r24, r20
    1074:	95 1f       	adc	r25, r21
    1076:	02 96       	adiw	r24, 0x02	; 2
    1078:	e9 01       	movw	r28, r18
    107a:	88 83       	st	Y, r24
    107c:	99 83       	std	Y+1, r25	; 0x01
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
    1084:	9b 83       	std	Y+3, r25	; 0x03
    1086:	e0 e0       	ldi	r30, 0x00	; 0
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	12 96       	adiw	r26, 0x02	; 2
    108c:	8d 91       	ld	r24, X+
    108e:	9c 91       	ld	r25, X
    1090:	13 97       	sbiw	r26, 0x03	; 3
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	19 f0       	breq	.+6      	; 0x109c <free+0xd4>
    1096:	fd 01       	movw	r30, r26
    1098:	dc 01       	movw	r26, r24
    109a:	f7 cf       	rjmp	.-18     	; 0x108a <free+0xc2>
    109c:	8d 91       	ld	r24, X+
    109e:	9c 91       	ld	r25, X
    10a0:	11 97       	sbiw	r26, 0x01	; 1
    10a2:	9d 01       	movw	r18, r26
    10a4:	2e 5f       	subi	r18, 0xFE	; 254
    10a6:	3f 4f       	sbci	r19, 0xFF	; 255
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <__brkval>
    10b0:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <__brkval+0x1>
    10b4:	28 17       	cp	r18, r24
    10b6:	39 07       	cpc	r19, r25
    10b8:	69 f4       	brne	.+26     	; 0x10d4 <free+0x10c>
    10ba:	30 97       	sbiw	r30, 0x00	; 0
    10bc:	29 f4       	brne	.+10     	; 0x10c8 <free+0x100>
    10be:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <__flp>
    10c2:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <__flp+0x1>
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <free+0x104>
    10c8:	12 82       	std	Z+2, r1	; 0x02
    10ca:	13 82       	std	Z+3, r1	; 0x03
    10cc:	a0 93 1c 20 	sts	0x201C, r26	; 0x80201c <__brkval>
    10d0:	b0 93 1d 20 	sts	0x201D, r27	; 0x80201d <__brkval+0x1>
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <isspace>:
    10da:	91 11       	cpse	r25, r1
    10dc:	ab c0       	rjmp	.+342    	; 0x1234 <__ctype_isfalse>
    10de:	80 32       	cpi	r24, 0x20	; 32
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <isspace+0xe>
    10e2:	89 50       	subi	r24, 0x09	; 9
    10e4:	85 50       	subi	r24, 0x05	; 5
    10e6:	d0 f7       	brcc	.-12     	; 0x10dc <isspace+0x2>
    10e8:	08 95       	ret

000010ea <strchr_P>:
    10ea:	fc 01       	movw	r30, r24
    10ec:	05 90       	lpm	r0, Z+
    10ee:	06 16       	cp	r0, r22
    10f0:	21 f0       	breq	.+8      	; 0x10fa <strchr_P+0x10>
    10f2:	00 20       	and	r0, r0
    10f4:	d9 f7       	brne	.-10     	; 0x10ec <strchr_P+0x2>
    10f6:	c0 01       	movw	r24, r0
    10f8:	08 95       	ret
    10fa:	31 97       	sbiw	r30, 0x01	; 1
    10fc:	cf 01       	movw	r24, r30
    10fe:	08 95       	ret

00001100 <memset>:
    1100:	dc 01       	movw	r26, r24
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <memset+0x6>
    1104:	6d 93       	st	X+, r22
    1106:	41 50       	subi	r20, 0x01	; 1
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	e0 f7       	brcc	.-8      	; 0x1104 <memset+0x4>
    110c:	08 95       	ret

0000110e <fgetc>:
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	ec 01       	movw	r28, r24
    1114:	2b 81       	ldd	r18, Y+3	; 0x03
    1116:	20 ff       	sbrs	r18, 0
    1118:	33 c0       	rjmp	.+102    	; 0x1180 <fgetc+0x72>
    111a:	26 ff       	sbrs	r18, 6
    111c:	0a c0       	rjmp	.+20     	; 0x1132 <fgetc+0x24>
    111e:	2f 7b       	andi	r18, 0xBF	; 191
    1120:	2b 83       	std	Y+3, r18	; 0x03
    1122:	8e 81       	ldd	r24, Y+6	; 0x06
    1124:	9f 81       	ldd	r25, Y+7	; 0x07
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	8e 83       	std	Y+6, r24	; 0x06
    112a:	9f 83       	std	Y+7, r25	; 0x07
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	29 c0       	rjmp	.+82     	; 0x1184 <fgetc+0x76>
    1132:	22 ff       	sbrs	r18, 2
    1134:	0f c0       	rjmp	.+30     	; 0x1154 <fgetc+0x46>
    1136:	e8 81       	ld	r30, Y
    1138:	f9 81       	ldd	r31, Y+1	; 0x01
    113a:	80 81       	ld	r24, Z
    113c:	08 2e       	mov	r0, r24
    113e:	00 0c       	add	r0, r0
    1140:	99 0b       	sbc	r25, r25
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	19 f4       	brne	.+6      	; 0x114c <fgetc+0x3e>
    1146:	20 62       	ori	r18, 0x20	; 32
    1148:	2b 83       	std	Y+3, r18	; 0x03
    114a:	1a c0       	rjmp	.+52     	; 0x1180 <fgetc+0x72>
    114c:	31 96       	adiw	r30, 0x01	; 1
    114e:	e8 83       	st	Y, r30
    1150:	f9 83       	std	Y+1, r31	; 0x01
    1152:	0e c0       	rjmp	.+28     	; 0x1170 <fgetc+0x62>
    1154:	ea 85       	ldd	r30, Y+10	; 0x0a
    1156:	fb 85       	ldd	r31, Y+11	; 0x0b
    1158:	19 95       	eicall
    115a:	97 ff       	sbrs	r25, 7
    115c:	09 c0       	rjmp	.+18     	; 0x1170 <fgetc+0x62>
    115e:	2b 81       	ldd	r18, Y+3	; 0x03
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	11 f0       	breq	.+4      	; 0x1168 <fgetc+0x5a>
    1164:	80 e2       	ldi	r24, 0x20	; 32
    1166:	01 c0       	rjmp	.+2      	; 0x116a <fgetc+0x5c>
    1168:	80 e1       	ldi	r24, 0x10	; 16
    116a:	82 2b       	or	r24, r18
    116c:	8b 83       	std	Y+3, r24	; 0x03
    116e:	08 c0       	rjmp	.+16     	; 0x1180 <fgetc+0x72>
    1170:	2e 81       	ldd	r18, Y+6	; 0x06
    1172:	3f 81       	ldd	r19, Y+7	; 0x07
    1174:	2f 5f       	subi	r18, 0xFF	; 255
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	2e 83       	std	Y+6, r18	; 0x06
    117a:	3f 83       	std	Y+7, r19	; 0x07
    117c:	99 27       	eor	r25, r25
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <fgetc+0x76>
    1180:	8f ef       	ldi	r24, 0xFF	; 255
    1182:	9f ef       	ldi	r25, 0xFF	; 255
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	08 95       	ret

0000118a <fputc>:
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	fb 01       	movw	r30, r22
    1194:	23 81       	ldd	r18, Z+3	; 0x03
    1196:	21 fd       	sbrc	r18, 1
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <fputc+0x16>
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	9f ef       	ldi	r25, 0xFF	; 255
    119e:	2c c0       	rjmp	.+88     	; 0x11f8 <fputc+0x6e>
    11a0:	22 ff       	sbrs	r18, 2
    11a2:	16 c0       	rjmp	.+44     	; 0x11d0 <fputc+0x46>
    11a4:	46 81       	ldd	r20, Z+6	; 0x06
    11a6:	57 81       	ldd	r21, Z+7	; 0x07
    11a8:	24 81       	ldd	r18, Z+4	; 0x04
    11aa:	35 81       	ldd	r19, Z+5	; 0x05
    11ac:	42 17       	cp	r20, r18
    11ae:	53 07       	cpc	r21, r19
    11b0:	44 f4       	brge	.+16     	; 0x11c2 <fputc+0x38>
    11b2:	a0 81       	ld	r26, Z
    11b4:	b1 81       	ldd	r27, Z+1	; 0x01
    11b6:	9d 01       	movw	r18, r26
    11b8:	2f 5f       	subi	r18, 0xFF	; 255
    11ba:	3f 4f       	sbci	r19, 0xFF	; 255
    11bc:	20 83       	st	Z, r18
    11be:	31 83       	std	Z+1, r19	; 0x01
    11c0:	8c 93       	st	X, r24
    11c2:	26 81       	ldd	r18, Z+6	; 0x06
    11c4:	37 81       	ldd	r19, Z+7	; 0x07
    11c6:	2f 5f       	subi	r18, 0xFF	; 255
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	26 83       	std	Z+6, r18	; 0x06
    11cc:	37 83       	std	Z+7, r19	; 0x07
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <fputc+0x6e>
    11d0:	8b 01       	movw	r16, r22
    11d2:	ec 01       	movw	r28, r24
    11d4:	fb 01       	movw	r30, r22
    11d6:	00 84       	ldd	r0, Z+8	; 0x08
    11d8:	f1 85       	ldd	r31, Z+9	; 0x09
    11da:	e0 2d       	mov	r30, r0
    11dc:	19 95       	eicall
    11de:	89 2b       	or	r24, r25
    11e0:	e1 f6       	brne	.-72     	; 0x119a <fputc+0x10>
    11e2:	d8 01       	movw	r26, r16
    11e4:	16 96       	adiw	r26, 0x06	; 6
    11e6:	8d 91       	ld	r24, X+
    11e8:	9c 91       	ld	r25, X
    11ea:	17 97       	sbiw	r26, 0x07	; 7
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	16 96       	adiw	r26, 0x06	; 6
    11f0:	8d 93       	st	X+, r24
    11f2:	9c 93       	st	X, r25
    11f4:	17 97       	sbiw	r26, 0x07	; 7
    11f6:	ce 01       	movw	r24, r28
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	08 95       	ret

00001202 <ungetc>:
    1202:	fb 01       	movw	r30, r22
    1204:	23 81       	ldd	r18, Z+3	; 0x03
    1206:	20 ff       	sbrs	r18, 0
    1208:	12 c0       	rjmp	.+36     	; 0x122e <ungetc+0x2c>
    120a:	26 fd       	sbrc	r18, 6
    120c:	10 c0       	rjmp	.+32     	; 0x122e <ungetc+0x2c>
    120e:	8f 3f       	cpi	r24, 0xFF	; 255
    1210:	3f ef       	ldi	r19, 0xFF	; 255
    1212:	93 07       	cpc	r25, r19
    1214:	61 f0       	breq	.+24     	; 0x122e <ungetc+0x2c>
    1216:	82 83       	std	Z+2, r24	; 0x02
    1218:	2f 7d       	andi	r18, 0xDF	; 223
    121a:	20 64       	ori	r18, 0x40	; 64
    121c:	23 83       	std	Z+3, r18	; 0x03
    121e:	26 81       	ldd	r18, Z+6	; 0x06
    1220:	37 81       	ldd	r19, Z+7	; 0x07
    1222:	21 50       	subi	r18, 0x01	; 1
    1224:	31 09       	sbc	r19, r1
    1226:	26 83       	std	Z+6, r18	; 0x06
    1228:	37 83       	std	Z+7, r19	; 0x07
    122a:	99 27       	eor	r25, r25
    122c:	08 95       	ret
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	9f ef       	ldi	r25, 0xFF	; 255
    1232:	08 95       	ret

00001234 <__ctype_isfalse>:
    1234:	99 27       	eor	r25, r25
    1236:	88 27       	eor	r24, r24

00001238 <__ctype_istrue>:
    1238:	08 95       	ret

0000123a <_exit>:
    123a:	f8 94       	cli

0000123c <__stop_program>:
    123c:	ff cf       	rjmp	.-2      	; 0x123c <__stop_program>
