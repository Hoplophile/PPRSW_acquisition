
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000109e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  0000109e  00001132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00802012  00802012  00001144  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007260  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003aee  00000000  00000000  0000854c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002537  00000000  00000000  0000c03a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  0000e574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d96f  00000000  00000000  0000e80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000132b  00000000  00000000  0003c17b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0003d4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009d94  00000000  00000000  0003d596  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
       6:	00 00       	nop
       8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>
       a:	00 00       	nop
       c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
       e:	00 00       	nop
      10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
      12:	00 00       	nop
      14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
      16:	00 00       	nop
      18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
      22:	00 00       	nop
      24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
      26:	00 00       	nop
      28:	08 c1       	rjmp	.+528    	; 0x23a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	06 c1       	rjmp	.+524    	; 0x23a <__bad_interrupt>
      2e:	00 00       	nop
      30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
      32:	00 00       	nop
      34:	02 c1       	rjmp	.+516    	; 0x23a <__bad_interrupt>
      36:	00 00       	nop
      38:	00 c1       	rjmp	.+512    	; 0x23a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fe c0       	rjmp	.+508    	; 0x23a <__bad_interrupt>
      3e:	00 00       	nop
      40:	fc c0       	rjmp	.+504    	; 0x23a <__bad_interrupt>
      42:	00 00       	nop
      44:	fa c0       	rjmp	.+500    	; 0x23a <__bad_interrupt>
      46:	00 00       	nop
      48:	f8 c0       	rjmp	.+496    	; 0x23a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f6 c0       	rjmp	.+492    	; 0x23a <__bad_interrupt>
      4e:	00 00       	nop
      50:	f4 c0       	rjmp	.+488    	; 0x23a <__bad_interrupt>
      52:	00 00       	nop
      54:	f2 c0       	rjmp	.+484    	; 0x23a <__bad_interrupt>
      56:	00 00       	nop
      58:	f0 c0       	rjmp	.+480    	; 0x23a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ee c0       	rjmp	.+476    	; 0x23a <__bad_interrupt>
      5e:	00 00       	nop
      60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
      62:	00 00       	nop
      64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
      66:	00 00       	nop
      68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
      6e:	00 00       	nop
      70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
      72:	00 00       	nop
      74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
      76:	00 00       	nop
      78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
      7e:	00 00       	nop
      80:	dc c0       	rjmp	.+440    	; 0x23a <__bad_interrupt>
      82:	00 00       	nop
      84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
      86:	00 00       	nop
      88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
      8e:	00 00       	nop
      90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
      92:	00 00       	nop
      94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
      96:	00 00       	nop
      98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ce c0       	rjmp	.+412    	; 0x23a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cc c0       	rjmp	.+408    	; 0x23a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ca c0       	rjmp	.+404    	; 0x23a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c8 c0       	rjmp	.+400    	; 0x23a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c6 c0       	rjmp	.+396    	; 0x23a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c4 c0       	rjmp	.+392    	; 0x23a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c2 c0       	rjmp	.+388    	; 0x23a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c0 c0       	rjmp	.+384    	; 0x23a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	be c0       	rjmp	.+380    	; 0x23a <__bad_interrupt>
      be:	00 00       	nop
      c0:	bc c0       	rjmp	.+376    	; 0x23a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ba c0       	rjmp	.+372    	; 0x23a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b8 c0       	rjmp	.+368    	; 0x23a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b6 c0       	rjmp	.+364    	; 0x23a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b4 c0       	rjmp	.+360    	; 0x23a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b2 c0       	rjmp	.+356    	; 0x23a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b0 c0       	rjmp	.+352    	; 0x23a <__bad_interrupt>
      da:	00 00       	nop
      dc:	ae c0       	rjmp	.+348    	; 0x23a <__bad_interrupt>
      de:	00 00       	nop
      e0:	ac c0       	rjmp	.+344    	; 0x23a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	aa c0       	rjmp	.+340    	; 0x23a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a8 c0       	rjmp	.+336    	; 0x23a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a6 c0       	rjmp	.+332    	; 0x23a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a4 c0       	rjmp	.+328    	; 0x23a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a2 c0       	rjmp	.+324    	; 0x23a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a0 c0       	rjmp	.+320    	; 0x23a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9e c0       	rjmp	.+316    	; 0x23a <__bad_interrupt>
      fe:	00 00       	nop
     100:	9c c0       	rjmp	.+312    	; 0x23a <__bad_interrupt>
     102:	00 00       	nop
     104:	9a c0       	rjmp	.+308    	; 0x23a <__bad_interrupt>
     106:	00 00       	nop
     108:	98 c0       	rjmp	.+304    	; 0x23a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	96 c0       	rjmp	.+300    	; 0x23a <__bad_interrupt>
     10e:	00 00       	nop
     110:	94 c0       	rjmp	.+296    	; 0x23a <__bad_interrupt>
     112:	00 00       	nop
     114:	92 c0       	rjmp	.+292    	; 0x23a <__bad_interrupt>
     116:	00 00       	nop
     118:	90 c0       	rjmp	.+288    	; 0x23a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8e c0       	rjmp	.+284    	; 0x23a <__bad_interrupt>
     11e:	00 00       	nop
     120:	8c c0       	rjmp	.+280    	; 0x23a <__bad_interrupt>
     122:	00 00       	nop
     124:	8a c0       	rjmp	.+276    	; 0x23a <__bad_interrupt>
     126:	00 00       	nop
     128:	88 c0       	rjmp	.+272    	; 0x23a <__bad_interrupt>
     12a:	00 00       	nop
     12c:	86 c0       	rjmp	.+268    	; 0x23a <__bad_interrupt>
     12e:	00 00       	nop
     130:	84 c0       	rjmp	.+264    	; 0x23a <__bad_interrupt>
     132:	00 00       	nop
     134:	82 c0       	rjmp	.+260    	; 0x23a <__bad_interrupt>
     136:	00 00       	nop
     138:	80 c0       	rjmp	.+256    	; 0x23a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	7e c0       	rjmp	.+252    	; 0x23a <__bad_interrupt>
     13e:	00 00       	nop
     140:	7c c0       	rjmp	.+248    	; 0x23a <__bad_interrupt>
     142:	00 00       	nop
     144:	7a c0       	rjmp	.+244    	; 0x23a <__bad_interrupt>
     146:	00 00       	nop
     148:	78 c0       	rjmp	.+240    	; 0x23a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	76 c0       	rjmp	.+236    	; 0x23a <__bad_interrupt>
     14e:	00 00       	nop
     150:	74 c0       	rjmp	.+232    	; 0x23a <__bad_interrupt>
     152:	00 00       	nop
     154:	72 c0       	rjmp	.+228    	; 0x23a <__bad_interrupt>
     156:	00 00       	nop
     158:	70 c0       	rjmp	.+224    	; 0x23a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6e c0       	rjmp	.+220    	; 0x23a <__bad_interrupt>
     15e:	00 00       	nop
     160:	6c c0       	rjmp	.+216    	; 0x23a <__bad_interrupt>
     162:	00 00       	nop
     164:	6a c0       	rjmp	.+212    	; 0x23a <__bad_interrupt>
     166:	00 00       	nop
     168:	68 c0       	rjmp	.+208    	; 0x23a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	66 c0       	rjmp	.+204    	; 0x23a <__bad_interrupt>
     16e:	00 00       	nop
     170:	64 c0       	rjmp	.+200    	; 0x23a <__bad_interrupt>
     172:	00 00       	nop
     174:	62 c0       	rjmp	.+196    	; 0x23a <__bad_interrupt>
     176:	00 00       	nop
     178:	60 c0       	rjmp	.+192    	; 0x23a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5e c0       	rjmp	.+188    	; 0x23a <__bad_interrupt>
     17e:	00 00       	nop
     180:	5c c0       	rjmp	.+184    	; 0x23a <__bad_interrupt>
     182:	00 00       	nop
     184:	5a c0       	rjmp	.+180    	; 0x23a <__bad_interrupt>
     186:	00 00       	nop
     188:	58 c0       	rjmp	.+176    	; 0x23a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	56 c0       	rjmp	.+172    	; 0x23a <__bad_interrupt>
     18e:	00 00       	nop
     190:	54 c0       	rjmp	.+168    	; 0x23a <__bad_interrupt>
     192:	00 00       	nop
     194:	52 c0       	rjmp	.+164    	; 0x23a <__bad_interrupt>
     196:	00 00       	nop
     198:	50 c0       	rjmp	.+160    	; 0x23a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4e c0       	rjmp	.+156    	; 0x23a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4c c0       	rjmp	.+152    	; 0x23a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4a c0       	rjmp	.+148    	; 0x23a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	48 c0       	rjmp	.+144    	; 0x23a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	46 c0       	rjmp	.+140    	; 0x23a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	44 c0       	rjmp	.+136    	; 0x23a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	42 c0       	rjmp	.+132    	; 0x23a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	40 c0       	rjmp	.+128    	; 0x23a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3e c0       	rjmp	.+124    	; 0x23a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3c c0       	rjmp	.+120    	; 0x23a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3a c0       	rjmp	.+116    	; 0x23a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	38 c0       	rjmp	.+112    	; 0x23a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	36 c0       	rjmp	.+108    	; 0x23a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	34 c0       	rjmp	.+104    	; 0x23a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	32 c0       	rjmp	.+100    	; 0x23a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	30 c0       	rjmp	.+96     	; 0x23a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2e c0       	rjmp	.+92     	; 0x23a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2c c0       	rjmp	.+88     	; 0x23a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2a c0       	rjmp	.+84     	; 0x23a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	28 c0       	rjmp	.+80     	; 0x23a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	26 c0       	rjmp	.+76     	; 0x23a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	24 c0       	rjmp	.+72     	; 0x23a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	22 c0       	rjmp	.+68     	; 0x23a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	20 c0       	rjmp	.+64     	; 0x23a <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ee e9       	ldi	r30, 0x9E	; 158
     214:	f0 e1       	ldi	r31, 0x10	; 16
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a2 31       	cpi	r26, 0x12	; 18
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e2       	ldi	r18, 0x20	; 32
     228:	a2 e1       	ldi	r26, 0x12	; 18
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a2 32       	cpi	r26, 0x22	; 34
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	7b d2       	rcall	.+1270   	; 0x72e <main>
     238:	30 c7       	rjmp	.+3680   	; 0x109a <_exit>

0000023a <__bad_interrupt>:
     23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	1f 92       	push	r1
     242:	cd b7       	in	r28, 0x3d	; 61
     244:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     246:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <stdio_base>
     24a:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <stdio_base+0x1>
     24e:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <__data_end>
     252:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <__data_end+0x1>
     256:	be 01       	movw	r22, r28
     258:	6f 5f       	subi	r22, 0xFF	; 255
     25a:	7f 4f       	sbci	r23, 0xFF	; 255
     25c:	19 95       	eicall
	return c;
     25e:	89 81       	ldd	r24, Y+1	; 0x01
}
     260:	08 2e       	mov	r0, r24
     262:	00 0c       	add	r0, r0
     264:	99 0b       	sbc	r25, r25
     266:	0f 90       	pop	r0
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     26e:	fc 01       	movw	r30, r24
     270:	91 81       	ldd	r25, Z+1	; 0x01
     272:	95 ff       	sbrs	r25, 5
     274:	fd cf       	rjmp	.-6      	; 0x270 <usart_putchar+0x2>
     276:	60 83       	st	Z, r22
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	08 95       	ret

0000027e <usart_getchar>:
     27e:	fc 01       	movw	r30, r24
     280:	91 81       	ldd	r25, Z+1	; 0x01
     282:	99 23       	and	r25, r25
     284:	ec f7       	brge	.-6      	; 0x280 <usart_getchar+0x2>
     286:	80 81       	ld	r24, Z
     288:	08 95       	ret

0000028a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     28a:	4f 92       	push	r4
     28c:	5f 92       	push	r5
     28e:	6f 92       	push	r6
     290:	7f 92       	push	r7
     292:	8f 92       	push	r8
     294:	9f 92       	push	r9
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	7c 01       	movw	r14, r24
     2a6:	4a 01       	movw	r8, r20
     2a8:	5b 01       	movw	r10, r22
     2aa:	28 01       	movw	r4, r16
     2ac:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2ae:	fc 01       	movw	r30, r24
     2b0:	84 81       	ldd	r24, Z+4	; 0x04
     2b2:	82 ff       	sbrs	r24, 2
     2b4:	16 c0       	rjmp	.+44     	; 0x2e2 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     2b6:	d9 01       	movw	r26, r18
     2b8:	c8 01       	movw	r24, r16
     2ba:	68 94       	set
     2bc:	12 f8       	bld	r1, 2
     2be:	b6 95       	lsr	r27
     2c0:	a7 95       	ror	r26
     2c2:	97 95       	ror	r25
     2c4:	87 95       	ror	r24
     2c6:	16 94       	lsr	r1
     2c8:	d1 f7       	brne	.-12     	; 0x2be <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     2ca:	b9 01       	movw	r22, r18
     2cc:	a8 01       	movw	r20, r16
     2ce:	03 2e       	mov	r0, r19
     2d0:	36 e1       	ldi	r19, 0x16	; 22
     2d2:	76 95       	lsr	r23
     2d4:	67 95       	ror	r22
     2d6:	57 95       	ror	r21
     2d8:	47 95       	ror	r20
     2da:	3a 95       	dec	r19
     2dc:	d1 f7       	brne	.-12     	; 0x2d2 <usart_set_baudrate+0x48>
     2de:	30 2d       	mov	r19, r0
     2e0:	15 c0       	rjmp	.+42     	; 0x30c <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     2e2:	d9 01       	movw	r26, r18
     2e4:	c8 01       	movw	r24, r16
     2e6:	68 94       	set
     2e8:	13 f8       	bld	r1, 3
     2ea:	b6 95       	lsr	r27
     2ec:	a7 95       	ror	r26
     2ee:	97 95       	ror	r25
     2f0:	87 95       	ror	r24
     2f2:	16 94       	lsr	r1
     2f4:	d1 f7       	brne	.-12     	; 0x2ea <usart_set_baudrate+0x60>
		min_rate /= 2;
     2f6:	b9 01       	movw	r22, r18
     2f8:	a8 01       	movw	r20, r16
     2fa:	03 2e       	mov	r0, r19
     2fc:	37 e1       	ldi	r19, 0x17	; 23
     2fe:	76 95       	lsr	r23
     300:	67 95       	ror	r22
     302:	57 95       	ror	r21
     304:	47 95       	ror	r20
     306:	3a 95       	dec	r19
     308:	d1 f7       	brne	.-12     	; 0x2fe <usart_set_baudrate+0x74>
     30a:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     30c:	88 15       	cp	r24, r8
     30e:	99 05       	cpc	r25, r9
     310:	aa 05       	cpc	r26, r10
     312:	bb 05       	cpc	r27, r11
     314:	08 f4       	brcc	.+2      	; 0x318 <usart_set_baudrate+0x8e>
     316:	a2 c0       	rjmp	.+324    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     318:	84 16       	cp	r8, r20
     31a:	95 06       	cpc	r9, r21
     31c:	a6 06       	cpc	r10, r22
     31e:	b7 06       	cpc	r11, r23
     320:	08 f4       	brcc	.+2      	; 0x324 <usart_set_baudrate+0x9a>
     322:	9e c0       	rjmp	.+316    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     324:	f7 01       	movw	r30, r14
     326:	84 81       	ldd	r24, Z+4	; 0x04
     328:	82 fd       	sbrc	r24, 2
     32a:	04 c0       	rjmp	.+8      	; 0x334 <usart_set_baudrate+0xaa>
		baud *= 2;
     32c:	88 0c       	add	r8, r8
     32e:	99 1c       	adc	r9, r9
     330:	aa 1c       	adc	r10, r10
     332:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     334:	c3 01       	movw	r24, r6
     336:	b2 01       	movw	r22, r4
     338:	a5 01       	movw	r20, r10
     33a:	94 01       	movw	r18, r8
     33c:	46 d2       	rcall	.+1164   	; 0x7ca <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     33e:	2f 3f       	cpi	r18, 0xFF	; 255
     340:	31 05       	cpc	r19, r1
     342:	41 05       	cpc	r20, r1
     344:	51 05       	cpc	r21, r1
     346:	08 f4       	brcc	.+2      	; 0x34a <usart_set_baudrate+0xc0>
     348:	8d c0       	rjmp	.+282    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	a0 e0       	ldi	r26, 0x00	; 0
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	c9 ef       	ldi	r28, 0xF9	; 249
     354:	05 c0       	rjmp	.+10     	; 0x360 <usart_set_baudrate+0xd6>
     356:	28 17       	cp	r18, r24
     358:	39 07       	cpc	r19, r25
     35a:	4a 07       	cpc	r20, r26
     35c:	5b 07       	cpc	r21, r27
     35e:	58 f0       	brcs	.+22     	; 0x376 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	aa 1f       	adc	r26, r26
     366:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     368:	cd 3f       	cpi	r28, 0xFD	; 253
     36a:	0c f4       	brge	.+2      	; 0x36e <usart_set_baudrate+0xe4>
			limit |= 1;
     36c:	81 60       	ori	r24, 0x01	; 1
     36e:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     370:	c7 30       	cpi	r28, 0x07	; 7
     372:	89 f7       	brne	.-30     	; 0x356 <usart_set_baudrate+0xcc>
     374:	4d c0       	rjmp	.+154    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     376:	cc 23       	and	r28, r28
     378:	0c f0       	brlt	.+2      	; 0x37c <usart_set_baudrate+0xf2>
     37a:	4a c0       	rjmp	.+148    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     37c:	d5 01       	movw	r26, r10
     37e:	c4 01       	movw	r24, r8
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	aa 1f       	adc	r26, r26
     386:	bb 1f       	adc	r27, r27
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	aa 1f       	adc	r26, r26
     38e:	bb 1f       	adc	r27, r27
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	aa 1f       	adc	r26, r26
     396:	bb 1f       	adc	r27, r27
     398:	48 1a       	sub	r4, r24
     39a:	59 0a       	sbc	r5, r25
     39c:	6a 0a       	sbc	r6, r26
     39e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     3a0:	ce 3f       	cpi	r28, 0xFE	; 254
     3a2:	ec f4       	brge	.+58     	; 0x3de <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     3a4:	8d ef       	ldi	r24, 0xFD	; 253
     3a6:	9f ef       	ldi	r25, 0xFF	; 255
     3a8:	8c 1b       	sub	r24, r28
     3aa:	91 09       	sbc	r25, r1
     3ac:	c7 fd       	sbrc	r28, 7
     3ae:	93 95       	inc	r25
     3b0:	04 c0       	rjmp	.+8      	; 0x3ba <usart_set_baudrate+0x130>
     3b2:	44 0c       	add	r4, r4
     3b4:	55 1c       	adc	r5, r5
     3b6:	66 1c       	adc	r6, r6
     3b8:	77 1c       	adc	r7, r7
     3ba:	8a 95       	dec	r24
     3bc:	d2 f7       	brpl	.-12     	; 0x3b2 <usart_set_baudrate+0x128>
     3be:	d5 01       	movw	r26, r10
     3c0:	c4 01       	movw	r24, r8
     3c2:	b6 95       	lsr	r27
     3c4:	a7 95       	ror	r26
     3c6:	97 95       	ror	r25
     3c8:	87 95       	ror	r24
     3ca:	bc 01       	movw	r22, r24
     3cc:	cd 01       	movw	r24, r26
     3ce:	64 0d       	add	r22, r4
     3d0:	75 1d       	adc	r23, r5
     3d2:	86 1d       	adc	r24, r6
     3d4:	97 1d       	adc	r25, r7
     3d6:	a5 01       	movw	r20, r10
     3d8:	94 01       	movw	r18, r8
     3da:	f7 d1       	rcall	.+1006   	; 0x7ca <__udivmodsi4>
     3dc:	35 c0       	rjmp	.+106    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		} else {
			baud <<= exp + 3;
     3de:	83 e0       	ldi	r24, 0x03	; 3
     3e0:	8c 0f       	add	r24, r28
     3e2:	a5 01       	movw	r20, r10
     3e4:	94 01       	movw	r18, r8
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <usart_set_baudrate+0x166>
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	44 1f       	adc	r20, r20
     3ee:	55 1f       	adc	r21, r21
     3f0:	8a 95       	dec	r24
     3f2:	d2 f7       	brpl	.-12     	; 0x3e8 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     3f4:	da 01       	movw	r26, r20
     3f6:	c9 01       	movw	r24, r18
     3f8:	b6 95       	lsr	r27
     3fa:	a7 95       	ror	r26
     3fc:	97 95       	ror	r25
     3fe:	87 95       	ror	r24
     400:	bc 01       	movw	r22, r24
     402:	cd 01       	movw	r24, r26
     404:	64 0d       	add	r22, r4
     406:	75 1d       	adc	r23, r5
     408:	86 1d       	adc	r24, r6
     40a:	97 1d       	adc	r25, r7
     40c:	de d1       	rcall	.+956    	; 0x7ca <__udivmodsi4>
     40e:	1c c0       	rjmp	.+56     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	8c 0f       	add	r24, r28
     414:	a5 01       	movw	r20, r10
     416:	94 01       	movw	r18, r8
     418:	04 c0       	rjmp	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41a:	22 0f       	add	r18, r18
     41c:	33 1f       	adc	r19, r19
     41e:	44 1f       	adc	r20, r20
     420:	55 1f       	adc	r21, r21
     422:	8a 95       	dec	r24
     424:	d2 f7       	brpl	.-12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		div = (cpu_hz + baud / 2) / baud - 1;
     426:	da 01       	movw	r26, r20
     428:	c9 01       	movw	r24, r18
     42a:	b6 95       	lsr	r27
     42c:	a7 95       	ror	r26
     42e:	97 95       	ror	r25
     430:	87 95       	ror	r24
     432:	bc 01       	movw	r22, r24
     434:	cd 01       	movw	r24, r26
     436:	64 0d       	add	r22, r4
     438:	75 1d       	adc	r23, r5
     43a:	86 1d       	adc	r24, r6
     43c:	97 1d       	adc	r25, r7
     43e:	c5 d1       	rcall	.+906    	; 0x7ca <__udivmodsi4>
     440:	21 50       	subi	r18, 0x01	; 1
     442:	31 09       	sbc	r19, r1
     444:	41 09       	sbc	r20, r1
     446:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     448:	83 2f       	mov	r24, r19
     44a:	8f 70       	andi	r24, 0x0F	; 15
     44c:	c2 95       	swap	r28
     44e:	c0 7f       	andi	r28, 0xF0	; 240
     450:	c8 2b       	or	r28, r24
     452:	f7 01       	movw	r30, r14
     454:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     456:	26 83       	std	Z+6, r18	; 0x06

	return true;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	18 c0       	rjmp	.+48     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	16 c0       	rjmp	.+44     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	14 c0       	rjmp	.+40     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     464:	d5 01       	movw	r26, r10
     466:	c4 01       	movw	r24, r8
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	aa 1f       	adc	r26, r26
     46e:	bb 1f       	adc	r27, r27
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	aa 1f       	adc	r26, r26
     476:	bb 1f       	adc	r27, r27
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	aa 1f       	adc	r26, r26
     47e:	bb 1f       	adc	r27, r27
     480:	48 1a       	sub	r4, r24
     482:	59 0a       	sbc	r5, r25
     484:	6a 0a       	sbc	r6, r26
     486:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     488:	c9 ef       	ldi	r28, 0xF9	; 249
     48a:	8c cf       	rjmp	.-232    	; 0x3a4 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	bf 90       	pop	r11
     498:	af 90       	pop	r10
     49a:	9f 90       	pop	r9
     49c:	8f 90       	pop	r8
     49e:	7f 90       	pop	r7
     4a0:	6f 90       	pop	r6
     4a2:	5f 90       	pop	r5
     4a4:	4f 90       	pop	r4
     4a6:	08 95       	ret

000004a8 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	ec 01       	movw	r28, r24
     4b2:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	09 f4       	brne	.+2      	; 0x4ba <usart_init_rs232+0x12>
     4b8:	e6 c0       	rjmp	.+460    	; 0x686 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     4ba:	80 3c       	cpi	r24, 0xC0	; 192
     4bc:	91 05       	cpc	r25, r1
     4be:	21 f4       	brne	.+8      	; 0x4c8 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     4c0:	60 e1       	ldi	r22, 0x10	; 16
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	14 d1       	rcall	.+552    	; 0x6ee <sysclk_enable_module>
     4c6:	df c0       	rjmp	.+446    	; 0x686 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     4c8:	c0 38       	cpi	r28, 0x80	; 128
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	d8 07       	cpc	r29, r24
     4ce:	21 f4       	brne	.+8      	; 0x4d8 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     4d0:	62 e0       	ldi	r22, 0x02	; 2
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0c d1       	rcall	.+536    	; 0x6ee <sysclk_enable_module>
     4d6:	d7 c0       	rjmp	.+430    	; 0x686 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     4d8:	c1 15       	cp	r28, r1
     4da:	e1 e0       	ldi	r30, 0x01	; 1
     4dc:	de 07       	cpc	r29, r30
     4de:	21 f4       	brne	.+8      	; 0x4e8 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	04 d1       	rcall	.+520    	; 0x6ee <sysclk_enable_module>
     4e6:	cf c0       	rjmp	.+414    	; 0x686 <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     4e8:	c0 38       	cpi	r28, 0x80	; 128
     4ea:	f3 e0       	ldi	r31, 0x03	; 3
     4ec:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     4ee:	21 f4       	brne	.+8      	; 0x4f8 <usart_init_rs232+0x50>
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	fc d0       	rcall	.+504    	; 0x6ee <sysclk_enable_module>
     4f6:	c7 c0       	rjmp	.+398    	; 0x686 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     4f8:	c0 39       	cpi	r28, 0x90	; 144
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     4fe:	21 f4       	brne	.+8      	; 0x508 <usart_init_rs232+0x60>
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	f4 d0       	rcall	.+488    	; 0x6ee <sysclk_enable_module>
     506:	bf c0       	rjmp	.+382    	; 0x686 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     508:	c1 15       	cp	r28, r1
     50a:	e2 e0       	ldi	r30, 0x02	; 2
     50c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     50e:	21 f4       	brne	.+8      	; 0x518 <usart_init_rs232+0x70>
     510:	62 e0       	ldi	r22, 0x02	; 2
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	ec d0       	rcall	.+472    	; 0x6ee <sysclk_enable_module>
     516:	b7 c0       	rjmp	.+366    	; 0x686 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     518:	c0 34       	cpi	r28, 0x40	; 64
     51a:	f2 e0       	ldi	r31, 0x02	; 2
     51c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     51e:	21 f4       	brne	.+8      	; 0x528 <usart_init_rs232+0x80>
     520:	62 e0       	ldi	r22, 0x02	; 2
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	e4 d0       	rcall	.+456    	; 0x6ee <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     526:	af c0       	rjmp	.+350    	; 0x686 <usart_init_rs232+0x1de>
     528:	c0 32       	cpi	r28, 0x20	; 32
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     52e:	21 f4       	brne	.+8      	; 0x538 <usart_init_rs232+0x90>
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	dc d0       	rcall	.+440    	; 0x6ee <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     536:	a7 c0       	rjmp	.+334    	; 0x686 <usart_init_rs232+0x1de>
     538:	c1 15       	cp	r28, r1
     53a:	e8 e0       	ldi	r30, 0x08	; 8
     53c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     53e:	21 f4       	brne	.+8      	; 0x548 <usart_init_rs232+0xa0>
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	d4 d0       	rcall	.+424    	; 0x6ee <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     546:	9f c0       	rjmp	.+318    	; 0x686 <usart_init_rs232+0x1de>
     548:	c1 15       	cp	r28, r1
     54a:	f9 e0       	ldi	r31, 0x09	; 9
     54c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     54e:	21 f4       	brne	.+8      	; 0x558 <usart_init_rs232+0xb0>
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	cc d0       	rcall	.+408    	; 0x6ee <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     556:	97 c0       	rjmp	.+302    	; 0x686 <usart_init_rs232+0x1de>
     558:	c1 15       	cp	r28, r1
     55a:	8a e0       	ldi	r24, 0x0A	; 10
     55c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     55e:	21 f4       	brne	.+8      	; 0x568 <usart_init_rs232+0xc0>
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	85 e0       	ldi	r24, 0x05	; 5
     564:	c4 d0       	rcall	.+392    	; 0x6ee <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     566:	8f c0       	rjmp	.+286    	; 0x686 <usart_init_rs232+0x1de>
     568:	c1 15       	cp	r28, r1
     56a:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     56c:	de 07       	cpc	r29, r30
     56e:	21 f4       	brne	.+8      	; 0x578 <usart_init_rs232+0xd0>
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	86 e0       	ldi	r24, 0x06	; 6
     574:	bc d0       	rcall	.+376    	; 0x6ee <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     576:	87 c0       	rjmp	.+270    	; 0x686 <usart_init_rs232+0x1de>
     578:	c0 34       	cpi	r28, 0x40	; 64
     57a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     57c:	df 07       	cpc	r29, r31
     57e:	21 f4       	brne	.+8      	; 0x588 <usart_init_rs232+0xe0>
     580:	62 e0       	ldi	r22, 0x02	; 2
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	b4 d0       	rcall	.+360    	; 0x6ee <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     586:	7f c0       	rjmp	.+254    	; 0x686 <usart_init_rs232+0x1de>
     588:	c0 34       	cpi	r28, 0x40	; 64
     58a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     58c:	d8 07       	cpc	r29, r24
     58e:	21 f4       	brne	.+8      	; 0x598 <usart_init_rs232+0xf0>
     590:	62 e0       	ldi	r22, 0x02	; 2
     592:	84 e0       	ldi	r24, 0x04	; 4
     594:	ac d0       	rcall	.+344    	; 0x6ee <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     596:	77 c0       	rjmp	.+238    	; 0x686 <usart_init_rs232+0x1de>
     598:	c0 34       	cpi	r28, 0x40	; 64
     59a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     59c:	de 07       	cpc	r29, r30
     59e:	21 f4       	brne	.+8      	; 0x5a8 <usart_init_rs232+0x100>
     5a0:	62 e0       	ldi	r22, 0x02	; 2
     5a2:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     5a4:	a4 d0       	rcall	.+328    	; 0x6ee <sysclk_enable_module>
     5a6:	6f c0       	rjmp	.+222    	; 0x686 <usart_init_rs232+0x1de>
     5a8:	c0 39       	cpi	r28, 0x90	; 144
     5aa:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     5ac:	df 07       	cpc	r29, r31
     5ae:	21 f4       	brne	.+8      	; 0x5b8 <usart_init_rs232+0x110>
     5b0:	64 e0       	ldi	r22, 0x04	; 4
     5b2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     5b4:	9c d0       	rcall	.+312    	; 0x6ee <sysclk_enable_module>
     5b6:	67 c0       	rjmp	.+206    	; 0x686 <usart_init_rs232+0x1de>
     5b8:	c0 39       	cpi	r28, 0x90	; 144
     5ba:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     5bc:	d8 07       	cpc	r29, r24
     5be:	21 f4       	brne	.+8      	; 0x5c8 <usart_init_rs232+0x120>
     5c0:	64 e0       	ldi	r22, 0x04	; 4
     5c2:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     5c4:	94 d0       	rcall	.+296    	; 0x6ee <sysclk_enable_module>
     5c6:	5f c0       	rjmp	.+190    	; 0x686 <usart_init_rs232+0x1de>
     5c8:	c0 39       	cpi	r28, 0x90	; 144
     5ca:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     5cc:	de 07       	cpc	r29, r30
     5ce:	21 f4       	brne	.+8      	; 0x5d8 <usart_init_rs232+0x130>
     5d0:	64 e0       	ldi	r22, 0x04	; 4
     5d2:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     5d4:	8c d0       	rcall	.+280    	; 0x6ee <sysclk_enable_module>
     5d6:	57 c0       	rjmp	.+174    	; 0x686 <usart_init_rs232+0x1de>
     5d8:	c0 39       	cpi	r28, 0x90	; 144
     5da:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     5dc:	df 07       	cpc	r29, r31
     5de:	21 f4       	brne	.+8      	; 0x5e8 <usart_init_rs232+0x140>
     5e0:	64 e0       	ldi	r22, 0x04	; 4
     5e2:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     5e4:	84 d0       	rcall	.+264    	; 0x6ee <sysclk_enable_module>
     5e6:	4f c0       	rjmp	.+158    	; 0x686 <usart_init_rs232+0x1de>
     5e8:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     5ea:	88 e0       	ldi	r24, 0x08	; 8
     5ec:	d8 07       	cpc	r29, r24
     5ee:	21 f4       	brne	.+8      	; 0x5f8 <usart_init_rs232+0x150>
     5f0:	68 e0       	ldi	r22, 0x08	; 8
     5f2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     5f4:	7c d0       	rcall	.+248    	; 0x6ee <sysclk_enable_module>
     5f6:	47 c0       	rjmp	.+142    	; 0x686 <usart_init_rs232+0x1de>
     5f8:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     5fa:	e9 e0       	ldi	r30, 0x09	; 9
     5fc:	de 07       	cpc	r29, r30
     5fe:	21 f4       	brne	.+8      	; 0x608 <usart_init_rs232+0x160>
     600:	68 e0       	ldi	r22, 0x08	; 8
     602:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     604:	74 d0       	rcall	.+232    	; 0x6ee <sysclk_enable_module>
     606:	3f c0       	rjmp	.+126    	; 0x686 <usart_init_rs232+0x1de>
     608:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     60a:	f8 e0       	ldi	r31, 0x08	; 8
     60c:	df 07       	cpc	r29, r31
     60e:	21 f4       	brne	.+8      	; 0x618 <usart_init_rs232+0x170>
     610:	60 e1       	ldi	r22, 0x10	; 16
     612:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     614:	6c d0       	rcall	.+216    	; 0x6ee <sysclk_enable_module>
     616:	37 c0       	rjmp	.+110    	; 0x686 <usart_init_rs232+0x1de>
     618:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     61a:	89 e0       	ldi	r24, 0x09	; 9
     61c:	d8 07       	cpc	r29, r24
     61e:	21 f4       	brne	.+8      	; 0x628 <usart_init_rs232+0x180>
     620:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     622:	84 e0       	ldi	r24, 0x04	; 4
     624:	64 d0       	rcall	.+200    	; 0x6ee <sysclk_enable_module>
     626:	2f c0       	rjmp	.+94     	; 0x686 <usart_init_rs232+0x1de>
     628:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     62a:	ea e0       	ldi	r30, 0x0A	; 10
     62c:	de 07       	cpc	r29, r30
     62e:	21 f4       	brne	.+8      	; 0x638 <usart_init_rs232+0x190>
     630:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     632:	85 e0       	ldi	r24, 0x05	; 5
     634:	5c d0       	rcall	.+184    	; 0x6ee <sysclk_enable_module>
     636:	27 c0       	rjmp	.+78     	; 0x686 <usart_init_rs232+0x1de>
     638:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     63a:	fb e0       	ldi	r31, 0x0B	; 11
     63c:	df 07       	cpc	r29, r31
     63e:	21 f4       	brne	.+8      	; 0x648 <usart_init_rs232+0x1a0>
     640:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     642:	86 e0       	ldi	r24, 0x06	; 6
     644:	54 d0       	rcall	.+168    	; 0x6ee <sysclk_enable_module>
     646:	1f c0       	rjmp	.+62     	; 0x686 <usart_init_rs232+0x1de>
     648:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     64a:	88 e0       	ldi	r24, 0x08	; 8
     64c:	d8 07       	cpc	r29, r24
     64e:	21 f4       	brne	.+8      	; 0x658 <usart_init_rs232+0x1b0>
     650:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	4c d0       	rcall	.+152    	; 0x6ee <sysclk_enable_module>
     656:	17 c0       	rjmp	.+46     	; 0x686 <usart_init_rs232+0x1de>
     658:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     65a:	e9 e0       	ldi	r30, 0x09	; 9
     65c:	de 07       	cpc	r29, r30
     65e:	21 f4       	brne	.+8      	; 0x668 <usart_init_rs232+0x1c0>
     660:	60 e2       	ldi	r22, 0x20	; 32
     662:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     664:	44 d0       	rcall	.+136    	; 0x6ee <sysclk_enable_module>
     666:	0f c0       	rjmp	.+30     	; 0x686 <usart_init_rs232+0x1de>
     668:	c0 38       	cpi	r28, 0x80	; 128
     66a:	f4 e0       	ldi	r31, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     66c:	df 07       	cpc	r29, r31
     66e:	21 f4       	brne	.+8      	; 0x678 <usart_init_rs232+0x1d0>
     670:	60 e4       	ldi	r22, 0x40	; 64
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	3c d0       	rcall	.+120    	; 0x6ee <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     676:	07 c0       	rjmp	.+14     	; 0x686 <usart_init_rs232+0x1de>
     678:	c0 3a       	cpi	r28, 0xA0	; 160
     67a:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     67c:	d8 07       	cpc	r29, r24
     67e:	19 f4       	brne	.+6      	; 0x686 <usart_init_rs232+0x1de>
     680:	60 e4       	ldi	r22, 0x40	; 64
     682:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     684:	34 d0       	rcall	.+104    	; 0x6ee <sysclk_enable_module>
     686:	8d 81       	ldd	r24, Y+5	; 0x05
     688:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     68a:	8d 83       	std	Y+5, r24	; 0x05
     68c:	f8 01       	movw	r30, r16
     68e:	95 81       	ldd	r25, Z+5	; 0x05
     690:	84 81       	ldd	r24, Z+4	; 0x04
     692:	89 2b       	or	r24, r25
     694:	96 81       	ldd	r25, Z+6	; 0x06
     696:	91 11       	cpse	r25, r1
     698:	98 e0       	ldi	r25, 0x08	; 8
     69a:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     69c:	8d 83       	std	Y+5, r24	; 0x05
     69e:	f8 01       	movw	r30, r16
     6a0:	40 81       	ld	r20, Z
     6a2:	51 81       	ldd	r21, Z+1	; 0x01
     6a4:	62 81       	ldd	r22, Z+2	; 0x02
     6a6:	73 81       	ldd	r23, Z+3	; 0x03
     6a8:	00 e8       	ldi	r16, 0x80	; 128
     6aa:	14 e8       	ldi	r17, 0x84	; 132
     6ac:	2e e1       	ldi	r18, 0x1E	; 30
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	ce 01       	movw	r24, r28
     6b2:	eb dd       	rcall	.-1066   	; 0x28a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	98 60       	ori	r25, 0x08	; 8
     6b8:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     6ba:	9c 81       	ldd	r25, Y+4	; 0x04
     6bc:	90 61       	ori	r25, 0x10	; 16
     6be:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     6ca:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     6cc:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <stdio_base>
     6d0:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <stdio_base+0x1>
     6d4:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <ptr_put>
     6d8:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <ptr_put+0x1>
     6dc:	19 95       	eicall
     6de:	99 23       	and	r25, r25
     6e0:	1c f0       	brlt	.+6      	; 0x6e8 <_write+0x1e>
		return -1;
	}
	return 1;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     6ec:	08 95       	ret

000006ee <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	1f 92       	push	r1
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6f8:	9f b7       	in	r25, 0x3f	; 63
     6fa:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     6fc:	f8 94       	cli
	return flags;
     6fe:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     700:	e8 2f       	mov	r30, r24
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	e0 59       	subi	r30, 0x90	; 144
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	60 95       	com	r22
     70a:	80 81       	ld	r24, Z
     70c:	68 23       	and	r22, r24
     70e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     710:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     712:	0f 90       	pop	r0
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     720:	ae dd       	rcall	.-1188   	; 0x27e <usart_getchar>
     722:	88 83       	st	Y, r24
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     72a:	a1 cd       	rjmp	.-1214   	; 0x26e <usart_putchar>
}
     72c:	08 95       	ret

0000072e <main>:
#include <asf.h>

#define UART_TXPIN IOPORT_CREATE_PIN(PORTE, 3)

int main (void) {
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	27 97       	sbiw	r28, 0x07	; 7
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	de bf       	out	0x3e, r29	; 62
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     73c:	80 ea       	ldi	r24, 0xA0	; 160
     73e:	9a e0       	ldi	r25, 0x0A	; 10
     740:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <stdio_base>
     744:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     748:	85 e9       	ldi	r24, 0x95	; 149
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <ptr_put>
     750:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     754:	8d e8       	ldi	r24, 0x8D	; 141
     756:	93 e0       	ldi	r25, 0x03	; 3
     758:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <__data_end>
     75c:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     760:	e6 e0       	ldi	r30, 0x06	; 6
     762:	f0 e2       	ldi	r31, 0x20	; 32
     764:	84 81       	ldd	r24, Z+4	; 0x04
     766:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     768:	85 81       	ldd	r24, Z+5	; 0x05
     76a:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     76c:	86 81       	ldd	r24, Z+6	; 0x06
     76e:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	a2 81       	ldd	r26, Z+2	; 0x02
     776:	b3 81       	ldd	r27, Z+3	; 0x03
     778:	89 83       	std	Y+1, r24	; 0x01
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	ab 83       	std	Y+3, r26	; 0x03
     77e:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     780:	60 e1       	ldi	r22, 0x10	; 16
     782:	85 e0       	ldi	r24, 0x05	; 5
     784:	b4 df       	rcall	.-152    	; 0x6ee <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     786:	be 01       	movw	r22, r28
     788:	6f 5f       	subi	r22, 0xFF	; 255
     78a:	7f 4f       	sbci	r23, 0xFF	; 255
     78c:	80 ea       	ldi	r24, 0xA0	; 160
     78e:	9a e0       	ldi	r25, 0x0A	; 10
     790:	8b de       	rcall	.-746    	; 0x4a8 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     792:	6e e1       	ldi	r22, 0x1E	; 30
     794:	71 e0       	ldi	r23, 0x01	; 1
     796:	85 e6       	ldi	r24, 0x65	; 101
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	39 d0       	rcall	.+114    	; 0x80e <fdevopen>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     79c:	88 e0       	ldi	r24, 0x08	; 8
     79e:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	};
	
	stdio_serial_init(&USARTE0, &USART_SERIAL_OPTIONS);
	ioport_set_pin_dir(UART_TXPIN, IOPORT_DIR_OUTPUT);
	
	unsigned int uiNumberToSend = 0;
     7a2:	00 e0       	ldi	r16, 0x00	; 0
     7a4:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1) {
		
		printf("%d ", uiNumberToSend);
     7a6:	0f 2e       	mov	r0, r31
     7a8:	fd e0       	ldi	r31, 0x0D	; 13
     7aa:	ef 2e       	mov	r14, r31
     7ac:	f0 e2       	ldi	r31, 0x20	; 32
     7ae:	ff 2e       	mov	r15, r31
     7b0:	f0 2d       	mov	r31, r0
     7b2:	1f 93       	push	r17
     7b4:	0f 93       	push	r16
     7b6:	ff 92       	push	r15
     7b8:	ef 92       	push	r14
     7ba:	73 d0       	rcall	.+230    	; 0x8a2 <printf>
		uiNumberToSend++;
     7bc:	0f 5f       	subi	r16, 0xFF	; 255
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	f4 cf       	rjmp	.-24     	; 0x7b2 <main+0x84>

000007ca <__udivmodsi4>:
     7ca:	a1 e2       	ldi	r26, 0x21	; 33
     7cc:	1a 2e       	mov	r1, r26
     7ce:	aa 1b       	sub	r26, r26
     7d0:	bb 1b       	sub	r27, r27
     7d2:	fd 01       	movw	r30, r26
     7d4:	0d c0       	rjmp	.+26     	; 0x7f0 <__udivmodsi4_ep>

000007d6 <__udivmodsi4_loop>:
     7d6:	aa 1f       	adc	r26, r26
     7d8:	bb 1f       	adc	r27, r27
     7da:	ee 1f       	adc	r30, r30
     7dc:	ff 1f       	adc	r31, r31
     7de:	a2 17       	cp	r26, r18
     7e0:	b3 07       	cpc	r27, r19
     7e2:	e4 07       	cpc	r30, r20
     7e4:	f5 07       	cpc	r31, r21
     7e6:	20 f0       	brcs	.+8      	; 0x7f0 <__udivmodsi4_ep>
     7e8:	a2 1b       	sub	r26, r18
     7ea:	b3 0b       	sbc	r27, r19
     7ec:	e4 0b       	sbc	r30, r20
     7ee:	f5 0b       	sbc	r31, r21

000007f0 <__udivmodsi4_ep>:
     7f0:	66 1f       	adc	r22, r22
     7f2:	77 1f       	adc	r23, r23
     7f4:	88 1f       	adc	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	1a 94       	dec	r1
     7fa:	69 f7       	brne	.-38     	; 0x7d6 <__udivmodsi4_loop>
     7fc:	60 95       	com	r22
     7fe:	70 95       	com	r23
     800:	80 95       	com	r24
     802:	90 95       	com	r25
     804:	9b 01       	movw	r18, r22
     806:	ac 01       	movw	r20, r24
     808:	bd 01       	movw	r22, r26
     80a:	cf 01       	movw	r24, r30
     80c:	08 95       	ret

0000080e <fdevopen>:
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	00 97       	sbiw	r24, 0x00	; 0
     818:	31 f4       	brne	.+12     	; 0x826 <fdevopen+0x18>
     81a:	61 15       	cp	r22, r1
     81c:	71 05       	cpc	r23, r1
     81e:	19 f4       	brne	.+6      	; 0x826 <fdevopen+0x18>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	39 c0       	rjmp	.+114    	; 0x898 <fdevopen+0x8a>
     826:	8b 01       	movw	r16, r22
     828:	ec 01       	movw	r28, r24
     82a:	6e e0       	ldi	r22, 0x0E	; 14
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	41 d2       	rcall	.+1154   	; 0xcb6 <calloc>
     834:	fc 01       	movw	r30, r24
     836:	89 2b       	or	r24, r25
     838:	99 f3       	breq	.-26     	; 0x820 <fdevopen+0x12>
     83a:	80 e8       	ldi	r24, 0x80	; 128
     83c:	83 83       	std	Z+3, r24	; 0x03
     83e:	01 15       	cp	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	71 f0       	breq	.+28     	; 0x860 <fdevopen+0x52>
     844:	02 87       	std	Z+10, r16	; 0x0a
     846:	13 87       	std	Z+11, r17	; 0x0b
     848:	81 e8       	ldi	r24, 0x81	; 129
     84a:	83 83       	std	Z+3, r24	; 0x03
     84c:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <__iob>
     850:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <__iob+0x1>
     854:	89 2b       	or	r24, r25
     856:	21 f4       	brne	.+8      	; 0x860 <fdevopen+0x52>
     858:	e0 93 18 20 	sts	0x2018, r30	; 0x802018 <__iob>
     85c:	f0 93 19 20 	sts	0x2019, r31	; 0x802019 <__iob+0x1>
     860:	20 97       	sbiw	r28, 0x00	; 0
     862:	c9 f0       	breq	.+50     	; 0x896 <fdevopen+0x88>
     864:	c0 87       	std	Z+8, r28	; 0x08
     866:	d1 87       	std	Z+9, r29	; 0x09
     868:	83 81       	ldd	r24, Z+3	; 0x03
     86a:	82 60       	ori	r24, 0x02	; 2
     86c:	83 83       	std	Z+3, r24	; 0x03
     86e:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <__iob+0x2>
     872:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <__iob+0x3>
     876:	89 2b       	or	r24, r25
     878:	71 f4       	brne	.+28     	; 0x896 <fdevopen+0x88>
     87a:	e0 93 1a 20 	sts	0x201A, r30	; 0x80201a <__iob+0x2>
     87e:	f0 93 1b 20 	sts	0x201B, r31	; 0x80201b <__iob+0x3>
     882:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__iob+0x4>
     886:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__iob+0x5>
     88a:	89 2b       	or	r24, r25
     88c:	21 f4       	brne	.+8      	; 0x896 <fdevopen+0x88>
     88e:	e0 93 1c 20 	sts	0x201C, r30	; 0x80201c <__iob+0x4>
     892:	f0 93 1d 20 	sts	0x201D, r31	; 0x80201d <__iob+0x5>
     896:	cf 01       	movw	r24, r30
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	08 95       	ret

000008a2 <printf>:
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	ae 01       	movw	r20, r28
     8ac:	4a 5f       	subi	r20, 0xFA	; 250
     8ae:	5f 4f       	sbci	r21, 0xFF	; 255
     8b0:	fa 01       	movw	r30, r20
     8b2:	61 91       	ld	r22, Z+
     8b4:	71 91       	ld	r23, Z+
     8b6:	af 01       	movw	r20, r30
     8b8:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <__iob+0x2>
     8bc:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <__iob+0x3>
     8c0:	03 d0       	rcall	.+6      	; 0x8c8 <vfprintf>
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <vfprintf>:
     8c8:	2f 92       	push	r2
     8ca:	3f 92       	push	r3
     8cc:	4f 92       	push	r4
     8ce:	5f 92       	push	r5
     8d0:	6f 92       	push	r6
     8d2:	7f 92       	push	r7
     8d4:	8f 92       	push	r8
     8d6:	9f 92       	push	r9
     8d8:	af 92       	push	r10
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	2b 97       	sbiw	r28, 0x0b	; 11
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	6c 01       	movw	r12, r24
     8f8:	7b 01       	movw	r14, r22
     8fa:	8a 01       	movw	r16, r20
     8fc:	fc 01       	movw	r30, r24
     8fe:	16 82       	std	Z+6, r1	; 0x06
     900:	17 82       	std	Z+7, r1	; 0x07
     902:	83 81       	ldd	r24, Z+3	; 0x03
     904:	81 ff       	sbrs	r24, 1
     906:	bf c1       	rjmp	.+894    	; 0xc86 <vfprintf+0x3be>
     908:	ce 01       	movw	r24, r28
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	3c 01       	movw	r6, r24
     90e:	f6 01       	movw	r30, r12
     910:	93 81       	ldd	r25, Z+3	; 0x03
     912:	f7 01       	movw	r30, r14
     914:	93 fd       	sbrc	r25, 3
     916:	85 91       	lpm	r24, Z+
     918:	93 ff       	sbrs	r25, 3
     91a:	81 91       	ld	r24, Z+
     91c:	7f 01       	movw	r14, r30
     91e:	88 23       	and	r24, r24
     920:	09 f4       	brne	.+2      	; 0x924 <vfprintf+0x5c>
     922:	ad c1       	rjmp	.+858    	; 0xc7e <vfprintf+0x3b6>
     924:	85 32       	cpi	r24, 0x25	; 37
     926:	39 f4       	brne	.+14     	; 0x936 <vfprintf+0x6e>
     928:	93 fd       	sbrc	r25, 3
     92a:	85 91       	lpm	r24, Z+
     92c:	93 ff       	sbrs	r25, 3
     92e:	81 91       	ld	r24, Z+
     930:	7f 01       	movw	r14, r30
     932:	85 32       	cpi	r24, 0x25	; 37
     934:	21 f4       	brne	.+8      	; 0x93e <vfprintf+0x76>
     936:	b6 01       	movw	r22, r12
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	15 d3       	rcall	.+1578   	; 0xf66 <fputc>
     93c:	e8 cf       	rjmp	.-48     	; 0x90e <vfprintf+0x46>
     93e:	91 2c       	mov	r9, r1
     940:	21 2c       	mov	r2, r1
     942:	31 2c       	mov	r3, r1
     944:	ff e1       	ldi	r31, 0x1F	; 31
     946:	f3 15       	cp	r31, r3
     948:	d8 f0       	brcs	.+54     	; 0x980 <vfprintf+0xb8>
     94a:	8b 32       	cpi	r24, 0x2B	; 43
     94c:	79 f0       	breq	.+30     	; 0x96c <vfprintf+0xa4>
     94e:	38 f4       	brcc	.+14     	; 0x95e <vfprintf+0x96>
     950:	80 32       	cpi	r24, 0x20	; 32
     952:	79 f0       	breq	.+30     	; 0x972 <vfprintf+0xaa>
     954:	83 32       	cpi	r24, 0x23	; 35
     956:	a1 f4       	brne	.+40     	; 0x980 <vfprintf+0xb8>
     958:	23 2d       	mov	r18, r3
     95a:	20 61       	ori	r18, 0x10	; 16
     95c:	1d c0       	rjmp	.+58     	; 0x998 <vfprintf+0xd0>
     95e:	8d 32       	cpi	r24, 0x2D	; 45
     960:	61 f0       	breq	.+24     	; 0x97a <vfprintf+0xb2>
     962:	80 33       	cpi	r24, 0x30	; 48
     964:	69 f4       	brne	.+26     	; 0x980 <vfprintf+0xb8>
     966:	23 2d       	mov	r18, r3
     968:	21 60       	ori	r18, 0x01	; 1
     96a:	16 c0       	rjmp	.+44     	; 0x998 <vfprintf+0xd0>
     96c:	83 2d       	mov	r24, r3
     96e:	82 60       	ori	r24, 0x02	; 2
     970:	38 2e       	mov	r3, r24
     972:	e3 2d       	mov	r30, r3
     974:	e4 60       	ori	r30, 0x04	; 4
     976:	3e 2e       	mov	r3, r30
     978:	2a c0       	rjmp	.+84     	; 0x9ce <vfprintf+0x106>
     97a:	f3 2d       	mov	r31, r3
     97c:	f8 60       	ori	r31, 0x08	; 8
     97e:	1d c0       	rjmp	.+58     	; 0x9ba <vfprintf+0xf2>
     980:	37 fc       	sbrc	r3, 7
     982:	2d c0       	rjmp	.+90     	; 0x9de <vfprintf+0x116>
     984:	20 ed       	ldi	r18, 0xD0	; 208
     986:	28 0f       	add	r18, r24
     988:	2a 30       	cpi	r18, 0x0A	; 10
     98a:	40 f0       	brcs	.+16     	; 0x99c <vfprintf+0xd4>
     98c:	8e 32       	cpi	r24, 0x2E	; 46
     98e:	b9 f4       	brne	.+46     	; 0x9be <vfprintf+0xf6>
     990:	36 fc       	sbrc	r3, 6
     992:	75 c1       	rjmp	.+746    	; 0xc7e <vfprintf+0x3b6>
     994:	23 2d       	mov	r18, r3
     996:	20 64       	ori	r18, 0x40	; 64
     998:	32 2e       	mov	r3, r18
     99a:	19 c0       	rjmp	.+50     	; 0x9ce <vfprintf+0x106>
     99c:	36 fe       	sbrs	r3, 6
     99e:	06 c0       	rjmp	.+12     	; 0x9ac <vfprintf+0xe4>
     9a0:	8a e0       	ldi	r24, 0x0A	; 10
     9a2:	98 9e       	mul	r9, r24
     9a4:	20 0d       	add	r18, r0
     9a6:	11 24       	eor	r1, r1
     9a8:	92 2e       	mov	r9, r18
     9aa:	11 c0       	rjmp	.+34     	; 0x9ce <vfprintf+0x106>
     9ac:	ea e0       	ldi	r30, 0x0A	; 10
     9ae:	2e 9e       	mul	r2, r30
     9b0:	20 0d       	add	r18, r0
     9b2:	11 24       	eor	r1, r1
     9b4:	22 2e       	mov	r2, r18
     9b6:	f3 2d       	mov	r31, r3
     9b8:	f0 62       	ori	r31, 0x20	; 32
     9ba:	3f 2e       	mov	r3, r31
     9bc:	08 c0       	rjmp	.+16     	; 0x9ce <vfprintf+0x106>
     9be:	8c 36       	cpi	r24, 0x6C	; 108
     9c0:	21 f4       	brne	.+8      	; 0x9ca <vfprintf+0x102>
     9c2:	83 2d       	mov	r24, r3
     9c4:	80 68       	ori	r24, 0x80	; 128
     9c6:	38 2e       	mov	r3, r24
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <vfprintf+0x106>
     9ca:	88 36       	cpi	r24, 0x68	; 104
     9cc:	41 f4       	brne	.+16     	; 0x9de <vfprintf+0x116>
     9ce:	f7 01       	movw	r30, r14
     9d0:	93 fd       	sbrc	r25, 3
     9d2:	85 91       	lpm	r24, Z+
     9d4:	93 ff       	sbrs	r25, 3
     9d6:	81 91       	ld	r24, Z+
     9d8:	7f 01       	movw	r14, r30
     9da:	81 11       	cpse	r24, r1
     9dc:	b3 cf       	rjmp	.-154    	; 0x944 <vfprintf+0x7c>
     9de:	98 2f       	mov	r25, r24
     9e0:	9f 7d       	andi	r25, 0xDF	; 223
     9e2:	95 54       	subi	r25, 0x45	; 69
     9e4:	93 30       	cpi	r25, 0x03	; 3
     9e6:	28 f4       	brcc	.+10     	; 0x9f2 <vfprintf+0x12a>
     9e8:	0c 5f       	subi	r16, 0xFC	; 252
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255
     9ec:	9f e3       	ldi	r25, 0x3F	; 63
     9ee:	99 83       	std	Y+1, r25	; 0x01
     9f0:	0d c0       	rjmp	.+26     	; 0xa0c <vfprintf+0x144>
     9f2:	83 36       	cpi	r24, 0x63	; 99
     9f4:	31 f0       	breq	.+12     	; 0xa02 <vfprintf+0x13a>
     9f6:	83 37       	cpi	r24, 0x73	; 115
     9f8:	71 f0       	breq	.+28     	; 0xa16 <vfprintf+0x14e>
     9fa:	83 35       	cpi	r24, 0x53	; 83
     9fc:	09 f0       	breq	.+2      	; 0xa00 <vfprintf+0x138>
     9fe:	55 c0       	rjmp	.+170    	; 0xaaa <vfprintf+0x1e2>
     a00:	20 c0       	rjmp	.+64     	; 0xa42 <vfprintf+0x17a>
     a02:	f8 01       	movw	r30, r16
     a04:	80 81       	ld	r24, Z
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	0e 5f       	subi	r16, 0xFE	; 254
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	88 24       	eor	r8, r8
     a0e:	83 94       	inc	r8
     a10:	91 2c       	mov	r9, r1
     a12:	53 01       	movw	r10, r6
     a14:	12 c0       	rjmp	.+36     	; 0xa3a <vfprintf+0x172>
     a16:	28 01       	movw	r4, r16
     a18:	f2 e0       	ldi	r31, 0x02	; 2
     a1a:	4f 0e       	add	r4, r31
     a1c:	51 1c       	adc	r5, r1
     a1e:	f8 01       	movw	r30, r16
     a20:	a0 80       	ld	r10, Z
     a22:	b1 80       	ldd	r11, Z+1	; 0x01
     a24:	36 fe       	sbrs	r3, 6
     a26:	03 c0       	rjmp	.+6      	; 0xa2e <vfprintf+0x166>
     a28:	69 2d       	mov	r22, r9
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <vfprintf+0x16a>
     a2e:	6f ef       	ldi	r22, 0xFF	; 255
     a30:	7f ef       	ldi	r23, 0xFF	; 255
     a32:	c5 01       	movw	r24, r10
     a34:	8d d2       	rcall	.+1306   	; 0xf50 <strnlen>
     a36:	4c 01       	movw	r8, r24
     a38:	82 01       	movw	r16, r4
     a3a:	f3 2d       	mov	r31, r3
     a3c:	ff 77       	andi	r31, 0x7F	; 127
     a3e:	3f 2e       	mov	r3, r31
     a40:	15 c0       	rjmp	.+42     	; 0xa6c <vfprintf+0x1a4>
     a42:	28 01       	movw	r4, r16
     a44:	22 e0       	ldi	r18, 0x02	; 2
     a46:	42 0e       	add	r4, r18
     a48:	51 1c       	adc	r5, r1
     a4a:	f8 01       	movw	r30, r16
     a4c:	a0 80       	ld	r10, Z
     a4e:	b1 80       	ldd	r11, Z+1	; 0x01
     a50:	36 fe       	sbrs	r3, 6
     a52:	03 c0       	rjmp	.+6      	; 0xa5a <vfprintf+0x192>
     a54:	69 2d       	mov	r22, r9
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <vfprintf+0x196>
     a5a:	6f ef       	ldi	r22, 0xFF	; 255
     a5c:	7f ef       	ldi	r23, 0xFF	; 255
     a5e:	c5 01       	movw	r24, r10
     a60:	65 d2       	rcall	.+1226   	; 0xf2c <strnlen_P>
     a62:	4c 01       	movw	r8, r24
     a64:	f3 2d       	mov	r31, r3
     a66:	f0 68       	ori	r31, 0x80	; 128
     a68:	3f 2e       	mov	r3, r31
     a6a:	82 01       	movw	r16, r4
     a6c:	33 fc       	sbrc	r3, 3
     a6e:	19 c0       	rjmp	.+50     	; 0xaa2 <vfprintf+0x1da>
     a70:	82 2d       	mov	r24, r2
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	88 16       	cp	r8, r24
     a76:	99 06       	cpc	r9, r25
     a78:	a0 f4       	brcc	.+40     	; 0xaa2 <vfprintf+0x1da>
     a7a:	b6 01       	movw	r22, r12
     a7c:	80 e2       	ldi	r24, 0x20	; 32
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	72 d2       	rcall	.+1252   	; 0xf66 <fputc>
     a82:	2a 94       	dec	r2
     a84:	f5 cf       	rjmp	.-22     	; 0xa70 <vfprintf+0x1a8>
     a86:	f5 01       	movw	r30, r10
     a88:	37 fc       	sbrc	r3, 7
     a8a:	85 91       	lpm	r24, Z+
     a8c:	37 fe       	sbrs	r3, 7
     a8e:	81 91       	ld	r24, Z+
     a90:	5f 01       	movw	r10, r30
     a92:	b6 01       	movw	r22, r12
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	67 d2       	rcall	.+1230   	; 0xf66 <fputc>
     a98:	21 10       	cpse	r2, r1
     a9a:	2a 94       	dec	r2
     a9c:	21 e0       	ldi	r18, 0x01	; 1
     a9e:	82 1a       	sub	r8, r18
     aa0:	91 08       	sbc	r9, r1
     aa2:	81 14       	cp	r8, r1
     aa4:	91 04       	cpc	r9, r1
     aa6:	79 f7       	brne	.-34     	; 0xa86 <vfprintf+0x1be>
     aa8:	e1 c0       	rjmp	.+450    	; 0xc6c <vfprintf+0x3a4>
     aaa:	84 36       	cpi	r24, 0x64	; 100
     aac:	11 f0       	breq	.+4      	; 0xab2 <vfprintf+0x1ea>
     aae:	89 36       	cpi	r24, 0x69	; 105
     ab0:	39 f5       	brne	.+78     	; 0xb00 <vfprintf+0x238>
     ab2:	f8 01       	movw	r30, r16
     ab4:	37 fe       	sbrs	r3, 7
     ab6:	07 c0       	rjmp	.+14     	; 0xac6 <vfprintf+0x1fe>
     ab8:	60 81       	ld	r22, Z
     aba:	71 81       	ldd	r23, Z+1	; 0x01
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	93 81       	ldd	r25, Z+3	; 0x03
     ac0:	0c 5f       	subi	r16, 0xFC	; 252
     ac2:	1f 4f       	sbci	r17, 0xFF	; 255
     ac4:	08 c0       	rjmp	.+16     	; 0xad6 <vfprintf+0x20e>
     ac6:	60 81       	ld	r22, Z
     ac8:	71 81       	ldd	r23, Z+1	; 0x01
     aca:	07 2e       	mov	r0, r23
     acc:	00 0c       	add	r0, r0
     ace:	88 0b       	sbc	r24, r24
     ad0:	99 0b       	sbc	r25, r25
     ad2:	0e 5f       	subi	r16, 0xFE	; 254
     ad4:	1f 4f       	sbci	r17, 0xFF	; 255
     ad6:	f3 2d       	mov	r31, r3
     ad8:	ff 76       	andi	r31, 0x6F	; 111
     ada:	3f 2e       	mov	r3, r31
     adc:	97 ff       	sbrs	r25, 7
     ade:	09 c0       	rjmp	.+18     	; 0xaf2 <vfprintf+0x22a>
     ae0:	90 95       	com	r25
     ae2:	80 95       	com	r24
     ae4:	70 95       	com	r23
     ae6:	61 95       	neg	r22
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	8f 4f       	sbci	r24, 0xFF	; 255
     aec:	9f 4f       	sbci	r25, 0xFF	; 255
     aee:	f0 68       	ori	r31, 0x80	; 128
     af0:	3f 2e       	mov	r3, r31
     af2:	2a e0       	ldi	r18, 0x0A	; 10
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	a3 01       	movw	r20, r6
     af8:	72 d2       	rcall	.+1252   	; 0xfde <__ultoa_invert>
     afa:	88 2e       	mov	r8, r24
     afc:	86 18       	sub	r8, r6
     afe:	44 c0       	rjmp	.+136    	; 0xb88 <vfprintf+0x2c0>
     b00:	85 37       	cpi	r24, 0x75	; 117
     b02:	31 f4       	brne	.+12     	; 0xb10 <vfprintf+0x248>
     b04:	23 2d       	mov	r18, r3
     b06:	2f 7e       	andi	r18, 0xEF	; 239
     b08:	b2 2e       	mov	r11, r18
     b0a:	2a e0       	ldi	r18, 0x0A	; 10
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	25 c0       	rjmp	.+74     	; 0xb5a <vfprintf+0x292>
     b10:	93 2d       	mov	r25, r3
     b12:	99 7f       	andi	r25, 0xF9	; 249
     b14:	b9 2e       	mov	r11, r25
     b16:	8f 36       	cpi	r24, 0x6F	; 111
     b18:	c1 f0       	breq	.+48     	; 0xb4a <vfprintf+0x282>
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <vfprintf+0x25a>
     b1c:	88 35       	cpi	r24, 0x58	; 88
     b1e:	79 f0       	breq	.+30     	; 0xb3e <vfprintf+0x276>
     b20:	ae c0       	rjmp	.+348    	; 0xc7e <vfprintf+0x3b6>
     b22:	80 37       	cpi	r24, 0x70	; 112
     b24:	19 f0       	breq	.+6      	; 0xb2c <vfprintf+0x264>
     b26:	88 37       	cpi	r24, 0x78	; 120
     b28:	21 f0       	breq	.+8      	; 0xb32 <vfprintf+0x26a>
     b2a:	a9 c0       	rjmp	.+338    	; 0xc7e <vfprintf+0x3b6>
     b2c:	e9 2f       	mov	r30, r25
     b2e:	e0 61       	ori	r30, 0x10	; 16
     b30:	be 2e       	mov	r11, r30
     b32:	b4 fe       	sbrs	r11, 4
     b34:	0d c0       	rjmp	.+26     	; 0xb50 <vfprintf+0x288>
     b36:	fb 2d       	mov	r31, r11
     b38:	f4 60       	ori	r31, 0x04	; 4
     b3a:	bf 2e       	mov	r11, r31
     b3c:	09 c0       	rjmp	.+18     	; 0xb50 <vfprintf+0x288>
     b3e:	34 fe       	sbrs	r3, 4
     b40:	0a c0       	rjmp	.+20     	; 0xb56 <vfprintf+0x28e>
     b42:	29 2f       	mov	r18, r25
     b44:	26 60       	ori	r18, 0x06	; 6
     b46:	b2 2e       	mov	r11, r18
     b48:	06 c0       	rjmp	.+12     	; 0xb56 <vfprintf+0x28e>
     b4a:	28 e0       	ldi	r18, 0x08	; 8
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <vfprintf+0x292>
     b50:	20 e1       	ldi	r18, 0x10	; 16
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <vfprintf+0x292>
     b56:	20 e1       	ldi	r18, 0x10	; 16
     b58:	32 e0       	ldi	r19, 0x02	; 2
     b5a:	f8 01       	movw	r30, r16
     b5c:	b7 fe       	sbrs	r11, 7
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <vfprintf+0x2a6>
     b60:	60 81       	ld	r22, Z
     b62:	71 81       	ldd	r23, Z+1	; 0x01
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	0c 5f       	subi	r16, 0xFC	; 252
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
     b6c:	06 c0       	rjmp	.+12     	; 0xb7a <vfprintf+0x2b2>
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 5f       	subi	r16, 0xFE	; 254
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
     b7a:	a3 01       	movw	r20, r6
     b7c:	30 d2       	rcall	.+1120   	; 0xfde <__ultoa_invert>
     b7e:	88 2e       	mov	r8, r24
     b80:	86 18       	sub	r8, r6
     b82:	fb 2d       	mov	r31, r11
     b84:	ff 77       	andi	r31, 0x7F	; 127
     b86:	3f 2e       	mov	r3, r31
     b88:	36 fe       	sbrs	r3, 6
     b8a:	0d c0       	rjmp	.+26     	; 0xba6 <vfprintf+0x2de>
     b8c:	23 2d       	mov	r18, r3
     b8e:	2e 7f       	andi	r18, 0xFE	; 254
     b90:	a2 2e       	mov	r10, r18
     b92:	89 14       	cp	r8, r9
     b94:	58 f4       	brcc	.+22     	; 0xbac <vfprintf+0x2e4>
     b96:	34 fe       	sbrs	r3, 4
     b98:	0b c0       	rjmp	.+22     	; 0xbb0 <vfprintf+0x2e8>
     b9a:	32 fc       	sbrc	r3, 2
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <vfprintf+0x2e8>
     b9e:	83 2d       	mov	r24, r3
     ba0:	8e 7e       	andi	r24, 0xEE	; 238
     ba2:	a8 2e       	mov	r10, r24
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <vfprintf+0x2e8>
     ba6:	b8 2c       	mov	r11, r8
     ba8:	a3 2c       	mov	r10, r3
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <vfprintf+0x2ea>
     bac:	b8 2c       	mov	r11, r8
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <vfprintf+0x2ea>
     bb0:	b9 2c       	mov	r11, r9
     bb2:	a4 fe       	sbrs	r10, 4
     bb4:	0f c0       	rjmp	.+30     	; 0xbd4 <vfprintf+0x30c>
     bb6:	fe 01       	movw	r30, r28
     bb8:	e8 0d       	add	r30, r8
     bba:	f1 1d       	adc	r31, r1
     bbc:	80 81       	ld	r24, Z
     bbe:	80 33       	cpi	r24, 0x30	; 48
     bc0:	21 f4       	brne	.+8      	; 0xbca <vfprintf+0x302>
     bc2:	9a 2d       	mov	r25, r10
     bc4:	99 7e       	andi	r25, 0xE9	; 233
     bc6:	a9 2e       	mov	r10, r25
     bc8:	09 c0       	rjmp	.+18     	; 0xbdc <vfprintf+0x314>
     bca:	a2 fe       	sbrs	r10, 2
     bcc:	06 c0       	rjmp	.+12     	; 0xbda <vfprintf+0x312>
     bce:	b3 94       	inc	r11
     bd0:	b3 94       	inc	r11
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <vfprintf+0x314>
     bd4:	8a 2d       	mov	r24, r10
     bd6:	86 78       	andi	r24, 0x86	; 134
     bd8:	09 f0       	breq	.+2      	; 0xbdc <vfprintf+0x314>
     bda:	b3 94       	inc	r11
     bdc:	a3 fc       	sbrc	r10, 3
     bde:	10 c0       	rjmp	.+32     	; 0xc00 <vfprintf+0x338>
     be0:	a0 fe       	sbrs	r10, 0
     be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0x328>
     be4:	b2 14       	cp	r11, r2
     be6:	80 f4       	brcc	.+32     	; 0xc08 <vfprintf+0x340>
     be8:	28 0c       	add	r2, r8
     bea:	92 2c       	mov	r9, r2
     bec:	9b 18       	sub	r9, r11
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <vfprintf+0x342>
     bf0:	b2 14       	cp	r11, r2
     bf2:	58 f4       	brcc	.+22     	; 0xc0a <vfprintf+0x342>
     bf4:	b6 01       	movw	r22, r12
     bf6:	80 e2       	ldi	r24, 0x20	; 32
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	b5 d1       	rcall	.+874    	; 0xf66 <fputc>
     bfc:	b3 94       	inc	r11
     bfe:	f8 cf       	rjmp	.-16     	; 0xbf0 <vfprintf+0x328>
     c00:	b2 14       	cp	r11, r2
     c02:	18 f4       	brcc	.+6      	; 0xc0a <vfprintf+0x342>
     c04:	2b 18       	sub	r2, r11
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <vfprintf+0x344>
     c08:	98 2c       	mov	r9, r8
     c0a:	21 2c       	mov	r2, r1
     c0c:	a4 fe       	sbrs	r10, 4
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <vfprintf+0x366>
     c10:	b6 01       	movw	r22, r12
     c12:	80 e3       	ldi	r24, 0x30	; 48
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a7 d1       	rcall	.+846    	; 0xf66 <fputc>
     c18:	a2 fe       	sbrs	r10, 2
     c1a:	16 c0       	rjmp	.+44     	; 0xc48 <vfprintf+0x380>
     c1c:	a1 fc       	sbrc	r10, 1
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <vfprintf+0x35e>
     c20:	88 e7       	ldi	r24, 0x78	; 120
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <vfprintf+0x362>
     c26:	88 e5       	ldi	r24, 0x58	; 88
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	b6 01       	movw	r22, r12
     c2c:	0c c0       	rjmp	.+24     	; 0xc46 <vfprintf+0x37e>
     c2e:	8a 2d       	mov	r24, r10
     c30:	86 78       	andi	r24, 0x86	; 134
     c32:	51 f0       	breq	.+20     	; 0xc48 <vfprintf+0x380>
     c34:	a1 fe       	sbrs	r10, 1
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <vfprintf+0x374>
     c38:	8b e2       	ldi	r24, 0x2B	; 43
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <vfprintf+0x376>
     c3c:	80 e2       	ldi	r24, 0x20	; 32
     c3e:	a7 fc       	sbrc	r10, 7
     c40:	8d e2       	ldi	r24, 0x2D	; 45
     c42:	b6 01       	movw	r22, r12
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	8f d1       	rcall	.+798    	; 0xf66 <fputc>
     c48:	89 14       	cp	r8, r9
     c4a:	30 f4       	brcc	.+12     	; 0xc58 <vfprintf+0x390>
     c4c:	b6 01       	movw	r22, r12
     c4e:	80 e3       	ldi	r24, 0x30	; 48
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	89 d1       	rcall	.+786    	; 0xf66 <fputc>
     c54:	9a 94       	dec	r9
     c56:	f8 cf       	rjmp	.-16     	; 0xc48 <vfprintf+0x380>
     c58:	8a 94       	dec	r8
     c5a:	f3 01       	movw	r30, r6
     c5c:	e8 0d       	add	r30, r8
     c5e:	f1 1d       	adc	r31, r1
     c60:	80 81       	ld	r24, Z
     c62:	b6 01       	movw	r22, r12
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	7f d1       	rcall	.+766    	; 0xf66 <fputc>
     c68:	81 10       	cpse	r8, r1
     c6a:	f6 cf       	rjmp	.-20     	; 0xc58 <vfprintf+0x390>
     c6c:	22 20       	and	r2, r2
     c6e:	09 f4       	brne	.+2      	; 0xc72 <vfprintf+0x3aa>
     c70:	4e ce       	rjmp	.-868    	; 0x90e <vfprintf+0x46>
     c72:	b6 01       	movw	r22, r12
     c74:	80 e2       	ldi	r24, 0x20	; 32
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	76 d1       	rcall	.+748    	; 0xf66 <fputc>
     c7a:	2a 94       	dec	r2
     c7c:	f7 cf       	rjmp	.-18     	; 0xc6c <vfprintf+0x3a4>
     c7e:	f6 01       	movw	r30, r12
     c80:	86 81       	ldd	r24, Z+6	; 0x06
     c82:	97 81       	ldd	r25, Z+7	; 0x07
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <vfprintf+0x3c2>
     c86:	8f ef       	ldi	r24, 0xFF	; 255
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	2b 96       	adiw	r28, 0x0b	; 11
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	bf 90       	pop	r11
     ca2:	af 90       	pop	r10
     ca4:	9f 90       	pop	r9
     ca6:	8f 90       	pop	r8
     ca8:	7f 90       	pop	r7
     caa:	6f 90       	pop	r6
     cac:	5f 90       	pop	r5
     cae:	4f 90       	pop	r4
     cb0:	3f 90       	pop	r3
     cb2:	2f 90       	pop	r2
     cb4:	08 95       	ret

00000cb6 <calloc>:
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	86 9f       	mul	r24, r22
     cc0:	80 01       	movw	r16, r0
     cc2:	87 9f       	mul	r24, r23
     cc4:	10 0d       	add	r17, r0
     cc6:	96 9f       	mul	r25, r22
     cc8:	10 0d       	add	r17, r0
     cca:	11 24       	eor	r1, r1
     ccc:	c8 01       	movw	r24, r16
     cce:	0d d0       	rcall	.+26     	; 0xcea <malloc>
     cd0:	ec 01       	movw	r28, r24
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	21 f0       	breq	.+8      	; 0xcde <calloc+0x28>
     cd6:	a8 01       	movw	r20, r16
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	32 d1       	rcall	.+612    	; 0xf42 <memset>
     cde:	ce 01       	movw	r24, r28
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <malloc>:
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	91 05       	cpc	r25, r1
     cf6:	10 f4       	brcc	.+4      	; 0xcfc <malloc+0x12>
     cf8:	82 e0       	ldi	r24, 0x02	; 2
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <__flp>
     d00:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <__flp+0x1>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	a0 e0       	ldi	r26, 0x00	; 0
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	30 97       	sbiw	r30, 0x00	; 0
     d0e:	19 f1       	breq	.+70     	; 0xd56 <malloc+0x6c>
     d10:	40 81       	ld	r20, Z
     d12:	51 81       	ldd	r21, Z+1	; 0x01
     d14:	02 81       	ldd	r16, Z+2	; 0x02
     d16:	13 81       	ldd	r17, Z+3	; 0x03
     d18:	48 17       	cp	r20, r24
     d1a:	59 07       	cpc	r21, r25
     d1c:	c8 f0       	brcs	.+50     	; 0xd50 <malloc+0x66>
     d1e:	84 17       	cp	r24, r20
     d20:	95 07       	cpc	r25, r21
     d22:	69 f4       	brne	.+26     	; 0xd3e <malloc+0x54>
     d24:	10 97       	sbiw	r26, 0x00	; 0
     d26:	31 f0       	breq	.+12     	; 0xd34 <malloc+0x4a>
     d28:	12 96       	adiw	r26, 0x02	; 2
     d2a:	0c 93       	st	X, r16
     d2c:	12 97       	sbiw	r26, 0x02	; 2
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	1c 93       	st	X, r17
     d32:	27 c0       	rjmp	.+78     	; 0xd82 <malloc+0x98>
     d34:	00 93 20 20 	sts	0x2020, r16	; 0x802020 <__flp>
     d38:	10 93 21 20 	sts	0x2021, r17	; 0x802021 <__flp+0x1>
     d3c:	22 c0       	rjmp	.+68     	; 0xd82 <malloc+0x98>
     d3e:	21 15       	cp	r18, r1
     d40:	31 05       	cpc	r19, r1
     d42:	19 f0       	breq	.+6      	; 0xd4a <malloc+0x60>
     d44:	42 17       	cp	r20, r18
     d46:	53 07       	cpc	r21, r19
     d48:	18 f4       	brcc	.+6      	; 0xd50 <malloc+0x66>
     d4a:	9a 01       	movw	r18, r20
     d4c:	bd 01       	movw	r22, r26
     d4e:	ef 01       	movw	r28, r30
     d50:	df 01       	movw	r26, r30
     d52:	f8 01       	movw	r30, r16
     d54:	db cf       	rjmp	.-74     	; 0xd0c <malloc+0x22>
     d56:	21 15       	cp	r18, r1
     d58:	31 05       	cpc	r19, r1
     d5a:	f9 f0       	breq	.+62     	; 0xd9a <malloc+0xb0>
     d5c:	28 1b       	sub	r18, r24
     d5e:	39 0b       	sbc	r19, r25
     d60:	24 30       	cpi	r18, 0x04	; 4
     d62:	31 05       	cpc	r19, r1
     d64:	80 f4       	brcc	.+32     	; 0xd86 <malloc+0x9c>
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	9b 81       	ldd	r25, Y+3	; 0x03
     d6a:	61 15       	cp	r22, r1
     d6c:	71 05       	cpc	r23, r1
     d6e:	21 f0       	breq	.+8      	; 0xd78 <malloc+0x8e>
     d70:	fb 01       	movw	r30, r22
     d72:	82 83       	std	Z+2, r24	; 0x02
     d74:	93 83       	std	Z+3, r25	; 0x03
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <malloc+0x96>
     d78:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__flp>
     d7c:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <__flp+0x1>
     d80:	fe 01       	movw	r30, r28
     d82:	32 96       	adiw	r30, 0x02	; 2
     d84:	44 c0       	rjmp	.+136    	; 0xe0e <malloc+0x124>
     d86:	fe 01       	movw	r30, r28
     d88:	e2 0f       	add	r30, r18
     d8a:	f3 1f       	adc	r31, r19
     d8c:	81 93       	st	Z+, r24
     d8e:	91 93       	st	Z+, r25
     d90:	22 50       	subi	r18, 0x02	; 2
     d92:	31 09       	sbc	r19, r1
     d94:	28 83       	st	Y, r18
     d96:	39 83       	std	Y+1, r19	; 0x01
     d98:	3a c0       	rjmp	.+116    	; 0xe0e <malloc+0x124>
     d9a:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <__brkval>
     d9e:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <__brkval+0x1>
     da2:	23 2b       	or	r18, r19
     da4:	41 f4       	brne	.+16     	; 0xdb6 <malloc+0xcc>
     da6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
     daa:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
     dae:	20 93 1e 20 	sts	0x201E, r18	; 0x80201e <__brkval>
     db2:	30 93 1f 20 	sts	0x201F, r19	; 0x80201f <__brkval+0x1>
     db6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     dba:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
     dbe:	21 15       	cp	r18, r1
     dc0:	31 05       	cpc	r19, r1
     dc2:	41 f4       	brne	.+16     	; 0xdd4 <malloc+0xea>
     dc4:	2d b7       	in	r18, 0x3d	; 61
     dc6:	3e b7       	in	r19, 0x3e	; 62
     dc8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
     dcc:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
     dd0:	24 1b       	sub	r18, r20
     dd2:	35 0b       	sbc	r19, r21
     dd4:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <__brkval>
     dd8:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <__brkval+0x1>
     ddc:	e2 17       	cp	r30, r18
     dde:	f3 07       	cpc	r31, r19
     de0:	a0 f4       	brcc	.+40     	; 0xe0a <malloc+0x120>
     de2:	2e 1b       	sub	r18, r30
     de4:	3f 0b       	sbc	r19, r31
     de6:	28 17       	cp	r18, r24
     de8:	39 07       	cpc	r19, r25
     dea:	78 f0       	brcs	.+30     	; 0xe0a <malloc+0x120>
     dec:	ac 01       	movw	r20, r24
     dee:	4e 5f       	subi	r20, 0xFE	; 254
     df0:	5f 4f       	sbci	r21, 0xFF	; 255
     df2:	24 17       	cp	r18, r20
     df4:	35 07       	cpc	r19, r21
     df6:	48 f0       	brcs	.+18     	; 0xe0a <malloc+0x120>
     df8:	4e 0f       	add	r20, r30
     dfa:	5f 1f       	adc	r21, r31
     dfc:	40 93 1e 20 	sts	0x201E, r20	; 0x80201e <__brkval>
     e00:	50 93 1f 20 	sts	0x201F, r21	; 0x80201f <__brkval+0x1>
     e04:	81 93       	st	Z+, r24
     e06:	91 93       	st	Z+, r25
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <malloc+0x124>
     e0a:	e0 e0       	ldi	r30, 0x00	; 0
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	cf 01       	movw	r24, r30
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	08 95       	ret

00000e1a <free>:
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	09 f4       	brne	.+2      	; 0xe24 <free+0xa>
     e22:	81 c0       	rjmp	.+258    	; 0xf26 <free+0x10c>
     e24:	fc 01       	movw	r30, r24
     e26:	32 97       	sbiw	r30, 0x02	; 2
     e28:	12 82       	std	Z+2, r1	; 0x02
     e2a:	13 82       	std	Z+3, r1	; 0x03
     e2c:	a0 91 20 20 	lds	r26, 0x2020	; 0x802020 <__flp>
     e30:	b0 91 21 20 	lds	r27, 0x2021	; 0x802021 <__flp+0x1>
     e34:	10 97       	sbiw	r26, 0x00	; 0
     e36:	81 f4       	brne	.+32     	; 0xe58 <free+0x3e>
     e38:	20 81       	ld	r18, Z
     e3a:	31 81       	ldd	r19, Z+1	; 0x01
     e3c:	82 0f       	add	r24, r18
     e3e:	93 1f       	adc	r25, r19
     e40:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <__brkval>
     e44:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <__brkval+0x1>
     e48:	28 17       	cp	r18, r24
     e4a:	39 07       	cpc	r19, r25
     e4c:	51 f5       	brne	.+84     	; 0xea2 <free+0x88>
     e4e:	e0 93 1e 20 	sts	0x201E, r30	; 0x80201e <__brkval>
     e52:	f0 93 1f 20 	sts	0x201F, r31	; 0x80201f <__brkval+0x1>
     e56:	67 c0       	rjmp	.+206    	; 0xf26 <free+0x10c>
     e58:	ed 01       	movw	r28, r26
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	ce 17       	cp	r28, r30
     e60:	df 07       	cpc	r29, r31
     e62:	40 f4       	brcc	.+16     	; 0xe74 <free+0x5a>
     e64:	4a 81       	ldd	r20, Y+2	; 0x02
     e66:	5b 81       	ldd	r21, Y+3	; 0x03
     e68:	9e 01       	movw	r18, r28
     e6a:	41 15       	cp	r20, r1
     e6c:	51 05       	cpc	r21, r1
     e6e:	f1 f0       	breq	.+60     	; 0xeac <free+0x92>
     e70:	ea 01       	movw	r28, r20
     e72:	f5 cf       	rjmp	.-22     	; 0xe5e <free+0x44>
     e74:	c2 83       	std	Z+2, r28	; 0x02
     e76:	d3 83       	std	Z+3, r29	; 0x03
     e78:	40 81       	ld	r20, Z
     e7a:	51 81       	ldd	r21, Z+1	; 0x01
     e7c:	84 0f       	add	r24, r20
     e7e:	95 1f       	adc	r25, r21
     e80:	c8 17       	cp	r28, r24
     e82:	d9 07       	cpc	r29, r25
     e84:	59 f4       	brne	.+22     	; 0xe9c <free+0x82>
     e86:	88 81       	ld	r24, Y
     e88:	99 81       	ldd	r25, Y+1	; 0x01
     e8a:	84 0f       	add	r24, r20
     e8c:	95 1f       	adc	r25, r21
     e8e:	02 96       	adiw	r24, 0x02	; 2
     e90:	80 83       	st	Z, r24
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	9b 81       	ldd	r25, Y+3	; 0x03
     e98:	82 83       	std	Z+2, r24	; 0x02
     e9a:	93 83       	std	Z+3, r25	; 0x03
     e9c:	21 15       	cp	r18, r1
     e9e:	31 05       	cpc	r19, r1
     ea0:	29 f4       	brne	.+10     	; 0xeac <free+0x92>
     ea2:	e0 93 20 20 	sts	0x2020, r30	; 0x802020 <__flp>
     ea6:	f0 93 21 20 	sts	0x2021, r31	; 0x802021 <__flp+0x1>
     eaa:	3d c0       	rjmp	.+122    	; 0xf26 <free+0x10c>
     eac:	e9 01       	movw	r28, r18
     eae:	ea 83       	std	Y+2, r30	; 0x02
     eb0:	fb 83       	std	Y+3, r31	; 0x03
     eb2:	49 91       	ld	r20, Y+
     eb4:	59 91       	ld	r21, Y+
     eb6:	c4 0f       	add	r28, r20
     eb8:	d5 1f       	adc	r29, r21
     eba:	ec 17       	cp	r30, r28
     ebc:	fd 07       	cpc	r31, r29
     ebe:	61 f4       	brne	.+24     	; 0xed8 <free+0xbe>
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	84 0f       	add	r24, r20
     ec6:	95 1f       	adc	r25, r21
     ec8:	02 96       	adiw	r24, 0x02	; 2
     eca:	e9 01       	movw	r28, r18
     ecc:	88 83       	st	Y, r24
     ece:	99 83       	std	Y+1, r25	; 0x01
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	8a 83       	std	Y+2, r24	; 0x02
     ed6:	9b 83       	std	Y+3, r25	; 0x03
     ed8:	e0 e0       	ldi	r30, 0x00	; 0
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	12 96       	adiw	r26, 0x02	; 2
     ede:	8d 91       	ld	r24, X+
     ee0:	9c 91       	ld	r25, X
     ee2:	13 97       	sbiw	r26, 0x03	; 3
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	19 f0       	breq	.+6      	; 0xeee <free+0xd4>
     ee8:	fd 01       	movw	r30, r26
     eea:	dc 01       	movw	r26, r24
     eec:	f7 cf       	rjmp	.-18     	; 0xedc <free+0xc2>
     eee:	8d 91       	ld	r24, X+
     ef0:	9c 91       	ld	r25, X
     ef2:	11 97       	sbiw	r26, 0x01	; 1
     ef4:	9d 01       	movw	r18, r26
     ef6:	2e 5f       	subi	r18, 0xFE	; 254
     ef8:	3f 4f       	sbci	r19, 0xFF	; 255
     efa:	82 0f       	add	r24, r18
     efc:	93 1f       	adc	r25, r19
     efe:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <__brkval>
     f02:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <__brkval+0x1>
     f06:	28 17       	cp	r18, r24
     f08:	39 07       	cpc	r19, r25
     f0a:	69 f4       	brne	.+26     	; 0xf26 <free+0x10c>
     f0c:	30 97       	sbiw	r30, 0x00	; 0
     f0e:	29 f4       	brne	.+10     	; 0xf1a <free+0x100>
     f10:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <__flp>
     f14:	10 92 21 20 	sts	0x2021, r1	; 0x802021 <__flp+0x1>
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <free+0x104>
     f1a:	12 82       	std	Z+2, r1	; 0x02
     f1c:	13 82       	std	Z+3, r1	; 0x03
     f1e:	a0 93 1e 20 	sts	0x201E, r26	; 0x80201e <__brkval>
     f22:	b0 93 1f 20 	sts	0x201F, r27	; 0x80201f <__brkval+0x1>
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <strnlen_P>:
     f2c:	fc 01       	movw	r30, r24
     f2e:	05 90       	lpm	r0, Z+
     f30:	61 50       	subi	r22, 0x01	; 1
     f32:	70 40       	sbci	r23, 0x00	; 0
     f34:	01 10       	cpse	r0, r1
     f36:	d8 f7       	brcc	.-10     	; 0xf2e <strnlen_P+0x2>
     f38:	80 95       	com	r24
     f3a:	90 95       	com	r25
     f3c:	8e 0f       	add	r24, r30
     f3e:	9f 1f       	adc	r25, r31
     f40:	08 95       	ret

00000f42 <memset>:
     f42:	dc 01       	movw	r26, r24
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <memset+0x6>
     f46:	6d 93       	st	X+, r22
     f48:	41 50       	subi	r20, 0x01	; 1
     f4a:	50 40       	sbci	r21, 0x00	; 0
     f4c:	e0 f7       	brcc	.-8      	; 0xf46 <memset+0x4>
     f4e:	08 95       	ret

00000f50 <strnlen>:
     f50:	fc 01       	movw	r30, r24
     f52:	61 50       	subi	r22, 0x01	; 1
     f54:	70 40       	sbci	r23, 0x00	; 0
     f56:	01 90       	ld	r0, Z+
     f58:	01 10       	cpse	r0, r1
     f5a:	d8 f7       	brcc	.-10     	; 0xf52 <strnlen+0x2>
     f5c:	80 95       	com	r24
     f5e:	90 95       	com	r25
     f60:	8e 0f       	add	r24, r30
     f62:	9f 1f       	adc	r25, r31
     f64:	08 95       	ret

00000f66 <fputc>:
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	fb 01       	movw	r30, r22
     f70:	23 81       	ldd	r18, Z+3	; 0x03
     f72:	21 fd       	sbrc	r18, 1
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <fputc+0x16>
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	9f ef       	ldi	r25, 0xFF	; 255
     f7a:	2c c0       	rjmp	.+88     	; 0xfd4 <fputc+0x6e>
     f7c:	22 ff       	sbrs	r18, 2
     f7e:	16 c0       	rjmp	.+44     	; 0xfac <fputc+0x46>
     f80:	46 81       	ldd	r20, Z+6	; 0x06
     f82:	57 81       	ldd	r21, Z+7	; 0x07
     f84:	24 81       	ldd	r18, Z+4	; 0x04
     f86:	35 81       	ldd	r19, Z+5	; 0x05
     f88:	42 17       	cp	r20, r18
     f8a:	53 07       	cpc	r21, r19
     f8c:	44 f4       	brge	.+16     	; 0xf9e <fputc+0x38>
     f8e:	a0 81       	ld	r26, Z
     f90:	b1 81       	ldd	r27, Z+1	; 0x01
     f92:	9d 01       	movw	r18, r26
     f94:	2f 5f       	subi	r18, 0xFF	; 255
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	20 83       	st	Z, r18
     f9a:	31 83       	std	Z+1, r19	; 0x01
     f9c:	8c 93       	st	X, r24
     f9e:	26 81       	ldd	r18, Z+6	; 0x06
     fa0:	37 81       	ldd	r19, Z+7	; 0x07
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	26 83       	std	Z+6, r18	; 0x06
     fa8:	37 83       	std	Z+7, r19	; 0x07
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <fputc+0x6e>
     fac:	8b 01       	movw	r16, r22
     fae:	ec 01       	movw	r28, r24
     fb0:	fb 01       	movw	r30, r22
     fb2:	00 84       	ldd	r0, Z+8	; 0x08
     fb4:	f1 85       	ldd	r31, Z+9	; 0x09
     fb6:	e0 2d       	mov	r30, r0
     fb8:	19 95       	eicall
     fba:	89 2b       	or	r24, r25
     fbc:	e1 f6       	brne	.-72     	; 0xf76 <fputc+0x10>
     fbe:	d8 01       	movw	r26, r16
     fc0:	16 96       	adiw	r26, 0x06	; 6
     fc2:	8d 91       	ld	r24, X+
     fc4:	9c 91       	ld	r25, X
     fc6:	17 97       	sbiw	r26, 0x07	; 7
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	16 96       	adiw	r26, 0x06	; 6
     fcc:	8d 93       	st	X+, r24
     fce:	9c 93       	st	X, r25
     fd0:	17 97       	sbiw	r26, 0x07	; 7
     fd2:	ce 01       	movw	r24, r28
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	08 95       	ret

00000fde <__ultoa_invert>:
     fde:	fa 01       	movw	r30, r20
     fe0:	aa 27       	eor	r26, r26
     fe2:	28 30       	cpi	r18, 0x08	; 8
     fe4:	51 f1       	breq	.+84     	; 0x103a <__ultoa_invert+0x5c>
     fe6:	20 31       	cpi	r18, 0x10	; 16
     fe8:	81 f1       	breq	.+96     	; 0x104a <__ultoa_invert+0x6c>
     fea:	e8 94       	clt
     fec:	6f 93       	push	r22
     fee:	6e 7f       	andi	r22, 0xFE	; 254
     ff0:	6e 5f       	subi	r22, 0xFE	; 254
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	8f 4f       	sbci	r24, 0xFF	; 255
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	af 4f       	sbci	r26, 0xFF	; 255
     ffa:	b1 e0       	ldi	r27, 0x01	; 1
     ffc:	3e d0       	rcall	.+124    	; 0x107a <__ultoa_invert+0x9c>
     ffe:	b4 e0       	ldi	r27, 0x04	; 4
    1000:	3c d0       	rcall	.+120    	; 0x107a <__ultoa_invert+0x9c>
    1002:	67 0f       	add	r22, r23
    1004:	78 1f       	adc	r23, r24
    1006:	89 1f       	adc	r24, r25
    1008:	9a 1f       	adc	r25, r26
    100a:	a1 1d       	adc	r26, r1
    100c:	68 0f       	add	r22, r24
    100e:	79 1f       	adc	r23, r25
    1010:	8a 1f       	adc	r24, r26
    1012:	91 1d       	adc	r25, r1
    1014:	a1 1d       	adc	r26, r1
    1016:	6a 0f       	add	r22, r26
    1018:	71 1d       	adc	r23, r1
    101a:	81 1d       	adc	r24, r1
    101c:	91 1d       	adc	r25, r1
    101e:	a1 1d       	adc	r26, r1
    1020:	20 d0       	rcall	.+64     	; 0x1062 <__ultoa_invert+0x84>
    1022:	09 f4       	brne	.+2      	; 0x1026 <__ultoa_invert+0x48>
    1024:	68 94       	set
    1026:	3f 91       	pop	r19
    1028:	2a e0       	ldi	r18, 0x0A	; 10
    102a:	26 9f       	mul	r18, r22
    102c:	11 24       	eor	r1, r1
    102e:	30 19       	sub	r19, r0
    1030:	30 5d       	subi	r19, 0xD0	; 208
    1032:	31 93       	st	Z+, r19
    1034:	de f6       	brtc	.-74     	; 0xfec <__ultoa_invert+0xe>
    1036:	cf 01       	movw	r24, r30
    1038:	08 95       	ret
    103a:	46 2f       	mov	r20, r22
    103c:	47 70       	andi	r20, 0x07	; 7
    103e:	40 5d       	subi	r20, 0xD0	; 208
    1040:	41 93       	st	Z+, r20
    1042:	b3 e0       	ldi	r27, 0x03	; 3
    1044:	0f d0       	rcall	.+30     	; 0x1064 <__ultoa_invert+0x86>
    1046:	c9 f7       	brne	.-14     	; 0x103a <__ultoa_invert+0x5c>
    1048:	f6 cf       	rjmp	.-20     	; 0x1036 <__ultoa_invert+0x58>
    104a:	46 2f       	mov	r20, r22
    104c:	4f 70       	andi	r20, 0x0F	; 15
    104e:	40 5d       	subi	r20, 0xD0	; 208
    1050:	4a 33       	cpi	r20, 0x3A	; 58
    1052:	18 f0       	brcs	.+6      	; 0x105a <__ultoa_invert+0x7c>
    1054:	49 5d       	subi	r20, 0xD9	; 217
    1056:	31 fd       	sbrc	r19, 1
    1058:	40 52       	subi	r20, 0x20	; 32
    105a:	41 93       	st	Z+, r20
    105c:	02 d0       	rcall	.+4      	; 0x1062 <__ultoa_invert+0x84>
    105e:	a9 f7       	brne	.-22     	; 0x104a <__ultoa_invert+0x6c>
    1060:	ea cf       	rjmp	.-44     	; 0x1036 <__ultoa_invert+0x58>
    1062:	b4 e0       	ldi	r27, 0x04	; 4
    1064:	a6 95       	lsr	r26
    1066:	97 95       	ror	r25
    1068:	87 95       	ror	r24
    106a:	77 95       	ror	r23
    106c:	67 95       	ror	r22
    106e:	ba 95       	dec	r27
    1070:	c9 f7       	brne	.-14     	; 0x1064 <__ultoa_invert+0x86>
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	61 05       	cpc	r22, r1
    1076:	71 05       	cpc	r23, r1
    1078:	08 95       	ret
    107a:	9b 01       	movw	r18, r22
    107c:	ac 01       	movw	r20, r24
    107e:	0a 2e       	mov	r0, r26
    1080:	06 94       	lsr	r0
    1082:	57 95       	ror	r21
    1084:	47 95       	ror	r20
    1086:	37 95       	ror	r19
    1088:	27 95       	ror	r18
    108a:	ba 95       	dec	r27
    108c:	c9 f7       	brne	.-14     	; 0x1080 <__ultoa_invert+0xa2>
    108e:	62 0f       	add	r22, r18
    1090:	73 1f       	adc	r23, r19
    1092:	84 1f       	adc	r24, r20
    1094:	95 1f       	adc	r25, r21
    1096:	a0 1d       	adc	r26, r0
    1098:	08 95       	ret

0000109a <_exit>:
    109a:	f8 94       	cli

0000109c <__stop_program>:
    109c:	ff cf       	rjmp	.-2      	; 0x109c <__stop_program>
